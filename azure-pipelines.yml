trigger:
  batch: 'true'
  branches:
    include:
    - master
    - hotfix/*
    - development
    - development-*

resources:
  pipelines:
  - pipeline: 'intent'
    source: 'Intent Architect'
    trigger: 
      branches:
        include:
        - 'refs/tags/publish/client/*'

variables:
- group: 'Intent Architect Credentials'
- group: 'NuGet.org API Keys'
- group: 'Pipeline Agent Pool Names'
- name: 'isDevelopment'
  value: $[or(startsWith(variables['Build.SourceBranch'], 'refs/heads/development-'), in(variables['Build.SourceBranch'], 'refs/heads/development'))]
- name: 'isMaster'
  value: $[in(variables['Build.SourceBranch'], 'refs/heads/master')]
- name: 'vstsFeed'
  value: '4bb4c1b9-5b56-4972-8bac-0ad3fa64204e/intentarchitect-feed'
- name: 'vstsFeedUrl'
  value: 'https://pkgs.dev.azure.com/intentarchitect/4bb4c1b9-5b56-4972-8bac-0ad3fa64204e/_packaging/intentarchitect-feed/nuget/v3/index.json'
- name: 'targetsToBuild'
  value: '**/*.sln'
- name: 'intent-solution'
  value: 'Tests/Intent.Modules.Tests.isln'
- name: 'intent-module-solution'
  value: 'Modules/Intent.Modules.isln'
- name: 'warning-logging-command'
  value: '##vso[task.logissue type=warning;]{@m} {@x}\n'
- name: 'error-logging-command'
  value: '##vso[task.logissue type=error;]{@m} {@x}\n'

pool:
  name: $(BuildPool.AzureManaged)
  demands:
  - 'ImageOverride -equals ubuntu-latest'

steps:

- task: CmdLine@2
  inputs:
    script: |
      git config --global core.longpaths true

- checkout: 'self'
  persistCredentials: 'true'
  fetchDepth: '1'
  submodules: 'recursive'

- task: PowerShell@2
  displayName: 'Imodspec validation'
  inputs:
    pwsh: true
    filePath: 'PipelineScripts/pre-build-validation.ps1'
    arguments: 'true'

- task: UseDotNet@2
  displayName: 'Install latest .NET 8 SDK'
  inputs:
    version: '8.x'

# Required for the Software Factory CLI
- task: UseDotNet@2
  displayName: 'Install latest .NET 9 SDK'
  inputs:
    version: '9.x'

- task: PowerShell@2
  displayName: 'Check TypeScript version'
  inputs:
    targetType: inline
    script: |
      Write-Host "Install TypeScript:"
      npm install -g typescript
      Write-Host "Check TypeScript version:"
      tsc --version

- task: PowerShell@2
  displayName: 'Compile Designer Macro TypeScript files'
  inputs:
    targetType: inline
    script: |
      cd DesignerMacros/src
      ./compile-all.ps1

# Required for entry in NuGet.Config that is generated as part of 'dotnet pack'.
- task: NuGetAuthenticate@1

# We pack upfront as projects may rely on NuGet packages from this same solution
- task: PowerShell@2
  displayName: 'dotnet pack'
  inputs:
    pwsh: true
    failOnStderr: true
    ignoreLASTEXITCODE: true
    filePath: 'PipelineScripts/dotnet-pack-all.ps1'
    arguments: >
      -dotnetPackOutputDirectory $(Build.ArtifactStagingDirectory)
      -vstsFeedUrl $(vstsFeedUrl)

# Push the NuGet packages to the DevOps artifact feed so that they're available to this build and other pipelines
- task: NuGetCommand@2
  displayName: 'Push Intent Nuget Packages to DevOps Artifacts'
  condition: and(succeeded(), in('True', variables.isMaster, variables.isDevelopment))
  inputs:
      command: 'push'
      feedsToUse: 'select'
      includeNuGetOrg: false
      publishVstsFeed: $(vstsFeed)
      allowPackageConflicts: true
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      nuGetFeedType: 'internal'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  env:
    DOTNET_NOLOGO: '1'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: $(vstsFeed)
    projects: $(targetsToBuild)
    restoreArguments: >
      --no-cache

- task: PowerShell@2
  displayName: 'Update Project URLs in imodspecs'
  condition: and(succeeded(), in('True', variables.isMaster))
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      Get-ChildItem -Recurse -Filter "*.imodspec" | ForEach-Object {
        (Get-Content $_.FullName) -replace '/development/', '/master/' | Set-Content $_.FullName
      }

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  env:
    DOTNET_NOLOGO: 1
  inputs:
    command: 'build'
    projects: $(targetsToBuild)
    arguments: >
      --no-restore
      -p:IntentModuleOutputPath=$(Build.ArtifactStagingDirectory)

# Run this check as early as possible as devs will forget to do this and early feedback is useful.
- task: PowerShell@2
  displayName: 'Template Testing Validation'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: ./PipelineScripts/pre-template-test-validation.ps1 "$(Build.ArtifactStagingDirectory)" "$(Build.SourceBranch)" "$(intent-module-solution)" "$(intent-solution)"

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  env:
    DOTNET_NOLOGO: 1
  inputs:
    command: 'test'
    projects: $(targetsToBuild)
    arguments: >
      --no-build
      --filter Requirement!=CosmosDB

- task: PowerShell@2
  displayName: 'Install Intent SF CLI'
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      $toolsDirectory = "$(System.DefaultWorkingDirectory)/intent-cli-tool"
      $nightly = '$(Build.SourceBranch)' -like 'refs/heads/development-*' ? '.nightly' : ''

      Remove-Item -Recurse -Force $toolsDirectory
      dotnet tool install Intent.SoftwareFactory.CLI$nightly --prerelease --tool-path  

- task: PowerShell@2
  displayName: 'Run SF CLI on module solution'
  env:
    INTENT_USER: $(intent-architect-user)
    INTENT_PASS: $(intent-architect-password)
    INTENT_MODULE_SOLUTION_PATH: $(intent-module-solution)
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      $toolsDirectory = "$(System.DefaultWorkingDirectory)/intent-cli-tool"

      & "$toolsDirectory/intent-cli" ensure-no-outstanding-changes "$Env:INTENT_USER" "$Env:INTENT_PASS" "$Env:INTENT_MODULE_SOLUTION_PATH"

- task: PowerShell@2
  displayName: 'Run SF CLI on tests solution'
  env:
    INTENT_USER: $(intent-architect-user)
    INTENT_PASS: $(intent-architect-password)
    INTENT_SOLUTION_PATH: $(intent-solution)
  inputs:
    targetType: 'inline'
    pwsh: true
    script:  |
      $toolsDirectory = "$(System.DefaultWorkingDirectory)/intent-cli-tool"

      & "$toolsDirectory/intent-cli" ensure-no-outstanding-changes "$Env:INTENT_USER" "$Env:INTENT_PASS" "$Env:INTENT_SOLUTION_PATH" --check-deviations

- task: PowerShell@2
  displayName: 'Filter artifacts to publish'
  condition: and(succeeded(), in('True', variables.isMaster, variables.isDevelopment))
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $isPreReleaseRegex = '(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
      $isMaster = '$(Build.SourceBranch)' -eq 'refs/heads/master'
      $artifactsFolder = '$(Build.ArtifactStagingDirectory)'

      Write-Host
      Write-Host "Is Master: $isMaster"

      Write-Host
      Write-Host "All files:"
      Get-ChildItem "$artifactsFolder" | ForEach-Object { Write-Host $_.Name }

      $filesToRemove = Get-ChildItem "$artifactsFolder/*.*" | Where-Object { (-Not $isMaster -And ($_.Name -NotMatch $isPreReleaseRegex)) }

      Write-Host
      Write-Host "Deleting the following files to prevent them being published:"
      $filesToRemove | ForEach-Object { Write-Host $_.Name }
      $filesToRemove | Remove-Item

      Write-Host
      Write-Host "Remaining files:"
      Get-ChildItem "$artifactsFolder" | ForEach-Object { Write-Host $_.Name }

- task: PowerShell@2
  displayName: 'Install Module Server Client CLI'
  condition: and(succeeded(), in('True', variables.isMaster, variables.isDevelopment))
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      dotnet tool install Intent.ModuleServer.Client.CLI --global --prerelease

- task: PowerShell@2
  displayName: 'Publish modules'
  condition: and(succeeded(), in('True', variables.isMaster, variables.isDevelopment))
  env:
    DOTNET_NOLOGO: '1'
    # Avoid issues when attempting to run on environment without older .NET runtime version available:
    # https://learn.microsoft.com/en-us/dotnet/core/versions/selection#control-roll-forward-behavior
    DOTNET_ROLL_FORWARD: 'LatestMajor'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $artifactsFolder = '$(Build.ArtifactStagingDirectory)'
      $sourceBranch = '$(Build.SourceBranch)'
      $serverUrl = $sourceBranch -like 'refs/heads/development-*' ? 'https://dev-modules.intentarchitect.com/' : 'https://app-module-server-prod-zanorth-001.azurewebsites.net/'
      $apiKey = '$(intent-architect-module-server-api-key)'

      $files = (Get-ChildItem "$artifactsFolder/*.*");
      $number = 0

      foreach ($file in $files) {
        $number++
        Write-Host ""
        Write-Host "Processing $($file.Name) ($number of $($files.Length))..."

        if ($file.Name -like "*-alpha.*.imod") {
            $expression = "module-server-client-cli `"upload-module`" `"$serverUrl`" `"$apiKey`" `"$($file.FullName)`" --unlisted"

            Write-Host "Invoking $($expression.Replace($apiKey, "****"))..."
            Invoke-Expression $expression

            continue
        }

        if ($file.Name -like "*.imod") {
            $expression = "module-server-client-cli `"upload-module`" `"$serverUrl`" `"$apiKey`" `"$($file.FullName)`""

            Write-Host "Invoking $($expression.Replace($apiKey, "****"))..."
            Invoke-Expression $expression

            continue
        }

        if ($file.Name -like "*.iat") {
            $expression = "module-server-client-cli `"upload-application-template`" `"$serverUrl`" `"$apiKey`" `"$($file.FullName)`""

            Write-Host "Invoking $($expression.Replace($apiKey, "****"))..."
            Invoke-Expression $expression

            continue
        }

        Write-Host "Not applicable, skipped."
      }

- task: DotNetCoreCLI@2
  displayName: 'Push *.nupkg to nuget.org (Final Release)'
  condition: and(succeeded(), in('True', variables.isMaster))
  inputs:
    command: 'custom'
    custom: 'nuget'
    arguments: >
      push $(Build.ArtifactStagingDirectory)/*.nupkg
      -s https://api.nuget.org/v3/index.json
      -k $(nuget-api-key-intentarchitect)
      --skip-duplicate
