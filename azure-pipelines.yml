trigger:
  batch: 'true'
  branches:
    include:
    - master
    - development

variables:
- name: 'vstsFeed'
  value: '4bb4c1b9-5b56-4972-8bac-0ad3fa64204e/intentarchitect-feed'
- name: 'vstsFeedUrl'
  value: 'https://pkgs.dev.azure.com/intentarchitect/4bb4c1b9-5b56-4972-8bac-0ad3fa64204e/_packaging/intentarchitect-feed/nuget/v3/index.json'
- name: 'targetsToBuild'
  value: '**/*.sln'
- group: 'Intent Architect Credentials'

pool:
  vmImage: 'ubuntu-latest'

steps:

- task: CmdLine@2
  inputs:
    script: |
      git config --global core.longpaths true

- checkout: 'self'
  persistCredentials: 'true'
  fetchDepth: '1'
  submodules: 'recursive'

# Required for entry in NuGet.Config that is generated as part of 'dotnet pack'.
- task: NuGetAuthenticate@1

# We pack upfront as some projects rely on NuGet packages from this same solution.
- task: PowerShell@2
  displayName: 'dotnet pack'
  inputs:
    pwsh: true
    failOnStderr: true
    ignoreLASTEXITCODE: true
    filePath: 'dotnet-pack-all.ps1'
    arguments: '-dotnetPackOutputDirectory $(Build.ArtifactStagingDirectory) -vstsFeedUrl $(vstsFeedUrl)'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  env:
    DOTNET_NOLOGO: '1'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: $(vstsFeed)
    projects: $(targetsToBuild)

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  env:
    DOTNET_NOLOGO: 1
  inputs:
    command: 'build'
    projects: $(targetsToBuild)
    arguments: '--no-restore'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  env:
    DOTNET_NOLOGO: 1
  inputs:
    command: 'test'
    projects: $(targetsToBuild)
    arguments: '--no-build'

# Push the NuGet packages to the DevOps artifact feed so that it's available to other pipelines
- task: NuGetCommand@2
  displayName: 'nuget push'
  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/development'))
  inputs:
      command: 'push'
      feedsToUse: 'select'
      includeNuGetOrg: false
      publishVstsFeed: $(vstsFeed)
      allowPackageConflicts: true
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      nuGetFeedType: 'internal'

- task: PowerShell@2
  displayName: 'install intent packager'
  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/development'))
  inputs:
    targetType: 'inline'
    pwsh: true
    script: |
      dotnet tool install Intent.IArchitect.Packager.CommandLine --global --prerelease --add-source '$(vstsFeedUrl)'

- task: PowerShell@2
  displayName: 'filter modules to publish'
  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/development'))
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $isPreReleaseRegex = '(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
      $isMaster = '$(Build.SourceBranch)' -eq 'refs/heads/master'

      $imodFilesToRemove = Get-ChildItem "./Modules/Intent.Modules/*.imod" | Where-Object { If ($isMaster) { ($_.Name -Match $isPreReleaseRegex) } Else { $_.Name -NotMatch $isPreReleaseRegex } }
      # Client has no way to filter pre-release application templates so they are never published from development
      $iatFilesToRemove = Get-ChildItem "./Modules/Intent.Modules/*.iat" | Where-Object { $isMaster -Or ($_.Name -Match $isPreReleaseRegex) }

      Write-Host "Deleting the following files to prevent them being published:"
      $imodFilesToRemove | Select-Object Name
      $iatFilesToRemove | Select-Object Name

      $imodFilesToRemove | Remove-Item
      $iatFilesToRemove | Remove-Item

      Write-Host "Remaining files:"
      Get-ChildItem "./Modules/Intent.Modules/*.imod" | Select-Object Name
      Get-ChildItem "./Modules/Intent.Modules/*.iat" | Select-Object Name

- task: PowerShell@2
  displayName: 'publish modules'
  condition: and(succeeded(), in(variables['Build.SourceBranch'], 'refs/heads/master', 'refs/heads/development'))
  env:
    DOTNET_NOLOGO: '1'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      intent-package-management BulkUploadModules -directory "./Modules/Intent.Modules" -address "https://intentarchitect.com/" -username "$(intent-architect-user)" -password "$(intent-architect-password)"
      intent-package-management BulkUploadApplicationTemplates -directory "./Modules/Intent.Modules" -address "https://intentarchitect.com/" -username "$(intent-architect-user)" -password "$(intent-architect-password)"
