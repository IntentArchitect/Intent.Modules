# We let the build continue on failure to try publish NuGet packages if possible because if one of
# the projects depends on a NuGet package in the same solution, which hasn't yet been built and
# published, then it can't do the restore, which means it can't build the package to publish it to
# fix the build.
trigger:
  batch: true
  branches:
    include:
    - '*'

variables:
  vstsFeed: '4bb4c1b9-5b56-4972-8bac-0ad3fa64204e/intentarchitect-feed'
  targetsToBuild: '**/*.sln'

pool:
  vmImage: 'ubuntu-latest'

steps:

- checkout: 'self'
  persistCredentials: true
  fetchDepth: 1
  submodules: 'recursive'

- task: DotNetCoreCLI@2
  displayName: 'dotnet restore'
  env:
    DOTNET_NOLOGO: '1'
  inputs:
    command: 'restore'
    feedsToUse: 'select'
    vstsFeed: $(vstsFeed)
    projects: $(targetsToBuild)

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  env:
    DOTNET_NOLOGO: 1
  inputs:
    command: 'build'
    projects: $(targetsToBuild)
    arguments: '--no-restore'

- task: DotNetCoreCLI@2
  displayName: 'dotnet test'
  env:
    DOTNET_NOLOGO: 1
  inputs:
    command: 'test'
    projects: $(targetsToBuild)
    arguments: '--no-build'

- task: PowerShell@2
  displayName: 'dotnet pack'
  condition: succeededOrFailed()
  inputs:
    pwsh: true
    failOnStderr: true
    ignoreLASTEXITCODE: true
    filePath: 'dotnet-pack-all.ps1'
    arguments: '-dotnetPackOutputDirectory $(Build.ArtifactStagingDirectory)'

- task: NuGetCommand@2
  displayName: 'nuget push'
  condition: succeededOrFailed()
  inputs:
      command: 'push'
      feedsToUse: 'select'
      includeNuGetOrg: false
      publishVstsFeed: $(vstsFeed)
      allowPackageConflicts: true
      packagesToPush: '$(Build.ArtifactStagingDirectory)/*.nupkg'
      nuGetFeedType: 'internal'
