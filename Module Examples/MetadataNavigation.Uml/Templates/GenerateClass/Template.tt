<#@ template  debug="true" inherits="Intent.SoftwareFactory.Templates.IntentRoslynProjectItemTemplateBase<IClass>" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="Intent.MetaModel.Domain" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #> 
<#@ import namespace="System.IO" #> 
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic"#>
using System;
using System.Collections.Generic;
using Intent.CodeGen;
<#= DependencyUsings #>

namespace <#= Namespace #>
{
    public class <#= ClassName #> 
    {
		//Attributes
<#  foreach (var attribute in Model.Attributes)
    {
		string attributeType = Types.Get(attribute.Type);
#>
        private <#= attributeType #> <#= attribute.Name.ToPrivateMember() #>;

        public <#= attributeType #> <#= attribute.Name.ToPascalCase() #> 
        {
            get { return <#= attribute.Name.ToPrivateMember() #>; }
            set
            {
			    <#= attribute.Name.ToPrivateMember() #> = value;
	        }
		}

<#  }#>
		//Associations
<#	foreach (var associatedClass in Model.AssociatedClasses)
    {
		if (!associatedClass.IsNavigable) 
			continue;

		string associationType = GetAssociationType(associatedClass);
		string associtionName = Name(associatedClass);
#>
		private <#= associationType #> <#= associtionName.ToPrivateMember() #>;

        public virtual <#= associationType #> <#= associtionName.ToPascalCase() #>
        {
            get
            {
				return <#= associtionName.ToPrivateMember() #><#= CollectionInitializer(associatedClass, associtionName.ToPrivateMember())#>;
            }
            set
            {    
                <#= associtionName.ToPrivateMember() #> = value;
            }
        }

<#    }#>
		//Operations
<#  foreach (var operation in Model.Operations)
    {
        string returnType = GetReturnType(operation); 
        string parameterDefinitions = GetParameterDefinition(operation); 
		if (!operation.IsAbstract)
		{#>
        public <#= returnType #> <#= operation.Name.ToPascalCase() #>(<#= parameterDefinitions #>)
        {
            throw new NotImplementedException("Replace with your implementation...");
        }

<#		}
		else
		{ #>
        public abstract <#= returnType #> <#= operation.Name.ToPascalCase() #>(<#= parameterDefinitions #>);

<#		}
    }
#>
    }
}