<#@ template  debug="true" hostSpecific="true" inherits="IntentRoslynProjectItemTemplateBase<ServiceModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Class" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Service" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

using Microsoft.Practices.Unity;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System;
using System.Threading.Tasks;
using Intent.CodeGen;
<#=DependencyUsings#>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#=Model.Name#>NodeEdgeProxy
    {
        private readonly I<#=Model.Name#> _appService;
        private readonly JsonSerializerSettings _jsonSerializerSettings;

        public <#=Model.Name#>NodeEdgeProxy()
        {
            _appService = UnityConfig.GetConfiguredContainer().Resolve<I<#=Model.Name#>>();
            _jsonSerializerSettings = new JsonSerializerSettings
            {
                ContractResolver = new CamelCasePropertyNamesContractResolver()
            };
        }

        public async Task<object> Invoke(dynamic input)
        {
            return await Task.Factory.StartNew<object>(() =>
            {
                try
                {
                    var operationName = (string)input.operationName;
            
                    switch (operationName)
                    {
<#
                        // An exception gets thrown if "null" is returned, so we always wrap everthing up in an object and 
                        // then on the receiving side we always just read the "response" property. 
                        foreach(var operation in Model.Operations)
                        {
#>
                        case nameof(<#= operation.Name #>):
<#
                            if (operation.HasReturnType())
                            {
#>
                            return JsonConvert.SerializeObject(new
                            {
                                Response = (object) <#= operation.Name #>(JsonConvert.DeserializeObject<<#= operation.Name #>Payload>((string)input.payload))
                            }, _jsonSerializerSettings);
<#
                            }
                            else
                            {
#>
                            <#= operation.Name #>(JsonConvert.DeserializeObject<<#= operation.Name #>Payload>((string)input.payload));
                            return new { Response = (object) null };
<#
                            } // if (operation.HasReturnType())
                        } // foreach(var operation in Model.Operations)
#>
                        default:
                            throw new Exception($"Unknown operation: {operationName}");
                    }
                }
                catch (Exception e)
                {<# 
                    // Sometimes Edge falls over with a StackOverflow exception when it tries 
                    // to send some exceptions back to the client, so we just wrap all exceptions
                    // just in case.

                    // For example, new System.IO.FileSystemWatcher("invalid path", filterCriteria);
                #>
                    throw new SerializableException(e.Message, e.StackTrace);
                }
            }, TaskCreationOptions.LongRunning);
        }
<#
        foreach(var operation in Model.Operations)
        {
            Action getMethodCallParameters = () => GetMethodCallParameters(operation);
#>

        public class <#= operation.Name #>Payload
        {
<#
            foreach (var parameter in operation.Parameters)
            {
#>
            public <#= parameter.Type.FullName #> <#= parameter.Name #> { get; set; }
<#
            }
#>
        }
<# 
            if (operation.HasReturnType())
            {
#>
        private <#= operation.ReturnType.FullName #> <#= operation.Name #>(<#= operation.Name #>Payload payload)
        {
            return _appService.<#= operation.Name #>(<#= GetMethodCallParameters(operation) #>);
        }
<#
            }
            else
            {
#>
        private void <#= operation.Name #>(<#= operation.Name #>Payload payload)
        {
            _appService.<#= operation.Name#>(<#= GetMethodCallParameters(operation) #>);
        }
<#
            }
        }
#>
    }
}