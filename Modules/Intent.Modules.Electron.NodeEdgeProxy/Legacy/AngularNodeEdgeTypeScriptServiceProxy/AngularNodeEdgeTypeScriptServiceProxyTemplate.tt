<#@ template  debug="true"  inherits="IntentProjectItemTemplateBase<ServiceModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Class" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Service" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

namespace <#= Namespace #> {

    export class <#=Model.Name#>Proxy {
        private edgeProxy: IEdgeProxy;

        static $inject = ["$q", "Config", "Edge"];
        constructor(
            private $q: ng.IQService,
            public config: any,
            edge: IEdge) {

            try {
                this.edgeProxy = edge.func({
                    assemblyFile: this.config["edge_assembly_path"] + "<#= AssemblyName #>.dll",
                    typeName: "<#= TypeName #>",
                    methodName: "Invoke"
                });
            } catch (e) {
                console.error(e)
            }
        }

<#        foreach (var o in Model.Operations)
        {

            if (o.HasReturnType())
            {
#>
        public <#= LowerFirst(o.Name) #>(<# GetMethodDefinitionParameters(o); #>): ng.IPromise<<# GetReturnType(o); #>> {
            try {
                var data = {
                    operationName: "<#= o.Name #>",
                    payload: JSON.stringify({
<#
                    for (var i=0; i<o.Parameters.Count; i++)
                    {
                        var p = o.Parameters[i];
                        var conditionalComma = i+1 != o.Parameters.Count ? "," : "";
                        
#>
                        <#= p.Name #>: <#= p.Name #><#= conditionalComma #>
<#
                    }
#>
                    })
                };

                return this.$q((resolve: (data: <# GetReturnType(o); #>) => void, reject: (reason: any) => void) => {
                    this.edgeProxy(data, (error, result: string) => {
                        if (error) {
                            reject(error);
                            return;
                        }

                        resolve(JSON.parse(result).response);
                    });
                });
            } catch (e) {
                console.error(e);
                return this.$q.reject(e);
            }
        }

<#
            }
            else
            {
#>
        public <#= LowerFirst(o.Name) #>(<# GetMethodDefinitionParameters(o); #>): ng.IPromise<void> {
            try {
                var data = {
                    operationName: "<#= o.Name #>",
                    payload: JSON.stringify({
<#
                    for (var i=0; i<o.Parameters.Count; i++)
                    {
                        var p = o.Parameters[i];
                        var conditionalComma = i+1 != o.Parameters.Count ? "," : "";
                        
#>
                        <#= p.Name #>: <#= p.Name #><#= conditionalComma #>
<#
                    }
#>
                    })
                };

                return this.$q((resolve: (data: any) => void, reject: (reason: any) => void) => {
                    this.edgeProxy(data, (error: any) => {
                        if (error) {
                            reject(error);
                            return;
                        }

                        resolve(null);
                    });
                });
            } catch (e) {
                console.error(e);
                return this.$q.reject(e);
            }
        }

<#            }
        }
#>
    }

    angular.module("App").service("<#=Model.Name#>Proxy", <#=Model.Name#>Proxy);
}

<#+

void GetMethodDefinitionParameters(ServiceOperationModel o) 
{

    for(int i = 0; i < o.Parameters.Count; i++) 
    { 
        ParameterModel p = o.Parameters[i];
        if (p.Type.TypeName.StartsWith("IList") || p.Type.TypeName.StartsWith("List"))
        {
            string modelType = p.Type.GenericArguments[0].FullName;
            #><#= (i != 0) ? ", " : "" #><#= LowerFirst(p.Name) #>: <#= ConvertType(modelType) #>[]<#+
        }
        else
        {
            #><#= (i != 0) ? ", " : "" #><#= LowerFirst(p.Name) #>: <#= ConvertType(p.Type.FullName) #><#+
        }
    }
}

void GetMethodCallParameters(ServiceOperationModel o) 
{

    for(int i = 0; i < o.Parameters.Count; i++) 
    { 
        ParameterModel p = o.Parameters[i];
        if (i != 0)
        {
            #>, <#+
        }
    #><#= LowerFirst(p.Name) #>: <#= LowerFirst(p.Name) #><#+
    }
    
}

void GetReturnType(ServiceOperationModel o)
{
    if (o.ReturnType.TypeName.StartsWith("PagedResult"))
    {
        string modelType = o.ReturnType.GenericArguments[0].FullName;
        #>Contracts.PagedResultDTO<<#= ConvertType(modelType) #>><#+
    }
    else if (o.ReturnType.TypeName.StartsWith("IList") || o.ReturnType.TypeName.StartsWith("List"))
    {
        string modelType = o.ReturnType.GenericArguments[0].FullName;
        #><#= ConvertType(modelType) #>[]<#+
    }
    else
    {
        #><#= ConvertType(o.ReturnType.FullName) #><#+
    }
}

string ConvertType(string propertyType)
{
    switch (propertyType)
    {
        case "byte[]":
        case "Byte[]":
        case "System.Byte[]":
            propertyType = "Array<number>";
            break;
        case "DateTime":
        case "DateTime?":
        case "System.DateTime":
        case "System.DateTime?":
        case "System.Nullable<System.DateTime>":
            propertyType = "Date";
            break;
        case "string":
        case "String":
        case "System.String":
        case "Guid":
        case "Guid?":
        case "System.Guid":
        case "System.Guid?":
        case "System.Nullable<System.Guid>":
            propertyType = "string";
            break;
        case "int":
        case "Int32":
        case "Int32?":
        case "System.Int32":
        case "System.Int32?":
        case "System.Nullable<System.Int32>":
        case "decimal":
        case "Decimal":
        case "Decimal?":
        case "System.Decimal":
        case "System.Decimal?":
        case "System.Nullable<System.Decimal>":
        case "System.TimeSpan":
        case "System.TimeSpan?":
        case "System.Nullable<System.TimeSpan>":
            propertyType = "number";
            break;
        case "bool":
        case "Boolean":
        case "System.Boolean":
            propertyType = "boolean";
            break;
        default:
            {
                if (propertyType.IndexOf("Contracts") != -1)
                {
                    propertyType = propertyType.Substring(propertyType.IndexOf("Contracts"));
                }
                else
                {
                    propertyType = "Contracts." + propertyType.Split('.')[propertyType.Split('.').Length - 1];
                }

                break;
            }
    }

    return propertyType;
}

    string LowerFirst(string s)
    {
        if(string.IsNullOrEmpty(s))
            return s;
        return char.ToLowerInvariant(s[0]) + s.Substring(1);
    }
#>