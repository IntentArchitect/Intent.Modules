<#@ template  debug="true"  inherits="IntentProjectItemTemplateBase<object>"#>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
namespace App {
    interface IEdge {
        func(options: IEdgeFuncOptions): IEdgeProxy;
    }

    interface IEdgeFuncOptions {
        assemblyFile: string;
        typeName?: string;
        methodName?: string;
    }

    export interface IEdgeProxy {
        <TData, TResult>(data: TData, callback: (error: any, result: TResult) => void): void;
    }

    export interface IEdgeCallInterceptor {
        request(config: IEdgeCallConfig): void;
    }

    export interface IEdgeCallConfig {
        readonly headers: { [type: string]: string };
    }

    export interface IEdgeService {
        callMethod<TReturn>(typeName: string, methodName: string, ...methodParameters: any[]): ng.IPromise<TReturn>;
        createProxy(typeName: string, methodName: string): IEdgeProxy;
    }

    export class EdgeServiceProvider implements ng.IServiceProvider {
        private readonly service: IEdge;
        private assemblyFile: string;

        readonly interceptors: string[] = [];
        readonly proxyCache: { [type: string]: any; } = {};

        static $inject = ["$q", "$injector"];
        constructor(
            public $q: ng.IQService,
            public $injector: { get<T>(name: string): T }
        ) {
            this.service = window["require"]("electron-edge-js");
        }

        setAssemblyFile = (assemblyFile: string): void => {
            this.assemblyFile = assemblyFile;
        }

        $get = (): IEdgeService => {
            return {
                callMethod: this.callMethodImplementation,
                createProxy: this.createProxyImplementation
            };
        }

        private callMethodImplementation = <TReturn>(typeName: string, methodName: string, ...methodParameters: any[]): ng.IPromise<TReturn> => {
            return this.$q<TReturn>((resolve: ng.IQResolveReject<TReturn>, reject: ng.IQResolveReject<any>) => {
                try {
                    const config: IEdgeCallConfig = {
                        headers: {}
                    };

                    for (const interceptor of this.interceptors.map(x => this.$injector.get<IEdgeCallInterceptor>(x))) {
                        interceptor.request(config);
                    }

                    const data = {
                        headers: Object.keys(config.headers)
                            .map(x => ({
                                name: x,
                                value: config.headers[x]
                            })),
                        methodName: methodName,
                        methodParameters: methodParameters.map(x => JSON.stringify(x)),
                    }

                    const proxy = this.createProxyImplementation(typeName, "Invoke");
                    proxy(data, (error: any, result: string) => {
                        if (error) {
                            reject(error);
                            return;
                        }

                        resolve(JSON.parse(result).response);
                    });
                } catch (e) {
                    reject(e);
                }
            });
        }

        private createProxyImplementation = (typeName: string, methodName: string): IEdgeProxy => {
            if (!this.assemblyFile) {
                throw new Error("Could not create proxy, as assemblyFile not set. Use the EdgeServiceProvider's .setAssemblyFile(...) method in your angular module config.");
            }

            if (!this.proxyCache[typeName]) {
                this.proxyCache[typeName] = this.service.func({
                    assemblyFile: this.assemblyFile,
                    typeName: typeName,
                    methodName: methodName
                });
            }

            return this.proxyCache[typeName];
        }
    }

    angular.module("App").provider("EdgeService", EdgeServiceProvider);
}
