// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.TypeScript.Weaving.Decorators.Templates.IntentDecorators
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.Common.TypeScript.Templates;
    using Intent.Templates;
    using Intent.Metadata.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules\Modules\Intent.Modules.TypeScript.Weaving.Decorators\Templates\IntentDecorators\IntentDecoratorsTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class IntentDecoratorsTemplate : TypeScriptTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(@"/* eslint-disable */
/**
 * Instructs Intent Architect to ignore this member (i.e. do not update or remove it)
 * @param {string} identifier Override for the identifier for this element.
 * Use this if you want Intent Architect to match this element to an output element, irrespective of its name or signature.
 *
 * @see [TypeScript Code-Management](https://docs.intentarchitect.com/articles/application-development/code-management/code-management-typescript/code-management-typescript.html)
 */
export const ");
            
            #line 18 "C:\Dev\Intent.Modules\Modules\Intent.Modules.TypeScript.Weaving.Decorators\Templates\IntentDecorators\IntentDecoratorsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IntentIgnore));
            
            #line default
            #line hidden
            this.Write(@" = (identifier?: string) => {
  return (target: any, propertyKey?: string, descriptor?: any) => {};
};

/**
 * Instructs Intent Architect to ignore the body of the member, but allows it to manage the signature.
 * @param {string} identifier Override for the identifier for this element.
 * Use this if you want Intent Architect to match this element to an output element, irrespective of its name or signature.
 *
 * @see [TypeScript Code-Management](https://docs.intentarchitect.com/articles/application-development/code-management/code-management-typescript/code-management-typescript.html)
 */
export const ");
            
            #line 29 "C:\Dev\Intent.Modules\Modules\Intent.Modules.TypeScript.Weaving.Decorators\Templates\IntentDecorators\IntentDecoratorsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IntentIgnoreBody));
            
            #line default
            #line hidden
            this.Write(@" = (identifier?: string) => {
  return (target: any, propertyKey?: string, descriptor?: any) => {};
};

/**
 * Instructs Intent Architect to manage this element, allowing adding, updating, but not removing, of its child members.
 * @param {string} identifier Override for the identifier for this element.
 * Use this if you want Intent Architect to match this element to an output element, irrespective of its name or signature.
 *
 * @see [TypeScript Code-Management](https://docs.intentarchitect.com/articles/application-development/code-management/code-management-typescript/code-management-typescript.html)
 */
export const ");
            
            #line 40 "C:\Dev\Intent.Modules\Modules\Intent.Modules.TypeScript.Weaving.Decorators\Templates\IntentDecorators\IntentDecoratorsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IntentMerge));
            
            #line default
            #line hidden
            this.Write(@" = (identifier?: string) => {
  return (target: any, propertyKey?: string, descriptor?: any) => {};
};

/**
 * Instructs Intent Architect to manage this element, allowing adding, updating and removing of its child members.
 * @param {string} identifier Override for the identifier for this element.
 * Use this if you want Intent Architect to match this element to an output element, irrespective of its name or signature.
 *
 * @see [TypeScript Code-Management](https://docs.intentarchitect.com/articles/application-development/code-management/code-management-typescript/code-management-typescript.html)
 */
export const ");
            
            #line 51 "C:\Dev\Intent.Modules\Modules\Intent.Modules.TypeScript.Weaving.Decorators\Templates\IntentDecorators\IntentDecoratorsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IntentManage));
            
            #line default
            #line hidden
            this.Write(@" = (identifier?: string) => {
  return (target: any, propertyKey?: string, descriptor?: any) => {};
};

/**
 * Instructs Intent Architect to manage this class, allowing adding, updating and removing of its child members.
 * @param {object} options Controls how Intent Architect should treat methods, properties and constructors.
 * Note that these options are still in beta and likely to be changed and extended in the future.
 *
 * @see [TypeScript Code-Management](https://docs.intentarchitect.com/articles/application-development/code-management/code-management-typescript/code-management-typescript.html)
 */
export const ");
            
            #line 62 "C:\Dev\Intent.Modules\Modules\Intent.Modules.TypeScript.Weaving.Decorators\Templates\IntentDecorators\IntentDecoratorsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(IntentManageClass));
            
            #line default
            #line hidden
            this.Write(" = (identifier?: string) => {\r\n  return (target: any, propertyKey?: string, descr" +
                    "iptor?: any) => {};\r\n};");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
