<#@ template language="C#" inherits="TypeScriptTemplateBase<ServiceProxyModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.Angular.Api" #>
import { Injectable } from '@angular/core';

import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

@Injectable()
export class <#= ClassName #> {
  constructor(
    private apiService: <#= ApiServiceClassName #>
  ) {
  }
<#  foreach (var operation in Model.Operations) { #>

  public <#= operation.Name.ToCamelCase() #>(<#= GetParameterDefinitions(operation)#>): Observable<<#= GetReturnType(operation)#>> {
    let url = "<#= GetPath(operation) #>";<#= GetUpdateUrl(operation)#>
    return this.apiService.<#= GetDataServiceCall(operation)#>
      .pipe(map((response: any) => {
        return response;
      }));
  }
<#  } #>
}
