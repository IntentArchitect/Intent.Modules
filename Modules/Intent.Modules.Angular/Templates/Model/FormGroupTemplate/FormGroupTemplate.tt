<#@ template language="C#" inherits="TypeScriptTemplateBase<FormGroupDefinitionModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.Angular.Api" #>
import { FormGroup, FormControl } from '@angular/forms';

export class <#= ClassName #> extends FormGroup {
  public static createEmpty(): <#= ClassName #> {
    return new <#= ClassName #>({
<#  foreach (var control in Model.Fields) {#>
      <#= control.Name.ToCamelCase() #>: <#= (GetTypeName(control.TypeReference) == "string" ? "\"\"" : "null") #>,
<#  }#>
    });
  }
<#  if (Model.Mapping != null) { #>

  public static create(dto: <#= GetTypeName(Model.Mapping.Element) #>): <#= ClassName #> {
    return new <#= ClassName #>({
<#      foreach (var field in Model.Fields.Where(x => x.InternalElement.IsMapped)) {#>
      <#= field.Name.ToCamelCase() #>: dto.<#=GetPath(field.InternalElement.MappedElement.Path)#>,
<#      }#>
    });
  }
<#  } #>

  constructor(initialValue: {
<#  foreach (var control in Model.Fields) {#>
    <#= control.Name.ToCamelCase() #>: <#= GetTypeName(control.TypeReference) #>;
<#  }#>
  }) {
    super({
<#  foreach (var control in Model.Fields) {#>
      <#= control.Name.ToCamelCase() #>: new FormControl(initialValue.<#= control.Name.ToCamelCase() #>),
<#  }#>
    });
  }

<#  foreach (var control in Model.Fields) {#>
  get <#= control.Name.ToCamelCase() #>(): <#= GetTypeName(control.TypeReference) #> { return this.get("<#= control.Name.ToCamelCase() #>").value; }
<#  }#>
}