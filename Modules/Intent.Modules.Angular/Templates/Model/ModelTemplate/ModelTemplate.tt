<#@ template language="C#" inherits="TypeScriptTemplateBase<ModelDefinitionModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.Angular.Api" #>

export class <#= ClassName #><#= GetGenericParameters() #> { 
<#  if (Model.Mapping != null) { #>
  public static create<#= GetGenericParameters() #>(dto: <#= GetTypeName(Model.Mapping.Element) #><#= GetGenericParameters() #>): <#= ClassName #><#= GetGenericParameters() #> {
    var model = new <#= ClassName #><#= GetGenericParameters() #>();
<# foreach (var field in Model.Fields.Where(x => x.InternalElement.IsMapped)) {#>
    model.<#= field.Name.ToCamelCase() #> = dto.<#=GetPath(field.InternalElement.MappedElement.Path)#>;
<#}#>
    return model;
  }

<#  } #>
<# foreach (var field in Model.Fields) {#>
  <#= field.Name.ToCamelCase() #>: <#= GetTypeName(field.TypeReference) #>;
<#}#>
}