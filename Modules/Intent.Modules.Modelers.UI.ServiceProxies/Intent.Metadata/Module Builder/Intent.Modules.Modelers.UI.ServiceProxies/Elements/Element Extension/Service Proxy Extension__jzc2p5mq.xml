<?xml version="1.0" encoding="utf-8"?>
<class id="bcf6acf5-3410-4038-89f5-ca3e3ba43704" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Service Proxy Extension</name>
  <display>Service Proxy Extension: Service Proxy</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="12f6ffb5-cf16-4fb4-932d-847e8324fc08">
    <typeId>07d8d1a9-6b9f-4676-b7d3-8db06299e35c</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Types.ServiceProxies</typePackageName>
    <typePackageId>b58a9e76-55b8-45ec-a22b-bcdfcb6fd833</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>10144809-6397-4c64-bc01-b83b3d270ebe</parentFolderId>
  <packageId>81e2ef41-3cd5-482c-8833-dfba6b29431b</packageId>
  <packageName>Intent.Modules.Modelers.UI.ServiceProxies</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property id="8231c896-767b-47f5-a3cd-7da2e0ee899f" name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property id="0f325cdf-d7b3-4c85-a59f-bd0f374febf2" name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property id="d26d1553-ce3e-4bc9-98cf-72866bab05ba" name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property id="19984ac7-e22c-4961-aecb-c98959124033" name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" value="null" isActive="false" />
        <property id="148766a4-778e-4324-a598-0042f1c46026" name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property id="caf6e305-98ee-4227-9087-54d51a24665a" name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property id="1a8c75e6-6a94-4c91-ba6e-eb777515e3d3" name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
    <stereotype stereotypeDefinitionId="312eab00-f6db-492e-bbb4-e41383c8d3d8" name="Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property id="9df8d70b-8bc0-41fe-9802-7de52f9c832c" name="8c964307-9d03-4a14-9fd3-40ea2607955a" display="Display Text Function" value="" isActive="true" />
        <property id="c57e9b69-50f8-4f7c-acf0-7702b7eeaa1d" name="996ed45f-2318-4587-9618-73db3d7cfed0" display="Validate Function" value="" isActive="true" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="f1548d87-7532-43b2-840a-ae5c4a28552a" type="Element Event Settings" typeId="3c628ab0-2407-4fb0-8507-ddde986cff2e">
      <name>NewElementEventSettings</name>
      <display>[events]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-by-name</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>bcf6acf5-3410-4038-89f5-ca3e3ba43704</parentFolderId>
      <packageId>81e2ef41-3cd5-482c-8833-dfba6b29431b</packageId>
      <packageName>Intent.Modules.Modelers.UI.ServiceProxies</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="2e540673-c820-41a4-a2dc-ba8acc6bb8f9" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Changed</name>
          <display>On Changed: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="f3732153-cf22-4d0f-8b3a-bd6ea0c15501">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>f1548d87-7532-43b2-840a-ae5c4a28552a</parentFolderId>
          <packageId>81e2ef41-3cd5-482c-8833-dfba6b29431b</packageId>
          <packageName>Intent.Modules.Modelers.UI.ServiceProxies</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property id="c456db3a-b442-454f-a07f-1421873e463b" name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;const parameterTypeId = &quot;f11273c1-217f-4f42-b690-3d8b488f95a8&quot;;&#xD;&#xA;function GetParameters(targetService) {&#xD;&#xA;    let httpSettings = targetService.getStereotype(&quot;Http Settings&quot;);&#xD;&#xA;    if (!httpSettings) {&#xD;&#xA;        console.warn(`Could not process '${targetService.getName()}': Http Settings not found`);&#xD;&#xA;        return [];&#xD;&#xA;    }&#xD;&#xA;    var isForCqrs = targetService.specialization == &quot;Query&quot; || targetService.specialization == &quot;Command&quot;;&#xD;&#xA;    var verbAllowsBody = [&quot;PUT&quot;, &quot;PATCH&quot;, &quot;POST&quot;].some(x =&gt; x == httpSettings.getProperty(&quot;Verb&quot;).getValue());&#xD;&#xA;    var requiresBody = false;&#xD;&#xA;    let result = [];&#xD;&#xA;    targetService.getChildren(&quot;Parameter&quot;).concat(targetService.getChildren(&quot;DTO-Field&quot;)).forEach(childElement =&gt; {&#xD;&#xA;        var parameterSettings = childElement.getStereotype(&quot;d01df110-1208-4af8-a913-92a49d219552&quot;); // &quot;Paremeter Settings&quot;&#xD;&#xA;        var routeContainsParameter = httpSettings.getProperty(&quot;Route&quot;).getValue().toString().toLowerCase().indexOf(`{${childElement.getName().toLowerCase()}}`) != -1;&#xD;&#xA;        if (isForCqrs &amp;&amp; !parameterSettings &amp;&amp; !routeContainsParameter &amp;&amp; verbAllowsBody) {&#xD;&#xA;            requiresBody = true;&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        result.push({&#xD;&#xA;            id: childElement.id,&#xD;&#xA;            name: toCamelCase(childElement.getName()),&#xD;&#xA;            typeId: childElement.typeReference.getTypeId(),&#xD;&#xA;            isNullable: childElement.typeReference.getIsNullable(),&#xD;&#xA;            isCollection: childElement.typeReference.getIsCollection(),&#xD;&#xA;        });&#xD;&#xA;    });&#xD;&#xA;    if (isForCqrs &amp;&amp; requiresBody) {&#xD;&#xA;        result.push({&#xD;&#xA;            id: targetService.id,&#xD;&#xA;            name: targetService.specialization.toLowerCase(),&#xD;&#xA;            typeId: targetService.id,&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false,&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    return result;&#xD;&#xA;}&#xD;&#xA;function execute(proxyElement) {&#xD;&#xA;    proxyElement.getChildren(&quot;Operation&quot;).forEach(operation =&gt; {&#xD;&#xA;        let targetService = operation.getMapping().getElement();&#xD;&#xA;        let params = GetParameters(targetService);&#xD;&#xA;        params.forEach((param, index) =&gt; {&#xD;&#xA;            let existing = operation.getChildren(&quot;Parameter&quot;).find(x =&gt; x.getMetadata(&quot;endpoint-input-id&quot;) == param.id);&#xD;&#xA;            if (!existing) {&#xD;&#xA;                existing = createElement(parameterTypeId, param.name, operation.id);&#xD;&#xA;                operation.collapse();&#xD;&#xA;            }&#xD;&#xA;            existing.setName(param.name);&#xD;&#xA;            existing.setOrder(index);&#xD;&#xA;            existing.typeReference.setType(param.typeId);&#xD;&#xA;            existing.typeReference.setIsCollection(param.isCollection);&#xD;&#xA;            existing.typeReference.setIsNullable(param.isNullable);&#xD;&#xA;            existing.setMetadata(&quot;endpoint-input-id&quot;, param.id);&#xD;&#xA;        });&#xD;&#xA;        operation.getChildren(&quot;Parameter&quot;)&#xD;&#xA;            .filter(x =&gt; params.every(p =&gt; p.id != x.getMetadata(&quot;endpoint-input-id&quot;)))&#xD;&#xA;            .forEach(x =&gt; x.delete());&#xD;&#xA;    });&#xD;&#xA;}&#xD;&#xA;/**&#xD;&#xA; * Used by Intent.Modules\Modules\Intent.Modelers.Types.ServiceProxies&#xD;&#xA; *&#xD;&#xA; * Source code here:&#xD;&#xA; * https://github.com/IntentArchitect/Intent.Modules/blob/development/DesignerMacros/src/service-proxies/manage-parameters/service-proxies-manage-parameters.ts&#xD;&#xA; */&#xD;&#xA;if (element.specialization == &quot;Service Proxy&quot;) {&#xD;&#xA;    execute(element);&#xD;&#xA;}&#xD;&#xA;else {&#xD;&#xA;    lookupTypesOf(&quot;Service Proxy&quot;).forEach(x =&gt; execute(x));&#xD;&#xA;}&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>