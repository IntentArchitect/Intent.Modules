<#@ template  debug="true"  inherits="CSharpTemplateBase<object>"#>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using System.IO;
using System.Security.Cryptography.X509Certificates;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    static class SigningCertificate
    {
        public static X509Certificate2 GetFromX509Store(string findType, string findValue, StoreName storeName = StoreName.My, StoreLocation storeLocation = StoreLocation.LocalMachine)
        {
            X509FindType parsedFindType;
            if (!Enum.TryParse(findType, out parsedFindType))
            {
                throw new Exception($"Could not parse string '{findType}' as {nameof(X509FindType)}.");
            }

            return GetFromX509Store(
                findValue: findValue,
                findType: parsedFindType,
                storeName: storeName,
                storeLocation: storeLocation);
        }

        public static X509Certificate2 GetFromX509Store(X509FindType findType, string findValue, StoreName storeName = StoreName.My, StoreLocation storeLocation = StoreLocation.LocalMachine)
        {
            var store = new X509Store(storeName, storeLocation);
            store.Open(OpenFlags.ReadOnly);

            var certs = store.Certificates.Find(findType, findValue, true);
            store.Close();

            if (certs.Count == 0)
            {
                throw new Exception($"Could not find any matching certificate:\n" +
                                    $"    {nameof(findValue)} = {findValue}\n" +
                                    $"    {nameof(findType)} = {findType}\n" +
                                    $"    {nameof(storeName)} = {storeName}\n" +
                                    $"    {nameof(storeLocation)} = {storeLocation}");
            }

            if (certs.Count > 1)
            {
                throw new Exception($"Found more than one matching certificate:\n" +
                                    $"    {nameof(findValue)} = {findValue}\n" +
                                    $"    {nameof(findType)} = {findType}\n" +
                                    $"    {nameof(storeName)} = {storeName}\n" +
                                    $"    {nameof(storeLocation)} = {storeLocation}");
            }

            return certs[0];
        }

        public static X509Certificate2 GetEmbeddedCertificate(string resourceName, string password)
        {
            var assembly = typeof(SigningCertificate).Assembly;
            using (var stream = assembly.GetManifestResourceStream(resourceName))
            {
                return new X509Certificate2(ReadStream(stream), password);
            }
        }

        private static byte[] ReadStream(Stream input)
        {
            byte[] buffer = new byte[16 * 1024];
            using (MemoryStream ms = new MemoryStream())
            {
                int read;
                while ((read = input.Read(buffer, 0, buffer.Length)) > 0)
                {
                    ms.Write(buffer, 0, read);
                }
                return ms.ToArray();
            }
        }
    }
}