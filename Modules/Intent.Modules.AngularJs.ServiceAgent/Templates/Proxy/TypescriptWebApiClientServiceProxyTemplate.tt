<#@ template  debug="true"  inherits="IntentTypescriptProjectItemTemplateBase<ServiceModel>"#>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Class" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Service" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
#>

namespace <#= Namespace #> {

    export class <#=Model.Name#>Proxy {
        
        static $inject = ['$http', 'Config'];
        constructor(
            public $http: ng.IHttpService,
            public config: any) {
        }

<#        foreach (var o in Model.Operations)
        {

            if (o.HasReturnType())
            {

#>
        public <#= LowerFirst(o.Name) #>(<# GetMethodDefinitionParameters(o); #>): ng.IHttpPromise<<#= GetReturnType(o) #>>
        {
            var baseUrl = this.config["<#= ApiBasePathConfigKey #>"];
            var url = baseUrl + "/api/<#= Model.Name.ToLower().Replace("service","") #>/<#= o.Name.ToLower() #>";
            return this.$http.post<<#= GetReturnType(o) #>>(url, { <# GetMethodCallParameters(o); #> });
        }

<#
            }
            else
            {
#>
        public <#= LowerFirst(o.Name) #>(<# GetMethodDefinitionParameters(o); #>): ng.IHttpPromise<void>
        {
            var baseUrl = this.config["<#= ApiBasePathConfigKey #>"];
            var url = baseUrl + "/api/<#= Model.Name.ToLower().Replace("service","") #>/<#= o.Name.ToLower() #>";
            return this.$http.post<void>(url, { <# GetMethodCallParameters(o); #> });
        }

<#            }
        }
#>
    }

    angular.module("<#= AngularModule #>").service("<#=Model.Name#>Proxy", <#=Model.Name#>Proxy);
}

<#+

void GetMethodDefinitionParameters(ServiceOperationModel o) 
{

    for(int i = 0; i < o.Parameters.Count; i++) 
    { 
        ParameterModel p = o.Parameters[i];
        if (p.Type.TypeName.StartsWith("IList") || p.Type.TypeName.StartsWith("List"))
        {
            #><#= (i != 0) ? ", " : "" #><#= LowerFirst(p.Name) #>: <#= ConvertType(p.Type.GenericArguments[0]) #>[]<#+
        }
        else
        {
            #><#= (i != 0) ? ", " : "" #><#= LowerFirst(p.Name) #>: <#= ConvertType(p.Type) #><#+
        }
    }
}

void GetMethodCallParameters(ServiceOperationModel o) 
{

    for(int i = 0; i < o.Parameters.Count; i++) 
    { 
        ParameterModel p = o.Parameters[i];
        if (i != 0)
        {
            #>, <#+
        }
    #><#= LowerFirst(p.Name) #>: <#= LowerFirst(p.Name) #><#+
    }
    
}

    string LowerFirst(string s)
    {
        if(string.IsNullOrEmpty(s))
            return s;
        return char.ToLowerInvariant(s[0]) + s.Substring(1);
    }
#>