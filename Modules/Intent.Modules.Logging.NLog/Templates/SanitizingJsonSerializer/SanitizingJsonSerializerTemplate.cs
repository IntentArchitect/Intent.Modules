// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Logging.NLog.Templates.SanitizingJsonSerializer
{
    using Intent.SoftwareFactory.Templates;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Logging.NLog\Templates\SanitizingJsonSerializer\SanitizingJsonSerializerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class SanitizingJsonSerializerTemplate : IntentRoslynProjectItemTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("\t\r\n");
            this.Write(" \r\n");
            
            #line 13 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Logging.NLog\Templates\SanitizingJsonSerializer\SanitizingJsonSerializerTemplate.tt"


            
            #line default
            #line hidden
            this.Write("using Newtonsoft.Json;\r\nusing Newtonsoft.Json.Serialization;\r\nusing System;\r\nusin" +
                    "g System.Net.Http;\r\nusing System.Reflection;\r\n\r\n[assembly: DefaultIntentManaged(" +
                    "Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 23 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Logging.NLog\Templates\SanitizingJsonSerializer\SanitizingJsonSerializerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public class ");
            
            #line 25 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Logging.NLog\Templates\SanitizingJsonSerializer\SanitizingJsonSerializerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        /// <summary>\r\n        /// Serializes the specified object to a " +
                    "JSON string, omitting some sensitive data and content of byte arrays.\r\n        /" +
                    "// </summary>\r\n        /// <param name=\"value\">The object to serialize.</param>\r" +
                    "\n        /// <returns>A JSON string representation of the object. If the object " +
                    "is to large it returns a trunacted version.</returns>\r\n        public static str" +
                    "ing Serialize(object value)\r\n        {\r\n            const int maxLength = 1024 *" +
                    " 50;\r\n            var response = Serialize(value, Formatting.None);\r\n\r\n         " +
                    "   if (response.Length > maxLength)\r\n            {\r\n                response = $" +
                    "\"(Truncated as length was {response.Length}, showing first {maxLength} character" +
                    "s only): {response.Substring(0, maxLength)}\";\r\n            }\r\n\r\n            retu" +
                    "rn response;\r\n        }\r\n\r\n        /// <summary>\r\n        /// Serializes the spe" +
                    "cified object to a JSON string using formatting, omitting some sensitive data an" +
                    "d content of byte arrays.\r\n        /// </summary>\r\n        /// <param name=\"valu" +
                    "e\">The object to serialize.</param>\r\n        /// <param name=\"formatting\">Indica" +
                    "tes how the output is formatted.</param>\r\n        /// <returns>A JSON string rep" +
                    "resentation of the object.</returns>\r\n        public static string Serialize(obj" +
                    "ect value, Formatting formatting)\r\n        {\r\n            var resolver = new Jso" +
                    "nSerializerSettings\r\n            {\r\n                ContractResolver = new Sanit" +
                    "izingContractResolver()\r\n            };\r\n\r\n            var httpResponseMessage =" +
                    " value as HttpResponseMessage;\r\n            if (httpResponseMessage != null)\r\n  " +
                    "          {\r\n                value = $\"({typeof(HttpResponseMessage).Name}, {htt" +
                    "pResponseMessage.Content?.GetType().FullName})\";\r\n            }\r\n\r\n            r" +
                    "eturn JsonConvert.SerializeObject(value, formatting, resolver);\r\n        }\r\n\r\n  " +
                    "      private class SanitizingContractResolver : DefaultContractResolver\r\n      " +
                    "  {\r\n            protected override JsonProperty CreateProperty(MemberInfo membe" +
                    "r, MemberSerialization memberSerialization)\r\n            {\r\n                var " +
                    "jsonProperty = base.CreateProperty(member, memberSerialization);\r\n\r\n            " +
                    "    if (jsonProperty.PropertyName.ToLowerInvariant().Contains(\"password\".ToLower" +
                    "Invariant()) ||\r\n                    jsonProperty.PropertyName.Equals(\"pass\", St" +
                    "ringComparison.InvariantCultureIgnoreCase))\r\n                {\r\n                " +
                    "    jsonProperty.Converter = new SanitizingJsonConverter(LoggingType.SensitiveIn" +
                    "formation);\r\n                }\r\n                else if (jsonProperty.PropertyTy" +
                    "pe == typeof(byte[]))\r\n                {\r\n                    jsonProperty.Conve" +
                    "rter = new SanitizingJsonConverter(LoggingType.ByteArray);\r\n                }\r\n\r" +
                    "\n                return jsonProperty;\r\n            }\r\n        }\r\n\r\n        priva" +
                    "te class SanitizingJsonConverter : JsonConverter\r\n        {\r\n            private" +
                    " readonly LoggingType _loggingType;\r\n\r\n            public SanitizingJsonConverte" +
                    "r(LoggingType loggingType)\r\n            {\r\n                _loggingType = loggin" +
                    "gType;\r\n            }\r\n\r\n            public override void WriteJson(JsonWriter w" +
                    "riter, object value, JsonSerializer serializer)\r\n            {\r\n                " +
                    "switch (_loggingType)\r\n                {\r\n                    case LoggingType.S" +
                    "ensitiveInformation:\r\n                        writer.WriteValue($\"({typeof(strin" +
                    "g).Name})\");\r\n                        break;\r\n                    case LoggingTy" +
                    "pe.ByteArray:\r\n                        var arrayLength = ((byte[])value).Length;" +
                    "\r\n                        writer.WriteValue($\"({typeof(byte).Name}[{arrayLength}" +
                    "])\");\r\n                        break;\r\n                    default:\r\n           " +
                    "             throw new ArgumentOutOfRangeException();\r\n                }\r\n      " +
                    "      }\r\n\r\n            public override bool CanConvert(Type objectType)\r\n       " +
                    "     {\r\n                throw new NotImplementedException();\r\n            }\r\n\r\n " +
                    "           public override object ReadJson(JsonReader reader, Type objectType, o" +
                    "bject existingValue, JsonSerializer serializer)\r\n            {\r\n                " +
                    "throw new NotImplementedException();\r\n            }\r\n        }\r\n\r\n        privat" +
                    "e enum LoggingType\r\n        {\r\n            SensitiveInformation,\r\n            By" +
                    "teArray,\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
