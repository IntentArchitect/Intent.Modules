<#@ template  debug="true"  inherits="IntentRoslynProjectItemTemplateBase<object>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>	
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
#>
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System;
using System.Net.Http;
using System.Reflection;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #>
    {
        /// <summary>
        /// Serializes the specified object to a JSON string, omitting some sensitive data and content of byte arrays.
        /// </summary>
        /// <param name="value">The object to serialize.</param>
        /// <returns>A JSON string representation of the object. If the object is to large it returns a trunacted version.</returns>
        public static string Serialize(object value)
        {
            const int maxLength = 1024 * 50;
            var response = Serialize(value, Formatting.None);

            if (response.Length > maxLength)
            {
                response = $"(Truncated as length was {response.Length}, showing first {maxLength} characters only): {response.Substring(0, maxLength)}";
            }

            return response;
        }

        /// <summary>
        /// Serializes the specified object to a JSON string using formatting, omitting some sensitive data and content of byte arrays.
        /// </summary>
        /// <param name="value">The object to serialize.</param>
        /// <param name="formatting">Indicates how the output is formatted.</param>
        /// <returns>A JSON string representation of the object.</returns>
        public static string Serialize(object value, Formatting formatting)
        {
            var resolver = new JsonSerializerSettings
            {
                ContractResolver = new SanitizingContractResolver()
            };

            var httpResponseMessage = value as HttpResponseMessage;
            if (httpResponseMessage != null)
            {
                value = $"({typeof(HttpResponseMessage).Name}, {httpResponseMessage.Content?.GetType().FullName})";
            }

            return JsonConvert.SerializeObject(value, formatting, resolver);
        }

        private class SanitizingContractResolver : DefaultContractResolver
        {
            protected override JsonProperty CreateProperty(MemberInfo member, MemberSerialization memberSerialization)
            {
                var jsonProperty = base.CreateProperty(member, memberSerialization);

                if (jsonProperty.PropertyName.ToLowerInvariant().Contains("password".ToLowerInvariant()) ||
                    jsonProperty.PropertyName.Equals("pass", StringComparison.InvariantCultureIgnoreCase))
                {
                    jsonProperty.Converter = new SanitizingJsonConverter(LoggingType.SensitiveInformation);
                }
                else if (jsonProperty.PropertyType == typeof(byte[]))
                {
                    jsonProperty.Converter = new SanitizingJsonConverter(LoggingType.ByteArray);
                }

                return jsonProperty;
            }
        }

        private class SanitizingJsonConverter : JsonConverter
        {
            private readonly LoggingType _loggingType;

            public SanitizingJsonConverter(LoggingType loggingType)
            {
                _loggingType = loggingType;
            }

            public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
            {
                switch (_loggingType)
                {
                    case LoggingType.SensitiveInformation:
                        writer.WriteValue($"({typeof(string).Name})");
                        break;
                    case LoggingType.ByteArray:
                        var arrayLength = ((byte[])value).Length;
                        writer.WriteValue($"({typeof(byte).Name}[{arrayLength}])");
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }

            public override bool CanConvert(Type objectType)
            {
                throw new NotImplementedException();
            }

            public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
            {
                throw new NotImplementedException();
            }
        }

        private enum LoggingType
        {
            SensitiveInformation,
            ByteArray,
        }
    }
}