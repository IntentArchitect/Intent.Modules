<#@ template  debug="true" hostSpecific="true" inherits="IntentRoslynProjectItemTemplateBase<SubscribingModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Application" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#


#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Transactions;
using System.Web.Http;
using Intent.Esb.Client.Consuming;
using Intent.Framework.EntityFramework;<#= DeclareUsings() #>
<#= DependencyUsings #>

namespace <#= Namespace #>
{
    [RoutePrefix("api/eventConsumer")]
    public class MessageConsumingServiceController : ApiController
    {
        private readonly MessageDispatcher _messageDispatcher;
        private readonly IDbContextFactory _dbContextFactory;<#= DeclarePrivateVariables() #>

        public MessageConsumingServiceController(MessageDispatcher messageDispatcher
            , IDbContextFactory dbContextFactory<#= ConstructorParams() #>
            )
        {
            _messageDispatcher = messageDispatcher;
            _dbContextFactory = dbContextFactory;<#= ConstructorInit() #>
        }

        public class MessagePayload
        {
            public string Content { get; set; }
        }

        [AcceptVerbs("POST")]
        [Route("consumeMessage")]
<#	if (Model.Security.RequiresAuthentication)
	{ #>
		[Authorize<#= (Model.Security.RequiredRoles.Any()) ? "(Roles = \"" + Model.Security.RequiredRoles.First() + "\")" : "" #>]
<#	} #>
        public void ConsumeMessage(MessagePayload payload)
        {<#= BeginOperation() #>
            TransactionOptions tso = new TransactionOptions();
            tso.IsolationLevel = IsolationLevel.<#= Model.TransactionOptions.IsolationLevel #>;
<#	if (Model.TransactionOptions.TimeoutInSeconds != null)
    { #>
			tso.Timeout = TimeSpan.FromSeconds(<#= Model.TransactionOptions.TimeoutInSeconds #>);
<#	} #>
            try
            {
                using (var dbScope = new DbContextScope(_dbContextFactory))
                {<#= BeforeTransaction() #>
                    using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, tso, TransactionScopeAsyncFlowOption.Enabled))
                    {<#= BeforeCallToAppLayer() #>
                        _messageDispatcher.Dispatch(payload.Content);
                        dbScope.SaveChanges();<#= AfterCallToAppLayer() #>
                        ts.Complete();
                    }
                }<#= AfterTransaction() #>
            }
            catch (Exception e) 
            {<#= OnExceptionCaught() #>
            }
        }

<#	if (Model.Security.RequiresAuthentication)
	{ #>
		[Authorize<#= (Model.Security.RequiredRoles.Any()) ? "(Roles = \"" + Model.Security.RequiredRoles.First() + "\")" : "" #>]
<#	} #>
        [AcceptVerbs("Get")]
        [Route("serviceIsRunning")]
        public bool ServiceIsRunning()
        {
            return true;
        }
    }
}