<?xml version="1.0" encoding="utf-8"?>
<stereotypeDefinition id="d01df110-1208-4af8-a913-92a49d219552" version="3.1.0">
  <name>Parameter Settings</name>
  <targetMode>of-type</targetMode>
  <targetTypes>
    <type id="00208d20-469d-41cb-8501-768fd5eb796b">Parameter</type>
    <type id="7baed1fd-469b-4980-8fd9-4cefb8331eb2">DTO-Field</type>
  </targetTypes>
  <targetReferenceTypes />
  <applyMode>manually</applyMode>
  <icon type="FontAwesome" source="cogs" />
  <displayIcon>false</displayIcon>
  <displayIconFunction>return false;</displayIconFunction>
  <displayFunction>if (properties["Source"].value == "Default") {
    let httpSettings = element.getParent().getStereotype("Http Settings");
    if (httpSettings == null) {
        return null;
    }

    let verb = httpSettings.getProperty("Verb").getValue()?.toString()
    let route = httpSettings.getProperty("Route").getValue()?.toString();
    if (route.toLowerCase().indexOf(`{${element.getName().toLowerCase()}}`) !== -1) {
        return "[From Route]";
    }
    if ((verb == "POST" || verb == "PUT") &amp;&amp; 
        element.typeReference.getType().specialization !== "Type-Definition") {
        return "[From Body]";
    }

    if ((verb == "GET" || verb == "DELETE") &amp;&amp;
        element.typeReference.getType().specialization == "Type-Definition") {
        return "[From Query]";
    }
    
    return "[From Query]";
}

if (properties["Source"].value === "From Header" &amp;&amp; properties["Header Name"].value) {
    return `[From Header(Name = "${properties["Header Name"].value}")]`
}

if (properties["Source"].value === "From Query" &amp;&amp; properties["Query String Name"].value) {
    return `[From Query(Name = "${properties["Query String Name"].value}")]`
}

return `[${properties["Source"].value}]`;
</displayFunction>
  <displayAsAnnotation>true</displayAsAnnotation>
  <displayAsText>false</displayAsText>
  <autoAdd>false</autoAdd>
  <allowMultipleApplies>false</allowMultipleApplies>
  <parentFolderId>0011387a-b122-45d7-9cdb-8e21b315ab9f</parentFolderId>
  <order>0</order>
  <packageId>0011387a-b122-45d7-9cdb-8e21b315ab9f</packageId>
  <packageName>Intent.Metadata.WebApi</packageName>
  <validateFunction>const parameterSettingsStereotypeId = "d01df110-1208-4af8-a913-92a49d219552";
const httpSettings = element.getParent().getStereotype("Http Settings");
const verb = httpSettings?.getProperty("Verb").getValue()?.toString()

function isFromBody(childElement) {
    const parameterSettingsStereotype = childElement.getStereotype(parameterSettingsStereotypeId);
    const source = parameterSettingsStereotype?.getProperty("Source").getValue();

    if (source === "From Body") {
        return true;
    }

    if (source === "Default") {
        return ((verb == "POST" || verb == "PUT") &amp;&amp; childElement.typeReference.getType().specialization !== "Type-Definition");
    }

    return false;
}

if (!isFromBody(element)) {
    return null;
}

const fromBodyParameterCount = element.getParent().getChildren().filter(isFromBody).length;
return fromBodyParameterCount &gt; 1
    ? "More than 1 paramer has its source set to \"From Body\""
    : null;</validateFunction>
  <properties>
    <property id="d2630e0f-f930-404f-b453-1e8052a712f5">
      <name>Source</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>options</optionsSource>
      <placeholder>(required)</placeholder>
      <defaultValue>Default</defaultValue>
      <valueOptions>
        <option>Default</option>
        <option>From Body</option>
        <option>From Form</option>
        <option>From Header</option>
        <option>From Query</option>
        <option>From Route</option>
      </valueOptions>
      <lookupTypes />
      <isRequiredFunction>return true;</isRequiredFunction>
    </property>
    <property id="7a331e9b-f13c-4b33-9013-bd59b4a4999c">
      <name>Header Name</name>
      <type>string</type>
      <controlType>text</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder>(required)</placeholder>
      <valueOptions />
      <lookupTypes />
      <isActiveFunction>return properties["Source"].value === "From Header";</isActiveFunction>
      <isRequiredFunction>return true;</isRequiredFunction>
    </property>
    <property id="c8caa58e-972a-42f2-983e-652ceee762b2">
      <name>Query String Name</name>
      <type>string</type>
      <controlType>text</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder />
      <valueOptions />
      <lookupTypes />
      <isActiveFunction>return properties["Source"].value === "From Query";</isActiveFunction>
    </property>
  </properties>
</stereotypeDefinition>