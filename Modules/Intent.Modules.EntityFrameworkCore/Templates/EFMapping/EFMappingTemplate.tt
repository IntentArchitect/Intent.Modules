<#@ template  debug="true" inherits="IntentRoslynProjectItemTemplateBase<IClass>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.MetaModel.Domain" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

<#//Some initial validation
    foreach (var associationEnd in Model.AssociatedClasses)
    {
        var association = associationEnd.Association;
 
        //if there is more than 1 parent association && there are any which are not 0..1->1 (this is a manual inheritance mapping)
        var multipleCompositions = Model.AssociatedClasses.Where(ae => ae.Association.AssociationType == AssociationType.Composition && ae.Association.TargetEnd.Class == Model);
        if (multipleCompositions.Count() > 1)
        {
            throw new Exception(string.Format("Unsupported Mapping - {0} each have a Compositional relationship with {1}.", multipleCompositions.Select(x => x.Class.Name).Aggregate((x, y) => x + ", " + y), Model.Name));
        }

        if (!association.TargetEnd.IsNavigable)
        {
            throw new Exception(string.Format("Unsupported Source Needs to be Navigable to Target relationship  {0} on {1} ", association.ToString(), association.TargetEnd.Class.Name));
        }

        //Unsupported Associations
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->0..1"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship  {0} - this relationship implies composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->1"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship  {0} - this relationship implies composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->*"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship {0}, this relationship implies Composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString() == "0..1->0..1"))
        {
            throw new Exception(string.Format("Unsupported Composition relationship {0}", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString() == "0..1->*"))
        {
            throw new Exception(string.Format("Unsupported Composition relationship {0}, this relationship implies aggregation", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString().StartsWith("*->")))
        {
            throw new Exception(string.Format("Unsupported Composition relationship {0}, this relationship implies aggregation", association.ToString()));
        }
        //Naviagability Requirement
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString() == "0..1->1") && (!association.SourceEnd.IsNavigable))
        {
            throw new Exception(string.Format("Unsupported. IsNavigable from Composition Required for Composition relationship {0}", association.ToString()));
        }
    }

#>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
<#= DependencyUsings #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #> : IEntityTypeConfiguration<<#= EntityStateName #>>
    {
        public void Configure(EntityTypeBuilder<<#= EntityStateName #>> builder)
        {
<#  if (Model.ParentClass == null)
    {#>
            builder.ToTable("<#= Model.Name #>");
<#  }
    var addedImplicitKey = false;
    if (Model.ParentClass == null && !Model.Attributes.Any(x => x.HasStereotype("Primary Key"))) {
        addedImplicitKey = true;#>
            builder.HasKey(x => x.Id);
            builder.Property(x => x.Id).HasColumnName("Id");
<#  }
    if (Model.ParentClass != null) {#>
            builder.HasBaseType<<#= Model.ParentClass.Name #>>();
<#  }  
    foreach (var attribute in Model.Attributes)
    {
        if (attribute.Name.ToLower() == "id" && addedImplicitKey)
        {
                throw new Exception(string.Format("Surrogate Key is implicit for class {0}. Either remove the 'id' attribute, or disable the 'Implicit Surrogate Key' option for this template", Model.Name));
	    }
        if (attribute.HasStereotype("Primary Key")) {#>
            builder.HasKey(x => x.<#= attribute.Name.ToPascalCase() #>);
<#		}
        var indexStereotype = attribute.GetStereotype("Index");
        if(indexStereotype != null)
        { #>
            builder.HasIndex(x => x.<#= attribute.Name.ToPascalCase() #>)
                .IsUnique(unique: <#= indexStereotype.GetProperty("IsUnique", "false") #>)
<#			
            var uniqueKey = indexStereotype.GetProperty("UniqueKey", string.Empty);
            if(!string.IsNullOrEmpty(uniqueKey))
            { #>
                .HasName("<#= uniqueKey #>")
<#			} #>
                ;
<#      } #>
            builder.Property(x => x.<#= attribute.Name.ToPascalCase()#>)<#

        if (!attribute.IsNullable){#>

                .IsRequired()<#
        }

        if (attribute.Type.Name == "string" )
        {
            var maxLength = attribute.GetStereotypeProperty<int?>("StringOptions", "MaxLength") ?? attribute.GetStereotypeProperty<int?>("Text", "MaxLength");     // (Text for backwards compatibility with RichDomain)
            if (maxLength.HasValue){
        #>

                .HasMaxLength(<#= maxLength.Value#>)<#
            }
        }

        var decimalPrecision = attribute.GetStereotypeProperty<int?>("Numeric", "Precision");
        var decimalScale = attribute.GetStereotypeProperty<int?>("Numeric", "Scale");
        if (decimalPrecision.HasValue && decimalScale.HasValue){#>

                .HasPrecision(<#= decimalPrecision#>, <#= decimalScale #>)<#
        }

        if (HasTypeOverride(attribute))
        { #>
                .HasColumnType("<#= GetTypeOverride(attribute) #>")
<#      } #>
                ;

<#  }#>
<#    foreach (var associationEnd in Model.AssociatedClasses)
    {

        if (associationEnd != associationEnd.Association.TargetEnd)
        {
            continue;
        }

        switch (associationEnd.Relationship())
        {
            case RelationshipType.OneToOne :#>
            builder.HasOne(x => x.<#=associationEnd.Name().ToPascalCase()#>)
                .WithOne(<#= associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase() : "" #>)
<#				if (associationEnd.OtherEnd().MinMultiplicity != "0") { #>
                .HasForeignKey<<#= Model.Name #>>(x => x.Id)
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade)
<#				} else {#>
                .HasForeignKey<<#= Model.Name #>>(x => x.<#= associationEnd.OtherEnd().GetStereotypeProperty("Foreign Key", "Column Name", associationEnd.Name().ToPascalCase() + "Id") #>)
                .OnDelete(DeleteBehavior.Restrict)
<#              } #>
                ;

<#              break;
            case RelationshipType.OneToMany :#>
            builder.HasOne(x => x.<#=associationEnd.Name().ToPascalCase()#>)
                .WithMany(<#= associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase() : "" #>)
<#				if (UseForeignKeys) { #>
                .HasForeignKey(x => x.<#= associationEnd.OtherEnd().GetStereotypeProperty("Foreign Key", "Column Name", associationEnd.Name().ToPascalCase() + "Id")#>)
<#				} else { #>
                .HasForeignKey("<#= associationEnd.Name().ToPascalCase()#>Id"))
<#				} #>
                ;

<#                  break;
            case RelationshipType.ManyToOne :#>
            builder.HasMany(x => x.<#= associationEnd.Name().ToPascalCase()#>)
                .WithOne(x => x.<#= associationEnd.OtherEnd().Name().ToPascalCase() #>)
<#				if (UseForeignKeys) { #>
                .HasForeignKey(x => x.<#= associationEnd.GetStereotypeProperty("Foreign Key", "Column Name", associationEnd.OtherEnd().Name().ToPascalCase() + "Id") #>)
<#				} else { #>
                .Map(m => m.MapKey("<#= associationEnd.OtherEnd().Name().ToPascalCase()#>Id"))
<#				} #>
<#				if (associationEnd.OtherEnd().MinMultiplicity != "0") { #>
                .IsRequired()
                .OnDelete(DeleteBehavior.Cascade)
<#				}#>
                ;

<#                  break;
            case RelationshipType.ManyToMany :#>
            builder.Ignore(x => x.<#= associationEnd.Name().ToPascalCase()#>)
                <# IssueManyToManyWarning(associationEnd); #>
                ;

<#                  break;
        }       
    }
#>
        }
    }
}