<#@ template language="C#" inherits="IntentTemplateBase" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Modules.Angular.Api" #>
<#@ import namespace="Intent.Modules.Angular.Layout.Api" #>
<div class="container-fluid" intent-can-add intent-id="container">
<#  foreach(var control in View.InternalElement.ChildElements) { 
        switch(control.SpecializationType) {#>
<#          case TableControlModel.SpecializationType: {
                var model = new TableControlModel(control);
                if (!model.IsValid()) break;#>
  <div class="row" intent-id="<#= model.Name.Replace(" ", "").ToKebabCase() #>">
    <div class="col">
      <table class="table table-hover">
        <thead class="thead-dark">
          <tr intent-manage intent-id="<#= model.Name.Replace(" ", "").ToKebabCase() #>-header">
<# foreach(var field in model.DataModel.ChildElements) { #>
            <th><#= field.Name.ToPascalCase() #></th>
<# } #>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let item of <#= model.DataModelPath #>" class="clickable" intent-manage intent-id="<#= model.Name.Replace(" ", "").ToKebabCase() #>-<#= model.Name.ToKebabCase() #>-data">
<# foreach(var field in model.DataModel.ChildElements) { #>
            <td>{{item.<#= field.Name #>}}</td>
<# } #>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
<#          } break; #>
<#          case PaginationControlModel.SpecializationType: {
                var model = new PaginationControlModel(control);
                if (!model.IsValid()) break;#>
  <div class="row" intent-manage intent-id="<#= model.Name.Replace(" ", "").ToKebabCase() #>">
    <div class="col">
      <pagination [totalItems]="<#= model.DataModelPath #>?.<#= model.TotalItemsPath #>" [(ngModel)]="<#= model.DataModelPath #>.<#= model.PageNumberPath #>" (pageChanged)="pageChanged($event)"></pagination>
    </div>
  </div>
<#          } break; #>
<#          case FormModel.SpecializationType: {
                var model = new FormModel(control);
                if (!model.IsValid()) break;#>
  <form [formGroup]="form" (ngSubmit)="save()" intent-manage intent-id="<#= model.Name.Replace(" ", "").ToKebabCase() #>">
<#  foreach(var field in model.FormFields) { #>
<#      if (field.TypeReference.Element.Name == "Text Input") { #>
    <div class="form-group" intent-id="<#= field.Id #>">
      <label for="<#= field.Name #>"><#= field.Name #></label>
      <input id="<#= field.Name #>" class="form-control" formControlName="<#= field.DataModelPath #>" type="text" />
    </div>
<#      } else if (field.TypeReference.Element.Name == "Checkbox") { #>
    <div class="form-check" intent-id="<#= field.Id #>">
      <input id="<#= field.Name #>" class="form-check-input" formControlName="<#= field.DataModelPath #>" type="checkbox" />
      <label for="<#= field.Name #>" class="form-check-label"><#= field.Name #></label>
    </div>
<#      } else if (field.TypeReference.Element.Name == "Datepicker") { #>
    <div class="form-group" intent-id="<#= field.Id #>">
      <label for="<#= field.Name #>"><#= field.Name #></label>
      <input id="<#= field.Name #>" class="form-control" formControlName="<#= field.DataModelPath #>" type="text" bsDatepicker="" />
    </div>
<#      } #>
<#  } #>
  </form>
<#          } break; #>
<#      }
    }#>
</div>
