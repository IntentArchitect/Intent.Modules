<#@ template  debug="true"  inherits="CSharpTemplateBase<object>"#>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#


#>
using Intent.Framework.Core.Context;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
<#=DependencyUsings#>

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Ignore, Signature = Mode.Fully)]
    public class <#= ClassName #> : IUserContextProvider<IUserContextData>
    {
        public IUserContextData GetUserContext()
        {
            string userId;
            string userName;
            string givenName;
            string familyName;
            string email;
            bool isAuthenticated;
            var claims = ClaimsPrincipal.Current.Claims.ToList();
            if (!string.IsNullOrEmpty(ClaimsPrincipal.Current.Identity.Name))
            {
                userId = claims.FirstOrDefault(x => x.Type == "sub")?.Value;
                userName = claims.FirstOrDefault(x => x.Type == "name")?.Value;
                givenName = claims.FirstOrDefault(x => x.Type == "given_name")?.Value;
                familyName = claims.FirstOrDefault(x => x.Type == "family_name")?.Value;
                email = claims.FirstOrDefault(x => x.Type == "email")?.Value;
                isAuthenticated = true;
            }
            else
            {
                userId = "";
                userName = "Anonymous";
                givenName = "Anonymous";
                familyName = "";
                email = "";
                isAuthenticated = false;
            }

            IUserContextData userContext = new UserContext(isAuthenticated, userId, userName, givenName, familyName, email);

            return userContext;
        }
    }
}