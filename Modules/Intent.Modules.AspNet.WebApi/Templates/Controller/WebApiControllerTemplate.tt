<#@ template  debug="true"  inherits="CSharpTemplateBase<ServiceModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>
<#@ import namespace="Intent.Modules.Application.Contracts" #> 
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using System.Transactions;
using System.Web;
using System.Web.Http;
using System.Web.Http.Description;
<#=DependencyUsings#>
<#=DeclareUsings()#>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#=Namespace#>
{
    [RoutePrefix("api/<#= Model.Name.ToLower() #>")]
    public class <#= ClassName #> : ApiController
    {
        private readonly <#= GetServiceInterfaceName() #> _appService;<#= DeclarePrivateVariables() #>

        public <#= ClassName #> (<#= GetServiceInterfaceName() #> appService<#= ConstructorParams() #>
            )
        {
            _appService = appService ?? throw new ArgumentNullException(nameof(appService));<#= ConstructorInit() #>
        }
<#
    foreach (var operation in Model.Operations)
    {
        if (RequiresPayloadObject(operation))
        {
#>

        public class <#= GetPayloadObjectTypeName(operation) #>
        {
<#
            foreach (var parameter in operation.Parameters.Where(IsFromBody))
            {
#>
                public <#= GetTypeName(parameter.TypeReference) #> <#= parameter.Name #> { get; set; }
<#
            } // foreach (var parameter in operation.Parameters.Where(IsFromBody))
#>
        }
<#
        } // if (RequiresPayloadObject(operation))
#>

        [AcceptVerbs("<#= GetHttpVerb(operation).ToString().ToUpper()#>")]
        <#= GetSecurityAttribute(operation) #>
        [Route("<#= GetRoute(operation) #>")]
        [ResponseType(<#= string.Format("typeof({0})", operation.TypeReference.Element != null ? GetOperationReturnType(operation) : "void") #>)]
        public <#= operation.IsAsync() ? "async Task<IHttpActionResult>" : "IHttpActionResult" #> <#= operation.Name #>(<#= GetOperationParameters(operation) #>)
        {<#= BeginOperation(operation) #>
<#          if (operation.TypeReference.Element != null)
            { #>
            <#= GetOperationReturnType(operation) #> result = default(<#= GetOperationReturnType(operation) #>);<#
            } /* if (operation.TypeReference.Element != null) */ #>
            <#= BeforeTransaction(operation) #>
            <#= BeforeCallToAppLayer(operation) #><#
        if (operation.TypeReference.Element != null)
        { 
#>                var appServiceResult = <#= operation.IsAsync() ? "await " : "" #>_appService.<#= operation.Name#>(<#= GetOperationCallParameters(operation) #>);
                result = appServiceResult;
<#      }
        else
        { 
#>                <#= operation.IsAsync() ? "await " : "" #>_appService.<#= operation.Name#>(<#= GetOperationCallParameters(operation) #>);
<#      
        }
#><#= AfterCallToAppLayer(operation) #><#= AfterTransaction(operation) #><#
        if (!string.IsNullOrEmpty(OverrideReturnStatement(Model, operation)))
        { #>
            
            <#= OverrideReturnStatement(Model, operation) #>
<#      }
        else if (operation.TypeReference.Element != null)
        { #>
            
            return Ok(result);
<#      } else { #>
            
            return StatusCode(HttpStatusCode.NoContent);
<#      } #>
        }
<#    } // foreach (var operation in Model.Operations)

        // Source code of base class: http://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.Http/ApiController.cs
        // As dispose is not virtual, looking at the source code, this looks like a better hook in point
#>

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            //dispose all resources
            _appService.Dispose();<#= OnDispose() #>
        }
<#= ClassMethods() #>
    }
}