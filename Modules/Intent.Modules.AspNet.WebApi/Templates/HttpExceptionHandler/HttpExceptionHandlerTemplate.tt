<#@ template  debug="true" hostSpecific="true" inherits="IntentRoslynProjectItemTemplateBase<object>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#


#>
using Intent.Framework.Domain;
using Intent.Framework.WebApi.ExceptionHandling;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Web;
using System.Web.Http;

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
	[IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    public class ServiceBoundaryExceptionHandlingStrategy : IServiceBoundaryExceptionHandlingStrategy
    {
        public void HandleException(Exception e)
        {
            var dve = e as DomainViolationException;
            if (dve != null)
            {
                throw new HttpResponseException(CreateHttpResponseMessage(
                    httpStatusCode: HttpStatusCode.BadRequest,
                    message: dve.Message,
                    reasonPhrase: dve.Message,
                    additionalData: dve.Data));
            }

            throw new HttpResponseException(CreateHttpResponseMessage(
                httpStatusCode: HttpStatusCode.InternalServerError,
                message: e.Message,
                reasonPhrase: GetReasonPhrase(e.Message),
                additionalData: HttpContext.Current.Request.IsLocal ? e.StackTrace : null));
        }

        private static HttpResponseMessage CreateHttpResponseMessage(HttpStatusCode httpStatusCode, string message, string reasonPhrase, object additionalData = null)
        {
            return new HttpResponseMessage(httpStatusCode)
            {
                Content = new ObjectContent<object>(new
                    {
                        StatusCode = httpStatusCode,
                        ExceptionMessage = message,
                        AdditionalData = additionalData ?? new object()
                    },
                    new JsonMediaTypeFormatter()
                    {
                        SerializerSettings =
                            new JsonSerializerSettings()
                            {
                                ContractResolver = new CamelCasePropertyNamesContractResolver()
                            }
                    }),
                ReasonPhrase = reasonPhrase,
            };
        }

        private static string GetReasonPhrase(string message)
        {
            if (string.IsNullOrWhiteSpace(message))
            {
                return null;
            }

            return message.Split(new[] { "\r\n", "\n" }, StringSplitOptions.None)[0];
        }
    }
}