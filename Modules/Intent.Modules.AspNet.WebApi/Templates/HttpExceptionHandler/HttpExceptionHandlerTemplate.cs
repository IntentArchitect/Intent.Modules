// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.WebApi.Templates.HttpExceptionHandler
{
    using Intent.SoftwareFactory.Templates;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent\Intent.SoftwareFactory\Intent.Packages.WebApi\Templates\HttpExceptionHandler\HttpExceptionHandlerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class HttpExceptionHandlerTemplate : IntentRoslynProjectItemTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(" \r\n");
            
            #line 13 "C:\Dev\Intent\Intent.SoftwareFactory\Intent.Packages.WebApi\Templates\HttpExceptionHandler\HttpExceptionHandlerTemplate.tt"




            
            #line default
            #line hidden
            this.Write(@"using Intent.Framework.Domain;
using Intent.Framework.WebApi.ExceptionHandling;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using System;
using System.Net;
using System.Net.Http;
using System.Net.Http.Formatting;
using System.Web;
using System.Web.Http;

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace ");
            
            #line 30 "C:\Dev\Intent\Intent.SoftwareFactory\Intent.Packages.WebApi\Templates\HttpExceptionHandler\HttpExceptionHandlerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t[IntentManaged(Mode.Merge, Signature = Mode.Fully)]\r\n    public class Servi" +
                    "ceBoundaryExceptionHandlingStrategy : IServiceBoundaryExceptionHandlingStrategy\r" +
                    "\n    {\r\n        public void HandleException(Exception e)\r\n        {\r\n           " +
                    " var dve = e as DomainViolationException;\r\n            if (dve != null)\r\n       " +
                    "     {\r\n                throw new HttpResponseException(CreateHttpResponseMessag" +
                    "e(\r\n                    httpStatusCode: HttpStatusCode.BadRequest,\r\n            " +
                    "        message: dve.Message,\r\n                    reasonPhrase: dve.Message,\r\n " +
                    "                   additionalData: dve.Data));\r\n            }\r\n\r\n            thr" +
                    "ow new HttpResponseException(CreateHttpResponseMessage(\r\n                httpSta" +
                    "tusCode: HttpStatusCode.InternalServerError,\r\n                message: e.Message" +
                    ",\r\n                reasonPhrase: GetReasonPhrase(e.Message),\r\n                ad" +
                    "ditionalData: HttpContext.Current.Request.IsLocal ? e.StackTrace : null));\r\n    " +
                    "    }\r\n\r\n        private static HttpResponseMessage CreateHttpResponseMessage(Ht" +
                    "tpStatusCode httpStatusCode, string message, string reasonPhrase, object additio" +
                    "nalData = null)\r\n        {\r\n            return new HttpResponseMessage(httpStatu" +
                    "sCode)\r\n            {\r\n                Content = new ObjectContent<object>(new\r\n" +
                    "                    {\r\n                        StatusCode = httpStatusCode,\r\n   " +
                    "                     ExceptionMessage = message,\r\n                        Additi" +
                    "onalData = additionalData ?? new object()\r\n                    },\r\n             " +
                    "       new JsonMediaTypeFormatter()\r\n                    {\r\n                    " +
                    "    SerializerSettings =\r\n                            new JsonSerializerSettings" +
                    "()\r\n                            {\r\n                                ContractResol" +
                    "ver = new CamelCasePropertyNamesContractResolver()\r\n                            " +
                    "}\r\n                    }),\r\n                ReasonPhrase = reasonPhrase,\r\n      " +
                    "      };\r\n        }\r\n\r\n        private static string GetReasonPhrase(string mess" +
                    "age)\r\n        {\r\n            if (string.IsNullOrWhiteSpace(message))\r\n          " +
                    "  {\r\n                return null;\r\n            }\r\n\r\n            return message.S" +
                    "plit(new[] { \"\\r\\n\", \"\\n\" }, StringSplitOptions.None)[0];\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
    }
    
    #line default
    #line hidden
}
