<#@ template  debug="true"  inherits="IntentRoslynProjectItemTemplateBase<ServiceModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Class" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Service" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="./../Services.ttinclude" #> 
<#
#>

using System;
using System.Linq;
using System.Collections.Generic;
using System.Transactions;
using System.Web;
using System.Web.Http;
<# 
    if (Model.Operations.Any(x => x.UsesRawSignature))
    {
#>
using System.IO;
using System.Net;
using System.Net.Http;
<# 
    }
#>
<#=DependencyUsings#>
using Intent.CodeGen;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#=Namespace#>.Controllers
{
    [Authorize]
    [RoutePrefix("api/<#= Model.Name.Replace("Service", "").ToLower() #>")]
    public class <#=Model.Name#>Controller : ApiController
    {
        private readonly I<#=Model.Name#> _appService;<#= DeclarePrivateVariables() #>

        public <#=Model.Name#>Controller (I<#=Model.Name#> appService<#= ConstructorParams() #>
            )
        {
            if (appService == null)
                throw new ArgumentNullException("appService");
            _appService = appService;<#= ConstructorInit() #>
        } 
    
<#    foreach (var operation in Model.Operations)
    {
        //Transactions
        string isolationLevel = "ReadCommitted"; // TODO: Make configurable
        
        //NOTE: The following are hook points which can be overriden to custom actions in your plugins:
        Action getMethodDefinitionParameters = () => GetMethodDefinitionParameters(operation, false);
        Action getMethodCallParameters = () => GetMethodCallParameters(operation, false, operation.UsesRawSignature ? string.Empty : "payload.");
        Action getReturnType = () => #><#= GetMethodReturnType(operation) #><#;
        Action adaptServiceResult = () => #>appServiceResult<#;
        Action additionalParameters = () => {};

        if (!operation.UsesRawSignature)
        {
            #>
        public class <#= operation.Name #>Payload
        {
<#
            foreach (var parameter in operation.Parameters)
            {
                foreach (var decorator in PayloadPropertyDecorators(parameter))
                {
#>
            <#= decorator #>
<#
                }
#>
            public <#= parameter.Type.FullName #> <#= parameter.Name #> { get; set; }
<#
            }
#>
        }

<#        
        }

        if (!operation.Security.RequiresAuthentication) {
#>
        [AllowAnonymous]
<#        }
#>
        [AcceptVerbs("POST")]
        [Route("<#= operation.Name.ToLower() #>")]
<#        
        if (operation.Security.RequiredRoles.Any()) {
#>
        [Authorize(Roles = "<#= operation.Security.RequiredRoles.First() #>")]
<#        }

        var methodDefinitionParameters = operation.UsesRawSignature
            ? operation.Parameters.Select(p => p.Type.FullName + " " + p.Name).Aggregate((x, y) => x + ", " + y)
            : operation.Name + "Payload payload";
#>
        public <# getReturnType(); #> <#= operation.Name #>(<#= methodDefinitionParameters #>)
        {<#= BeginOperation(operation) #>

<#        if (operation.HasReturnType())
        {
#>            <# getReturnType(); #> result = default(<# getReturnType(); #>);
<#      }#>
            TransactionOptions tso = new TransactionOptions();
            tso.IsolationLevel = IsolationLevel.<#= isolationLevel #>;
<#	if (operation.TransactionOptions.TimeoutInSeconds != null)
    { #>
			tso.Timeout = TimeSpan.FromSeconds(<#= operation.TransactionOptions.TimeoutInSeconds #>);
<#	} #>

            try
            {<#= BeforeTransaction(operation) #>
                using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, tso))
                {<#= BeforeCallToAppLayer(operation) #>
<#
        if (operation.HasReturnType())
        {
#>                    var appServiceResult = _appService.<#= operation.Name#>(<# getMethodCallParameters(); #>);
<#
            if (ReturnsHttpResponseMessage(operation))
            {
#>
                    result = Request.CreateResponse(HttpStatusCode.OK);
                    result.Content = <#= GetHttpResponseMessageContent(operation) #>;
<#
            }
            else
            {
#>
                    result = <# adaptServiceResult(); #>;
<#
            }
        }
        else
        {
#>                        _appService.<#= operation.Name#>(<# getMethodCallParameters(); #>);
<#        }
#><#= AfterCallToAppLayer(operation) #>
                    ts.Complete();
                }<#= AfterTransaction(operation) #>
            }
            catch (Exception e) 
            {<#= OnExceptionCaught(operation) #>
            }

<#        if (operation.HasReturnType())
        {
#>            return result;
<#      }#>

        }

<#    }

        // Source code of base class: http://aspnetwebstack.codeplex.com/SourceControl/latest#src/System.Web.Http/ApiController.cs
        // As dispose is not virtual, looking at the source code, this looks like a better hook in point
#>
        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);

            //dispose all resources
            _appService.Dispose();
        }
<#=ClassMethods()#>
    }
}