<#@ template  debug="true"  inherits="CSharpTemplateBase<object>"#>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System;
using System.Linq;
using System.Collections.Generic;
using Autofac;
using Autofac.Extensions.DependencyInjection;
<#= DependencyUsings #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge)]
    public class <#= ClassName #>
    {
        #region Autofac Container
        private static readonly Lazy<IContainer> Container = new Lazy<IContainer>(() =>
        {
            var builder = new ContainerBuilder();
            ConfigureContainer(builder);
            return builder.Build();
        });

        /// <summary>
        /// Gets the configured Autofac container.
        /// </summary>
        public static IContainer GetConfiguredContainer()
        {
            return Container.Value;
        }
        #endregion

        private static void ConfigureContainer(ContainerBuilder builder)
        {
            ConfigureGeneratedRegistrations(builder);
            ConfigureCustomRegistrations(builder);
        }

        private static void ConfigureGeneratedRegistrations(ContainerBuilder builder)
        {
            builder.RegisterType<AutofacServiceProvider>().As<IServiceProvider>();
            <#= Registrations() #>
        }

        [IntentManaged(Mode.Ignore)]
        private static void ConfigureCustomRegistrations(ContainerBuilder builder)
        {
            //Add Custom Registrations
        }
    }
}
