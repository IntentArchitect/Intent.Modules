<#@ template debug="true"  inherits="IntentRoslynProjectItemTemplateBase<ServiceModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.UMLModel" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.Service" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

using System;
using System.Configuration;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
<#= DependencyUsings #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#=ClassName#> : I<#=Model.Name#>
    {
        private readonly <#= GetHttpClientServiceInterfaceName() #> _httpClientService;

        public <#= ClassName #>(<#= GetHttpClientServiceInterfaceName() #> httpClientService)
        {
            _httpClientService = httpClientService;
        }
<#
    foreach (var operation in Model.Operations)
    {
        // Asynchronous versions:
        if (operation.HasReturnType())
        {
#>

        public async Task<<#= operation.ReturnType.FullName #>> <#= operation.Name #>Async(<#= GetMethodDefinitionParameters(operation) #>)
        {
            return await new Task<<#= operation.ReturnType.FullName #>>(() => <#= operation.Name #>(<#= GetMethodCallParameters(operation) #>));
        }
<#
        }
        else // if (operation.HasReturnType())
        {
#>

        public async void <#= operation.Name #>Async(<#= GetMethodDefinitionParameters(operation) #>)
        {
            await new Task(() => <#= operation.Name #>(<#= GetMethodCallParameters(operation) #>));
        }
<# 
        } // if (operation.HasReturnType())

        // Synchronous versions:
#>

        public <#= operation.HasReturnType() ? operation.ReturnType.FullName : "void" #> <#= operation.Name #>(<#= GetMethodDefinitionParameters(operation) #>)
        {
            try
            {
                const string requestUri = "/api/<#= Model.Name.Replace("Service", "").ToLower() #>/<#= operation.Name.ToLowerInvariant() #>";
                    
                var response = _httpClientService.PostAsJsonAsync(
                    targetApplicationName: "<#= ApplicationName #>",
                    requestUri: requestUri,
<# 
                    if (operation.UsesRawSignature)
                    {

                        if (operation.Parameters.Count > 1)
                        {
                            throw new Exception(string.Format("Use of more than one parameter for operations which have 'IsRaw' is unsupported. Service='{0}', Operation='{1}'", Model.Name, operation.Name));
                        }
#>
                    value: <#= operation.Parameters.Any() ? operation.Parameters.Single().Name : "null" #>).Result;
<#
                    }
                    else
                    {
#>
                    value: new
                    {
<#
                        foreach (var parameter in operation.Parameters)
                        {
#>
                        <#= parameter.Name #>,
<#
                        } // foreach (var parameter in operation.Parameters)
#>
                    }).Result;
<# 
                    }
#>

                if (!response.IsSuccessStatusCode)
                {
                    throw new WebApiClientServiceProxyRemoteException(
                        response.StatusCode,
                        response.ReasonPhrase,
                        $"Request to {new Uri(new Uri(_httpClientService.GetBaseAddress("<#= ApplicationName #>")), requestUri).AbsoluteUri} failed with status code {(int)response.StatusCode} {response.ReasonPhrase}.\n\n" +
                        $"{response.Content.ReadAsStringAsync().Result}");
                }
<#
            if (operation.HasReturnType())
            {
#>

                return response.Content.<#= GetReadAs(operation) #>.Result;
<#
            } // if (operation.HasReturnType())
#>
            }
            catch (AggregateException aggregateException)
            {
                if (aggregateException.InnerExceptions.Count == 1)
                {
                    throw aggregateException.InnerExceptions.Single();
                }

                throw;
            }
        }
<#
    } // foreach (var operation in Model.Operations)
#>

        public void Dispose()
        {
            // NOP - Required for interface implementation
        }
    }
}
