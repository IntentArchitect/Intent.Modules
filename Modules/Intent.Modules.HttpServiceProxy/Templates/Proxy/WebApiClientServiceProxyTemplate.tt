<#@ template debug="true"  inherits="CSharpTemplateBase<ServiceModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>
using System;
using System.Configuration;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
<#= DependencyUsings #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName #> : <#= GetServiceInterfaceName() #>
    {
        private readonly <#= GetHttpClientServiceInterfaceName() #> _httpClientService;

        public <#= ClassName #>(<#= GetHttpClientServiceInterfaceName() #> httpClientService)
        {
            _httpClientService = httpClientService;
        }
<#
    foreach (var operation in Model.Operations)
    {
#>
<#
        // Asynchronous versions:
        if (operation.ReturnType != null)
        {
#>

        public async Task<<#= GetOperationReturnType(operation) #>> <#= operation.Name #>Async(<#= GetOperationDefinitionParameters(operation) #>)
        {
            return await new Task<<#= GetOperationReturnType(operation) #>>(() => <#= operation.Name #>(<#= GetOperationCallParameters(operation) #>));
        }
<#
        }
        else // if (operation.ReturnType != null)
        {
#>

        public async void <#= operation.Name #>Async(<#= GetOperationDefinitionParameters(operation) #>)
        {
            await new Task(() => <#= operation.Name #>(<#= GetOperationCallParameters(operation) #>));
        }
<# 
        } // if (operation.HasReturnType())

        // Synchronous versions:
#>

        public <#= GetOperationReturnType(operation) #> <#= operation.Name #>(<#= GetOperationDefinitionParameters(operation) #>)
        {
            try
            {
                const string requestUri = "/api/<#= Model.Name.ToCamelCase() #>/<#= operation.Name.ToCamelCase() #>";

                var response = _httpClientService.PostAsJsonAsync(
                    targetApplicationName: "<#= ApplicationName #>",
                    requestUri: requestUri,
                    value: new
                    {
<#
                        foreach (var parameter in operation.Parameters)
                        {
#>
                        <#= parameter.Name #>,
<#
                        } // foreach (var parameter in operation.Parameters)
#>
                    }).Result;

                if (!response.IsSuccessStatusCode)
                {
                    throw new WebApiClientServiceProxyRemoteException(
                        response.StatusCode,
                        response.ReasonPhrase,
                        $"Request to {new Uri(new Uri(_httpClientService.GetBaseAddress("<#= ApplicationName #>")), requestUri).AbsoluteUri} failed with status code {(int)response.StatusCode} {response.ReasonPhrase}.\n\n" +
                        $"{response.Content.ReadAsStringAsync().Result}");
                }
<#
            if (operation.ReturnType != null)
            {
#>

                return response.Content.<#= GetReadAs(operation) #>.Result;
<#
            } // if (operation.ReturnType != null)
#>
            }
            catch (AggregateException aggregateException)
            {
                if (aggregateException.InnerExceptions.Count == 1)
                {
                    throw aggregateException.InnerExceptions.Single();
                }

                throw;
            }
        }
<#
    } // foreach (var operation in Model.Operations)
#>

        public void Dispose()
        {
            // NOP - Required for interface implementation
        }
    }
}
