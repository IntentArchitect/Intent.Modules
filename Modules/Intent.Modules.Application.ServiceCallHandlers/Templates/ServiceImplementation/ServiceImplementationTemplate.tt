<#@ template  debug="true"  inherits="CSharpTemplateBase<ServiceModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Modules.Application.Contracts" #> 
<#@ import namespace="Intent.Modelers.Services.Api" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
#>

using System;
using System.Linq;
using System.Collections.Generic;
using System.Threading.Tasks;
using Intent.RoslynWeaver.Attributes;
<#=DependencyUsings#>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#=Namespace#>
{
    public class <#=ClassName#> : <#= GetServiceInterfaceName() #>
    {
        private readonly IServiceProvider _serviceProvider;

        public <#=ClassName#>(IServiceProvider serviceProvider)
        { 
            _serviceProvider = serviceProvider;
        }

<#    foreach (var o in Model.Operations)
    {

#>        public <#= GetOperationReturnType(o) #> <#= o.Name#>(<#= GetOperationDefinitionParameters(o) #>)
        {
            var sch = (<#= GetHandlerClassName(o) #>)_serviceProvider.GetService(typeof(<#= GetHandlerClassName(o) #>));
            <#
        if (o.TypeReference.Element != null)
        {
#>return <#
        }
#><#= o.IsAsync() ? "await " : "" #>sch.Handle(<#= GetOperationCallParameters(o) #>);
        }

<#        
    }
#>

        #region IDisposable Members

        public void Dispose()
        {
            //dispose all resources
        }

        #endregion
    }
}