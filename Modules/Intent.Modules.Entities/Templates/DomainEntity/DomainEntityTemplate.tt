<#@ template  debug="true" inherits="IntentRoslynProjectItemTemplateBase<IClass>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.MetaModel.Domain" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic"#>
using System;
using System.Collections.Generic;
<#= DependencyUsings #>

[assembly: DefaultIntentManaged(Mode.Ignore)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge)]
    [DefaultIntentManaged(Mode.Merge, Signature = Mode.Merge, Body = Mode.Merge, Targets = Targets.Methods, AccessModifiers = AccessModifiers.Public)]
    public partial class <#= ClassName #>
    {
<#= Constructors(Model) #>
<# 	foreach (var operation in Model.Operations)
    {
        string returnType = EmitOperationReturnType(operation);
        string parameterDefinitions = operation.Parameters.Any() ? operation.Parameters.Select(x => Types.Get(x.Type) + " " + x.Name.ToCamelCase()).Aggregate((x, y) => x + ", " + y) : "";
        if (!operation.IsAbstract)
        {#>
        public <#= returnType #> <#= operation.Name.ToPascalCase() #>(<#= parameterDefinitions #>)
        {
            throw new NotImplementedException("Replace with your implementation...");
        }
<#		}
        else
        { #>
        public abstract <#= returnType #> <#= operation.Name.ToPascalCase() #>(<#= parameterDefinitions #>);
<#		}
    }
#>
    }
}