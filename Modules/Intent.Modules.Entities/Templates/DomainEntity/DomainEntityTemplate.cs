// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Entities.Templates.DomainEntity
{
    using Intent.MetaModel.Domain;
    using Intent.SoftwareFactory.Templates;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class DomainEntityTemplate : IntentRoslynProjectItemTemplateBase<IClass>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing Intent.CodeGen;\r\n");
            
            #line 17 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DependencyUsings));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n[assembly: DefaultIntentManaged(Mode.Ignore)]\r\n\r\nnamespace ");
            
            #line 21 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    [IntentManaged(Mode.Merge)]\r\n    [DefaultIntentManaged(Mode.Merge, Signa" +
                    "ture = Mode.Merge, Body = Mode.Merge, Targets = Targets.Methods, AccessModifiers" +
                    " = AccessModifiers.Public)]\r\n    public partial class ");
            
            #line 25 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n");
            
            #line 27 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Constructors(Model)));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 28 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
 	foreach (var operation in Model.Operations)
    {
        string returnType = operation.ReturnType != null ? Types.Get( operation.ReturnType.Type) : "void";
        string parameterDefinitions = operation.Parameters.Any() ? operation.Parameters.Select(x => Types.Get(x.Type) + " " + x.Name.ToCamelCase()).Aggregate((x, y) => x + ", " + y) : "";
		if (!operation.IsAbstract)
		{
            
            #line default
            #line hidden
            this.Write("        public ");
            
            #line 34 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 34 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 34 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterDefinitions));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n            throw new NotImplementedException(\"Replace with your im" +
                    "plementation...\");\r\n        }\r\n");
            
            #line 38 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
		}
		else
		{ 
            
            #line default
            #line hidden
            this.Write("        public abstract ");
            
            #line 41 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 41 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(operation.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 41 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameterDefinitions));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 42 "C:\Dev\Intent.OpenSource\Modules\Intent.Modules.Entities\Templates\DomainEntity\DomainEntityTemplate.tt"
		}
    }

            
            #line default
            #line hidden
            this.Write("    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
