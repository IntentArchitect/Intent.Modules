<#@ template  debug="true"  inherits="IntentRoslynProjectItemTemplateBase<IClass>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.MetaModel.Domain" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic"#>
using System;
using System.Collections.Generic;
using Intent.CodeGen;
<#= DependencyUsings #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
<#= InterfaceAnnotations(Model) #>
    public partial interface I<#= ClassName #><#= GetInterfaces(Model) #><#= Model.ParentClass != null ? string.Format(" : I{0}", Model.ParentClass.Name) : "" #>
    {
<#  foreach (var attribute in Model.Attributes.Where(CanWriteAttribute))
    {
		string attributeType = Types.Get(attribute.Type);
#>
<#= PropertyAnnotations(attribute) #>
        <#= attributeType #> <#= attribute.Name.ToPascalCase() #> { get; }
<#  }

	foreach (var associatedClass in Model.AssociatedClasses.Where(CanWriteAssociation))
    {#><#
		if (!associatedClass.IsNavigable) 
		{
			continue;
        }
#>
<#= PropertyAnnotations(associatedClass) #>
        <#= associatedClass.Type() #> <#= associatedClass.Name().ToPascalCase() #> { get; }
<#  }#>

<#  foreach (var operation in Model.Operations.Where(CanWriteOperation))
    {
        string returnType = operation.ReturnType != null ? Types.Get( operation.ReturnType.Type) : "void";
        string parameterDefinitions = operation.Parameters.Any() ? operation.Parameters.Select(x => Types.Get(x.Type) + " " + x.Name.ToCamelCase()).Aggregate((x, y) => x + ", " + y) : "";
#>
        <#= returnType #> <#= operation.Name.ToPascalCase() #>(<#= parameterDefinitions #>);
<#  }#>
    }
}
