<#@ template  debug="true"  inherits="CSharpTemplateBase<ClassModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.Modelers.Domain.Api" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic"#>
using System;
using System.Collections.Generic;
<#= DependencyUsings #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
<#= InterfaceAnnotations(Model) #>
    public partial interface <#= ClassName #><#= GetInterfaces(Model) #><#= Model.ParentClass != null ? string.Format(" : I{0}", Model.ParentClass.Name) : "" #>
    {
<#= BeforeProperties(Model) #><#  foreach (var attribute in Model.Attributes)
    {
#><#= PropertyBefore(attribute) #><#
        if (!CanWriteDefaultAttribute(attribute)) 
        {
            continue;
        }
        string attributeType = GetTypeName(attribute.Type);
#><#= PropertyAnnotations(attribute) #>
        <#= attributeType #> <#= attribute.Name.ToPascalCase() #> { <#= AttributeAccessors(attribute) #> }
<#  }

    foreach (var associatedClass in Model.AssociatedClasses)
    {
#><#= PropertyBefore(associatedClass) #><#
        if (!CanWriteDefaultAssociation(associatedClass) || !associatedClass.IsNavigable) 
        {
            continue;
        }
#><#= PropertyAnnotations(associatedClass) #>
        <#= GetTypeName(associatedClass) #> <#= associatedClass.Name().ToPascalCase() #> { <#= AssociationAccessors(associatedClass) #> }
<#  }#>

<#  foreach (var operation in Model.Operations)
    {
        if (!CanWriteDefaultOperation(operation)) 
        {
            continue;
        }
        string parameterDefinitions = operation.Parameters.Any() ? operation.Parameters.Select(x => Types.Get(x.TypeReference) + " " + x.Name.ToCamelCase()).Aggregate((x, y) => x + ", " + y) : "";#>
        <#= EmitOperationReturnType(operation) #> <#= operation.Name.ToPascalCase() #>(<#= GetParametersDefinition(operation) #>);

<#  }#>
    }
}
