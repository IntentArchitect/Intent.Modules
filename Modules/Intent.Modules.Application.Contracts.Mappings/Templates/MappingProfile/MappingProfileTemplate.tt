<#@ template debug="true" inherits="CSharpTemplateBase<IList<DTOModel>>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="Intent.Modelers.Services.Api" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#=DependencyUsings#>
using System.Runtime.Serialization;
using AutoMapper;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#=ClassName#> : Profile
    {
        public <#= ClassName #>()
        {
            // The intent is to have a separate method for each mapping profile, this allows independent use of profiles if desired,
            // for example for unit testing. Rather than try and make unique method names for the different profiles to create, we
            // instead configure each method to have the same name, but with different type overloads. We then use the default keyword
            // when calling the method to be passing in the correct type so that the compiler chooses the correct overload.
            
<#
    foreach (var model in Model) {
#>
            Configure(this, default(<#= NormalizeNamespace(GetSourceType(model))#>), default(<#= NormalizeNamespace(GetContractType(model))#>));
<#
    }
#>
        }
<#
    foreach (var model in Model)
    {
#>

        public static IMappingExpression<<#= NormalizeNamespace(GetSourceType(model)) #>, <#= NormalizeNamespace(GetContractType(model)) #>> Configure(IProfileExpression cfg, <#= NormalizeNamespace(GetSourceType(model)) #> sourceType, <#= NormalizeNamespace(GetContractType(model)) #> destinationType)
        {
            return cfg.CreateMap<<#=NormalizeNamespace(GetSourceType(model)) #>, <#= NormalizeNamespace(GetContractType(model)) #>>()
<#
        foreach (var field in model.Fields)
        {
            if (field.Mapping != null && field.Name.ToPascalCase() != GetPath(field.Mapping.Path))
            {
#>
                .ForMember(dest => dest.<#=field.Name.ToPascalCase()#>, opt => opt.MapFrom(src => src.<#=GetPath(field.Mapping.Path)#>))
<#
            }
        }
#>
                ;
        }
<#
    } //foreach
#>
    }
}
