<#@ template  debug="true"  inherits="Intent.SoftwareFactory.Templates.IntentRoslynProjectItemTemplateBase<IList<IDTOModel>>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.MetaModel.DTO" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

<#=DependencyUsings#>
using System.Runtime.Serialization;
using AutoMapper;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#=ClassName#> : Profile
    {
	
        public <#= ClassName #>()
        {		
			//using the default() to help the compiler to understand the overloading	
<# foreach (var model in Model) {#>
			Configure(this, default(<#= NormalizeNamespace(GetDomainType(model))#>), default(<#= NormalizeNamespace(GetContractType(model))#>));
<#}#>
		}

		
<# foreach (var model in Model) {#>
	    public static IMappingExpression<<#= NormalizeNamespace(GetDomainType(model)) #>, <#= NormalizeNamespace(GetContractType(model)) #>> Configure(IProfileExpression cfg, <#= NormalizeNamespace(GetDomainType(model)) #> sourceType, <#= NormalizeNamespace(GetContractType(model)) #> destinationType)
		{
            return cfg.CreateMap<<#=NormalizeNamespace(GetDomainType(model)) #>, <#= NormalizeNamespace(GetContractType(model)) #>>()
                //.IncludeBase<>()
<#foreach (var field in model.Fields){
	if (field.Mapping != null && field.Name != field.Mapping.Path){
#>
                .ForMember(dest => dest.<#=field.Name.ToPascalCase()#>, opt => opt.MapFrom(src => src.<#=ToPascalCasePath(field.Mapping.Path)#>))
<#	}#>
<#}#>
                ;
		}
<#}//foreach #>

	}
}

