<#@ template  debug="true"  inherits="CSharpTemplateBase<DTOModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="Intent.Modelers.Services.Api" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#=DependencyUsings#>
<#=DecoratorUsings#>
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using AutoMapper;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public static class <#=ClassName#> 
    {
        public static <#= NormalizeNamespace(ContractTypeName) #> MapTo<#= NormalizeNamespace(ContractTypeName) #> (this <#= NormalizeNamespace(SourceTypeName) #> projectFrom)
        {
            return Mapper.Map<<#= NormalizeNamespace(ContractTypeName) #>>(projectFrom);
        }

        public static List<<#= NormalizeNamespace(ContractTypeName) #>> MapTo<#= NormalizeNamespace(ContractTypeName) #>s (this IEnumerable<<#= NormalizeNamespace(SourceTypeName) #>> projectFrom)
        {
            return projectFrom.Select(x => x.MapTo<#= NormalizeNamespace(ContractTypeName) #>()).ToList();
        }<#= GetDecoratorMembers(ContractTypeName, SourceTypeName) #>
     }
}
