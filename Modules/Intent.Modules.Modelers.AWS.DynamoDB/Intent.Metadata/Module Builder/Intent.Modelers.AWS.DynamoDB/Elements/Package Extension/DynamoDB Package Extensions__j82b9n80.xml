<?xml version="1.0" encoding="utf-8"?>
<class id="66eb9607-2f8c-4594-9cc6-71bd8f1ee869" type="Package Extension" typeId="ab4152df-3add-4a08-81b6-0fefc7cbb204">
  <name>DynamoDB Package Extensions</name>
  <display>DynamoDB Package Extensions: AWS Serverless Package</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-by-name</sort-children>
  <genericTypes />
  <typeReference id="79720202-fa30-4b77-90a7-27846341f914">
    <typeId>a95a0fde-f67b-4e4a-b9a8-745021efbdb6</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Serverless.AWS</typePackageName>
    <typePackageId>d3eb98f4-3110-4a25-aef5-0b342f053b9d</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>f997dbf2-68b1-426f-9721-5c914a54fd34</parentFolderId>
  <packageId>65807b2e-f468-42d5-b6fe-0f48b692052d</packageId>
  <packageName>Intent.Modelers.AWS.DynamoDB</packageName>
  <stereotypes />
  <metadata />
  <childElements>
    <childElement id="a45e14d3-094b-41d8-99b1-44926e17fd27" type="Context Menu" typeId="d45e383d-90ba-4b64-aca7-34ca100cea21">
      <name>[context menu]</name>
      <display>[context menu]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-manually</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>66eb9607-2f8c-4594-9cc6-71bd8f1ee869</parentFolderId>
      <packageId>65807b2e-f468-42d5-b6fe-0f48b692052d</packageId>
      <packageName>Intent.Modelers.AWS.DynamoDB</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="5dbbdd8f-54ce-4010-8ee0-5bb2f6cf073a" type="Element Creation Option" typeId="5fa12f89-da1e-49c5-b8e9-427b22407f19">
          <name>New DynamoDB Table</name>
          <display>New DynamoDB Table: DynamoDB Table</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="4c651dd9-adef-4d87-85fe-c89ee26278b1">
            <typeId>b45fcd71-d5a3-48c7-9dd5-e6a138080bcf</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.Modelers.AWS.DynamoDB</typePackageName>
            <typePackageId>65807b2e-f468-42d5-b6fe-0f48b692052d</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>a45e14d3-094b-41d8-99b1-44926e17fd27</parentFolderId>
          <packageId>65807b2e-f468-42d5-b6fe-0f48b692052d</packageId>
          <packageName>Intent.Modelers.AWS.DynamoDB</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="f4250b35-559d-4c0b-91ee-c3d7aa239814" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="9df41a97-0a8b-42c6-9d95-becf3d6d1e0b" display="Shortcut" value="ctrl + alt + t" isActive="true" />
                <property name="5572d05e-dd37-47f6-944a-73710c07f4f1" display="Shortcut (macOS)" isActive="true" />
                <property name="ba8a3ecd-0f08-499e-bb5b-929d40f56a45" display="Default Name" value="Table" isActive="true" />
                <property name="A43F388B-DAFF-422C-BD8D-FB433EFEC51B" display="Type Order" isActive="true" />
                <property name="8e092aa6-7d1a-4a06-af82-903e7642cef6" display="Allow Multiple" value="true" isActive="true" />
                <property name="719e9dff-2b8d-407d-912d-fac99a158721" display="Api Model Name" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="8612e033-3bd6-40ec-a5b8-f629693afb01" type="Run Script Option" typeId="345d46fb-c500-409a-88c7-26720572c9af">
          <name>Create CRUD Operations</name>
          <display>Create CRUD Operations: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="22435b5b-79d6-42c3-ac5f-bab7067859ac">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>a45e14d3-094b-41d8-99b1-44926e17fd27</parentFolderId>
          <packageId>65807b2e-f468-42d5-b6fe-0f48b692052d</packageId>
          <packageName>Intent.Modelers.AWS.DynamoDB</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="async function dump(item) {&#xD;&#xA;    await dialogService.info(JSON.stringify(item, null, &quot;  &quot;));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;const types = {&#xD;&#xA;    endpoint: &quot;API Gateway Endpoint&quot;,&#xD;&#xA;    endpointTargetAssociation: &quot;API Gateway Route Integration&quot;,&#xD;&#xA;    lambda: &quot;Lambda Function&quot;,&#xD;&#xA;    dto: &quot;DTO&quot;,&#xD;&#xA;    dtoField: &quot;DTO-Field&quot;,&#xD;&#xA;    scalarAttribute: &quot;Scalar Attribute&quot;,&#xD;&#xA;    dynamoDbItem: &quot;DynamoDB Item&quot;,&#xD;&#xA;    parameter: &quot;Parameter&quot;,&#xD;&#xA;    guid: &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;,&#xD;&#xA;    requestBody: &quot;Request Body&quot;,&#xD;&#xA;    resourceAssociation: &quot;Resource Association&quot;&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;let defaultName = null;&#xD;&#xA;if (element?.id == null) {&#xD;&#xA;    await dump(element);&#xD;&#xA;    // For testing right-clicking on a package, substitute with package id:&#xD;&#xA;    element = { id: &quot;2fd9f4b9-fdb8-41c6-9f35-c3b6bdf56c33&quot; };&#xD;&#xA;    defaultName = &quot;Invoice&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let tableItem = await getTableItem(defaultName);&#xD;&#xA;if (tableItem == null) {&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;const name = toPascalCase(tableItem.getName());&#xD;&#xA;const pluralName = pluralize(name);&#xD;&#xA;const nameCamelCased = toCamelCase(tableItem.getName());&#xD;&#xA;const pluralNameCamelCased = pluralize(nameCamelCased);&#xD;&#xA;&#xD;&#xA;const metadata = {&#xD;&#xA;    key: &quot;CRUD Operation Type&quot;,&#xD;&#xA;    findById: `${tableItem.id}-findById`,&#xD;&#xA;    findAll: `${tableItem.id}-findAll`,&#xD;&#xA;    result: `${tableItem.id}-result`,&#xD;&#xA;    create: `${tableItem.id}-create`,&#xD;&#xA;    update: `${tableItem.id}-update`,&#xD;&#xA;    remove: `${tableItem.id}-remove`&#xD;&#xA;};&#xD;&#xA;&#xD;&#xA;const folder = getFolder(pluralize(tableItem.getName()), element.id);&#xD;&#xA;&#xD;&#xA;const tableItemFields = tableItem.getChildren(types.scalarAttribute);&#xD;&#xA;&#xD;&#xA;let resultDto = lookupTypesOf(types.dto).filter(x =&gt; hasCrudOperationType(x, metadata.result))[0];&#xD;&#xA;if (resultDto == null) {&#xD;&#xA;    resultDto = createElement(types.dto, `${tableItem.getName()}`, folder.id);&#xD;&#xA;    resultDto.setMetadata(metadata.key, metadata.result);&#xD;&#xA;    resultDto.setMapping(tableItem.id);&#xD;&#xA;&#xD;&#xA;    for (var i = 0; i &lt; tableItemFields.length; i++) {&#xD;&#xA;        const field = tableItemFields[i];&#xD;&#xA;        const dtoField = createElement(types.dtoField, field.getName(), resultDto.id);&#xD;&#xA;        dtoField.typeReference.setType(field.typeReference.typeId);&#xD;&#xA;        dtoField.typeReference.setIsNullable(field.typeReference.isNullable);&#xD;&#xA;        dtoField.typeReference.setIsCollection(field.typeReference.isCollection);&#xD;&#xA;        dtoField.setMapping(field.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    resultDto.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let createDto = lookupTypesOf(types.dto).filter(x =&gt; hasCrudOperationType(x, metadata.create))[0];&#xD;&#xA;if (createDto == null) {&#xD;&#xA;    createDto = createElement(types.dto, `${tableItem.getName()}Create`, folder.id);&#xD;&#xA;    createDto.setMetadata(metadata.key, metadata.create);&#xD;&#xA;    createDto.setMapping(tableItem.id);&#xD;&#xA;&#xD;&#xA;    for (var i = 0; i &lt; tableItemFields.length; i++) {&#xD;&#xA;        const field = tableItemFields[i];&#xD;&#xA;        if (field.getName() == &quot;id&quot;) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        const dtoField = createElement(types.dtoField, field.getName(), createDto.id);&#xD;&#xA;        dtoField.typeReference.setType(field.typeReference.typeId);&#xD;&#xA;        dtoField.typeReference.setIsNullable(field.typeReference.isNullable);&#xD;&#xA;        dtoField.typeReference.setIsCollection(field.typeReference.isCollection);&#xD;&#xA;        dtoField.setMapping(field.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    createDto.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let updateDto = lookupTypesOf(types.dto).filter(x =&gt; hasCrudOperationType(x, metadata.update))[0];&#xD;&#xA;if (updateDto == null) {&#xD;&#xA;    updateDto = createElement(types.dto, `${tableItem.getName()}Update`, folder.id);&#xD;&#xA;    updateDto.setMetadata(metadata.key, metadata.update);&#xD;&#xA;    updateDto.setMapping(tableItem.id);&#xD;&#xA;&#xD;&#xA;    for (var i = 0; i &lt; tableItemFields.length; i++) {&#xD;&#xA;        const field = tableItemFields[i];&#xD;&#xA;        const dtoField = createElement(types.dtoField, field.getName(), updateDto.id);&#xD;&#xA;        dtoField.typeReference.setType(field.typeReference.typeId);&#xD;&#xA;        dtoField.typeReference.setIsNullable(field.typeReference.isNullable);&#xD;&#xA;        dtoField.typeReference.setIsCollection(field.typeReference.isCollection);&#xD;&#xA;        dtoField.setMapping(field.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    updateDto.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// FindAll&#xD;&#xA;{&#xD;&#xA;    const metadataValue = metadata.findAll;&#xD;&#xA;    let endpoint = lookupTypesOf(types.endpoint).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (endpoint == null) {&#xD;&#xA;        endpoint = createElement(types.endpoint, `GET /${pluralNameCamelCased}`, folder.id);&#xD;&#xA;        endpoint.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Path&quot;).setValue(`/${pluralNameCamelCased}`);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Method&quot;).setValue(&quot;GET&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let lambda = lookupTypesOf(types.lambda).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (lambda == null) {&#xD;&#xA;        lambda = createElement(types.lambda, `Get${pluralName}`, folder.id);&#xD;&#xA;        lambda.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        lambda.typeReference.setType(resultDto.id);&#xD;&#xA;        lambda.typeReference.setIsCollection(true);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let association = endpoint.getAssociations(types.endpointTargetAssociation)[0];&#xD;&#xA;    if (association == null) {&#xD;&#xA;        createAssociation(types.endpointTargetAssociation, endpoint.id, lambda.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let resourceAssociation = endpoint.getAssociations(types.resourceAssociation)[0];&#xD;&#xA;    if (resourceAssociation == null) {&#xD;&#xA;        createAssociation(types.resourceAssociation, lambda.id, tableItem.getParent().id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    lambda.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// FindById&#xD;&#xA;{&#xD;&#xA;    const metadataValue = metadata.findById;&#xD;&#xA;    let endpoint = lookupTypesOf(types.endpoint).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (endpoint == null) {&#xD;&#xA;        endpoint = createElement(types.endpoint, `GET /${pluralNameCamelCased}/{id}`, folder.id);&#xD;&#xA;        endpoint.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Path&quot;).setValue(`/${pluralNameCamelCased}/{id}`);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Method&quot;).setValue(&quot;GET&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let lambda = lookupTypesOf(types.lambda).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (lambda == null) {&#xD;&#xA;        lambda = createElement(types.lambda, `Get${name}`, folder.id);&#xD;&#xA;        lambda.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        lambda.typeReference.setType(resultDto.id);&#xD;&#xA;        &#xD;&#xA;        const parameter = createElement(types.parameter, &quot;id&quot;, lambda.id);&#xD;&#xA;        parameter.typeReference.setType(types.guid);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let association = endpoint.getAssociations()[0];&#xD;&#xA;    if (association == null) {&#xD;&#xA;        createAssociation(types.endpointTargetAssociation, endpoint.id, lambda.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let resourceAssociation = endpoint.getAssociations(types.resourceAssociation)[0];&#xD;&#xA;    if (resourceAssociation == null) {&#xD;&#xA;        createAssociation(types.resourceAssociation, lambda.id, tableItem.getParent().id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    lambda.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Create&#xD;&#xA;{&#xD;&#xA;    const metadataValue = metadata.create;&#xD;&#xA;    let endpoint = lookupTypesOf(types.endpoint).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (endpoint == null) {&#xD;&#xA;        endpoint = createElement(types.endpoint, `POST /${pluralNameCamelCased}`, folder.id);&#xD;&#xA;        endpoint.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Path&quot;).setValue(`/${pluralNameCamelCased}`);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Method&quot;).setValue(&quot;POST&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let lambda = lookupTypesOf(types.lambda).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (lambda == null) {&#xD;&#xA;        lambda = createElement(types.lambda, `Create${name}`, folder.id);&#xD;&#xA;        lambda.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        lambda.typeReference.setType(types.guid);&#xD;&#xA;&#xD;&#xA;        const requestBody = createElement(types.requestBody, types.requestBody, lambda.id);&#xD;&#xA;        requestBody.typeReference.setType(createDto.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let association = endpoint.getAssociations()[0];&#xD;&#xA;    if (association == null) {&#xD;&#xA;        createAssociation(types.endpointTargetAssociation, endpoint.id, lambda.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let resourceAssociation = endpoint.getAssociations(types.resourceAssociation)[0];&#xD;&#xA;    if (resourceAssociation == null) {&#xD;&#xA;        createAssociation(types.resourceAssociation, lambda.id, tableItem.getParent().id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    lambda.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Update&#xD;&#xA;{&#xD;&#xA;    const metadataValue = metadata.update;&#xD;&#xA;    let endpoint = lookupTypesOf(types.endpoint).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (endpoint == null) {&#xD;&#xA;        endpoint = createElement(types.endpoint, `PUT /${pluralNameCamelCased}/{id}`, folder.id);&#xD;&#xA;        endpoint.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Path&quot;).setValue(`/${pluralNameCamelCased}/{id}`);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Method&quot;).setValue(&quot;PUT&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let lambda = lookupTypesOf(types.lambda).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (lambda == null) {&#xD;&#xA;        lambda = createElement(types.lambda, `Update${name}`, folder.id);&#xD;&#xA;        lambda.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        &#xD;&#xA;        const parameter = createElement(types.parameter, &quot;id&quot;, lambda.id);&#xD;&#xA;        parameter.typeReference.setType(types.guid);&#xD;&#xA;&#xD;&#xA;        const requestBody = createElement(types.requestBody, types.requestBody, lambda.id);&#xD;&#xA;        requestBody.typeReference.setType(updateDto.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let association = endpoint.getAssociations()[0];&#xD;&#xA;    if (association == null) {&#xD;&#xA;        createAssociation(types.endpointTargetAssociation, endpoint.id, lambda.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let resourceAssociation = endpoint.getAssociations(types.resourceAssociation)[0];&#xD;&#xA;    if (resourceAssociation == null) {&#xD;&#xA;        createAssociation(types.resourceAssociation, lambda.id, tableItem.getParent().id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    lambda.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Delete&#xD;&#xA;{&#xD;&#xA;    const metadataValue = metadata.remove;&#xD;&#xA;    let endpoint = lookupTypesOf(types.endpoint).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (endpoint == null) {&#xD;&#xA;        endpoint = createElement(types.endpoint, `DELETE /${pluralNameCamelCased}/{id}`, folder.id);&#xD;&#xA;        endpoint.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Path&quot;).setValue(`/${pluralNameCamelCased}/{id}`);&#xD;&#xA;        endpoint.getStereotype(&quot;API Gateway Endpoint Settings&quot;).getProperty(&quot;Method&quot;).setValue(&quot;DELETE&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let lambda = lookupTypesOf(types.lambda).filter(x =&gt; hasCrudOperationType(x, metadataValue))[0];&#xD;&#xA;    if (lambda == null) {&#xD;&#xA;        lambda = createElement(types.lambda, `Delete${name}`, folder.id);&#xD;&#xA;        lambda.setMetadata(metadata.key, metadataValue);&#xD;&#xA;        &#xD;&#xA;        const parameter = createElement(types.parameter, &quot;id&quot;, lambda.id);&#xD;&#xA;        parameter.typeReference.setType(types.guid);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let association = endpoint.getAssociations()[0];&#xD;&#xA;    if (association == null) {&#xD;&#xA;        createAssociation(types.endpointTargetAssociation, endpoint.id, lambda.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let resourceAssociation = endpoint.getAssociations(types.resourceAssociation)[0];&#xD;&#xA;    if (resourceAssociation == null) {&#xD;&#xA;        createAssociation(types.resourceAssociation, lambda.id, tableItem.getParent().id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    lambda.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function hasCrudOperationType(element, type) {&#xD;&#xA;    return element.getMetadata(&quot;CRUD Operation Type&quot;) === type;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getFolder(name, parentId) {&#xD;&#xA;    // Get or create folder in which to place everything:&#xD;&#xA;    let folder = lookupTypesOf(&quot;Folder&quot;).filter(x =&gt; x.name == name &amp;&amp; x.getParent().id === parentId)[0];&#xD;&#xA;    if (folder == null) {&#xD;&#xA;        folder = createElement(&quot;Folder&quot;, name, parentId);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return folder;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;async function getTableItem(defaultName) {&#xD;&#xA;    const items = lookupTypesOf(types.dynamoDbItem);&#xD;&#xA;    if (items.length === 0) {&#xD;&#xA;        await dialogService.info(`No ${typeName} elements available, create at least one and try again.`)&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let itemId = items.filter(x =&gt; defaultName != null &amp;&amp; defaultName == x.getName())[0]?.id;&#xD;&#xA;    if (itemId == null) {&#xD;&#xA;        itemId = await dialogService.lookupFromOptions(items);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (itemId == null) {&#xD;&#xA;        // Cancelled the dialogue?&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return lookup(itemId);&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
            <stereotype stereotypeDefinitionId="cbe77364-d1d0-400b-a8c4-646a4c869612" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="b2c3a117-23d3-47e5-8b83-5b902c55a226" display="Icon" isActive="true" />
                <property name="0abff08a-3986-40b1-a28f-4cc03c4fc1ec" display="Shortcut" value="ctrl + alt + c" isActive="true" />
                <property name="79f6973f-5e3a-4618-9d4c-d7cc604bffe0" display="Shortcut (macOS)" isActive="true" />
                <property name="e034a0ca-0101-4594-8384-43048b714578" display="Type Order" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>