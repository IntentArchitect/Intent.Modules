<#@ template language="C#" inherits="CSharpTemplateBase<Intent.ModuleBuilder.TypeScript.Api.TypescriptFileTemplateModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
using System;
using System.Collections.Generic;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Fully, Body = Mode.Merge)]
    public partial class <#= ClassName #>
    {
        [IntentManaged(Mode.Fully, Body = Mode.Ignore)]
        public override string TransformText()
        {
            return $@"export <#= IsForInterface() ? "interface" : "class" #> {ClassName} {{{string.Join(Environment.NewLine, GetMembers())}
}}
";
        }

        [IntentInitialGen] private IEnumerable<string> GetMembers()
        {
            var members = new List<string>();
<#  if (!IsForInterface()) { #>

            // example: adding a constructor
            members.Add($@"
    constructor() {{
    }}");
<#  }#>
            return members;
        }
    }
}