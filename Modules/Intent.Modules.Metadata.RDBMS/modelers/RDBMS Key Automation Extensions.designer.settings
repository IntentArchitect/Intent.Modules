<?xml version="1.0" encoding="utf-8"?>
<settings version="3.1.1">
  <id>ee1b6efd-1cc6-441c-a50e-edc50f5ac6a3</id>
  <name>RDBMS Key Automation Extensions</name>
  <designerReferences />
  <packageSettings />
  <packageExtensions>
    <packageExtension type="Domain Package" typeId="1a824508-4623-45d9-accc-f572091ade5a">
      <requiredPackages />
      <creationOptions />
      <scriptOptions />
      <typeOrder />
      <macros>
        <macro trigger="on-loaded">
          <script>let rdbmsDatabaseId = "51a7bcf5-0eb9-4c9a-855e-3ead1048729c";
if (!element.hasMetadata("rdbms-version") &amp;&amp; !element.hasStereotype(rdbmsDatabaseId)) {
    element.addStereotype(rdbmsDatabaseId);
}
element.setMetadata("rdbms-version", "3.5.0");
</script>
        </macro>
      </macros>
    </packageExtension>
  </packageExtensions>
  <elementSettings />
  <elementExtensions>
    <elementExtension type="Attribute" typeId="0090fb93-483e-41af-a11d-5ad2dc796adf">
      <mappingSettings />
      <macros>
        <macro trigger="on-changed">
          <script>if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit" || element.getParent().getMetadata("auto-manage-keys") == "false") {
    return;
}
let relationalDatabaseId = "51a7bcf5-0eb9-4c9a-855e-3ead1048729c"
if (!element.getPackage().hasStereotype(relationalDatabaseId)) {
    return;
}
if (element.getName().toLocaleLowerCase() == "id" &amp;&amp;
    element.hasStereotype("Primary Key") &amp;&amp;
    element.typeReference.getType()) {
    if (element.typeReference.getType()?.getName() != application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Type")?.value) {
        element.setMetadata("is-managed-key", "false");
    }
    else {
        element.setMetadata("is-managed-key", "true");
    }
}
const foreignKeyStereotypeId = "793a5128-57a1-440b-a206-af5722b752a6";
let associationTarget = element.getStereotype(foreignKeyStereotypeId)?.getProperty("Association")?.getValue();
if (associationTarget &amp;&amp; element.getMetadata("association") != associationTarget.id) {
    element.setMetadata("association", associationTarget.id);
}</script>
        </macro>
        <macro trigger="on-loaded">
          <script>let relationalDatabaseId = "51a7bcf5-0eb9-4c9a-855e-3ead1048729c"
if (!element.getPackage().hasStereotype(relationalDatabaseId)) {
    return;
}
const foreignKeyStereotypeId = "793a5128-57a1-440b-a206-af5722b752a6";
let associationTarget = element.getStereotype(foreignKeyStereotypeId)?.getProperty("Association Target")?.getValue();
let existingAssociation = element.getMetadata("association");
if (!associationTarget &amp;&amp; existingAssociation) {
    if (!element.hasStereotype(foreignKeyStereotypeId)) {
        element.addStereotype(foreignKeyStereotypeId);
    }
    let stereotype = element.getStereotype(foreignKeyStereotypeId);
    stereotype.getProperty("Association").setValue(existingAssociation);
}
if (existingAssociation &amp;&amp; !element.getMetadata("fk-original-name")) {
    element.setMetadata("fk-original-name", element.getName());
}</script>
        </macro>
      </macros>
    </elementExtension>
    <elementExtension type="Class" typeId="04e12b51-ed12-42a3-9667-a6aa81bb6d10">
      <mappingSettings />
      <macros>
        <macro trigger="on-created">
          <script>if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit" || element.getMetadata("auto-manage-keys") == "false") {
    return;
}
let relationalDatabaseId = "51a7bcf5-0eb9-4c9a-855e-3ead1048729c"
if (!element.getPackage().hasStereotype(relationalDatabaseId)) {
    return;
}
let pk = createElement("Attribute", "id", element.id);
pk.setOrder(0);
pk.typeReference.setType(getSurrogateKeyType());
pk.addStereotype("b99aac21-9ca4-467f-a3a6-046255a9eed6");
pk.setMetadata("is-managed-key", "true");
function getSurrogateKeyType() {
    const commonTypes = {
        guid: "6b649125-18ea-48fd-a6ba-0bfff0d8f488",
        long: "33013006-E404-48C2-AC46-24EF5A5774FD",
        int: "fb0a362d-e9e2-40de-b6ff-5ce8167cbe74"
    };
    const javaTypes = {
        long: "e9e575eb-f8de-4ce4-9838-2d09665a752d",
        int: "b3e5cb3b-8a26-4346-810b-9789afa25a82"
    };
    const typeNameToIdMap = new Map();
    typeNameToIdMap.set("guid", commonTypes.guid);
    typeNameToIdMap.set("int", lookup(javaTypes.int) != null ? javaTypes.int : commonTypes.int);
    typeNameToIdMap.set("long", lookup(javaTypes.long) != null ? javaTypes.long : commonTypes.long);
    let typeName = application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Type")?.value ?? "int";
    if (typeNameToIdMap.has(typeName)) {
        return typeNameToIdMap.get(typeName);
    }
    return typeNameToIdMap.get("guid");
}</script>
        </macro>
      </macros>
    </elementExtension>
  </elementExtensions>
  <associationSettings />
  <associationExtensions>
    <associationExtension type="Association" typeId="eaf9ed4e-0b61-4ac1-ba88-09f912c12087">
      <sourceEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </sourceEndExtension>
      <targetEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </targetEndExtension>
      <macros>
        <macro trigger="on-changed">
          <script>// This script was made using a Typescript source. Don't edit this script directly.
const foreignKeyStereotypeId = "793a5128-57a1-440b-a206-af5722b752a6";
if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit") {
    return;
}
let sourceEnd = association.getOtherEnd().typeReference;
let relationalDatabaseId = "51a7bcf5-0eb9-4c9a-855e-3ead1048729c"
if (!sourceEnd.getType().getPackage().hasStereotype(relationalDatabaseId)) {
    return;
}

let sourceType = lookup(association.getOtherEnd().typeReference.typeId);
let targetType = lookup(association.typeReference.typeId);
if (sourceType &amp;&amp; targetType) {
    if (requiresForeignKey(association) &amp;&amp; sourceType.getMetadata("auto-manage-keys") != "false") {
        updateForeignKeyAttribute(sourceType, targetType, association, association.id);
    }
    else if (requiresForeignKey(association.getOtherEnd()) &amp;&amp; targetType.getMetadata("auto-manage-keys") != "false") {
        updateForeignKeyAttribute(targetType, sourceType, association.getOtherEnd(), association.id);
    }
    else { // many-to-many
        if (targetType.getMetadata("auto-manage-keys") != "false") {
            targetType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
        }
        if (sourceType.getMetadata("auto-manage-keys") != "false") {
            sourceType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
        }
    }
}
function updateForeignKeyAttribute(startingEndType, destinationEndType, associationEnd, associationId) {
    let primaryKeyDict = getPrimaryKeysWithMapPath(destinationEndType);
    let primaryKeyObjects = Object.values(primaryKeyDict);
    let primaryKeysLen = primaryKeyObjects.length;
    primaryKeyObjects.forEach((pk, index) =&gt; {
        let fk = startingEndType.getChildren().filter(x =&gt; x.getMetadata("association") == associationId)[index] ||
            createElement("Attribute", "", startingEndType.id);
        // This check to avoid a loop where the Domain script is updating the conventions and this keeps renaming it back.
        let fkNameToUse = `${toCamelCase(associationEnd.getName())}${toPascalCase(pk.name)}`;
        if (fk.getName().toLocaleLowerCase() !== fkNameToUse.toLocaleLowerCase()) {
            if (!fk.hasMetadata("fk-original-name") || (fk.getMetadata("fk-original-name") == fk.getName())) {
                fk.setName(fkNameToUse);
                fk.setMetadata("fk-original-name", fk.getName());
            }
        }
        fk.setMetadata("association", associationId);
        fk.setMetadata("is-managed-key", "true");
        let fkStereotype = fk.getStereotype(foreignKeyStereotypeId);
        if (!fkStereotype) {
            fk.addStereotype(foreignKeyStereotypeId);
            fkStereotype = fk.getStereotype(foreignKeyStereotypeId);
        }
        fkStereotype.getProperty("Association").setValue(associationId);
        fk.typeReference.setType(pk.typeId);
        fk.typeReference.setIsNullable(associationEnd.typeReference.isNullable);
    });
    startingEndType.getChildren().filter(x =&gt; x.getMetadata("association") == associationId).forEach((attr, index) =&gt; {
        if (index &gt;= primaryKeysLen) {
            attr.delete();
        }
    });
    if (destinationEndType.id !== startingEndType.id &amp;&amp; destinationEndType.getMetadata("auto-manage-keys") != "false") {
        destinationEndType.getChildren().filter(x =&gt; x.getMetadata("association") == associationId).forEach(x =&gt; x.delete());
    }
}
function requiresForeignKey(associationEnd) {
    return isManyToVariantsOfOne(associationEnd) || isSelfReferencingZeroToOne(associationEnd);
}
function isManyToVariantsOfOne(associationEnd) {
    return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.getOtherEnd().typeReference.isCollection;
}
function isSelfReferencingZeroToOne(associationEnd) {
    return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.typeReference.isNullable &amp;&amp;
        associationEnd.typeReference.typeId == associationEnd.getOtherEnd().typeReference.typeId;
}
;
function getPrimaryKeysWithMapPath(entity) {
    let keydict = Object.create(null);
    let keys = entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"));
    let generalizations = entity.getAssociations("Generalization").filter(x =&gt; x.isTargetEnd());
    // There is a problem with execution order where this script executes before
    // the generalization script had a chance to potentially remove a PK attribute
    // and so I have to perform an inheritance check and ignore any PKs on derived classes.
    if (generalizations.length == 0) {
        keys.forEach(key =&gt; keydict[key.id] = {
            id: key.id,
            name: key.getName(),
            typeId: key.typeReference.typeId,
            mapPath: [key.id],
            isNullable: false,
            isCollection: false
        });
    }
    traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);
    return keydict;
    function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {
        if (!curEntity) {
            return;
        }
        let generalizations = curEntity.getAssociations("Generalization").filter(x =&gt; x.isTargetEnd());
        if (generalizations.length == 0) {
            return;
        }
        let generalization = generalizations[0];
        generalizationStack.push(generalization.id);
        let nextEntity = generalization.typeReference.getType();
        let baseKeys = nextEntity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"));
        baseKeys.forEach(key =&gt; {
            keydict[key.id] = {
                id: key.id,
                name: key.getName(),
                typeId: key.typeReference.typeId,
                mapPath: generalizationStack.concat([key.id]),
                isNullable: key.typeReference.isNullable,
                isCollection: key.typeReference.isCollection
            };
        });
        traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);
    }
}</script>
        </macro>
        <macro trigger="on-deleted">
          <script>let sourceEnd = association.getOtherEnd().typeReference;
let relationalDatabaseId = "51a7bcf5-0eb9-4c9a-855e-3ead1048729c"
if (!sourceEnd.getType().getPackage().hasStereotype(relationalDatabaseId)) {
    return;
}
let sourceType = lookup(association.getOtherEnd().typeReference.typeId);
let targetType = lookup(association.typeReference.typeId);
if (targetType &amp;&amp; targetType.getMetadata("auto-manage-keys") != "false") {
    targetType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
}
if (sourceType &amp;&amp; sourceType.getMetadata("auto-manage-keys") != "false") {
    sourceType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
}</script>
        </macro>
      </macros>
    </associationExtension>
    <associationExtension type="Generalization" typeId="5de35973-3ac7-4e65-b48c-385605aec561">
      <sourceEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </sourceEndExtension>
      <targetEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </targetEndExtension>
      <macros>
        <macro trigger="on-changed">
          <script>if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit") {
    return;
}
let sourceEnd = association.getOtherEnd().typeReference;
let relationalDatabaseId = "51a7bcf5-0eb9-4c9a-855e-3ead1048729c"
if (!sourceEnd.getType().getPackage().hasStereotype(relationalDatabaseId)) {
    return;
}
let sourceType = association.getOtherEnd().typeReference.getType();
let targetType = association.typeReference.getType();
if (sourceType.getMetadata("auto-manage-keys") == "false") {
    return;
}
if (sourceType &amp;&amp; targetType) {
    var pks = sourceType.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key") &amp;&amp; x.getMetadata("is-managed-key") == "true");
    pks.forEach(x =&gt; x.delete());
}</script>
        </macro>
        <macro trigger="on-deleted">
          <script>if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit") {
    return;
}
let sourceEnd = association.getOtherEnd().typeReference;
let relationalDatabaseId = "51a7bcf5-0eb9-4c9a-855e-3ead1048729c"
if (!sourceEnd.getType().getPackage().hasStereotype(relationalDatabaseId)) {
    return;
}
let sourceType = association.getOtherEnd().typeReference.getType();
let targetType = association.typeReference.getType();
if (sourceType.getMetadata("auto-manage-keys") == "false") {
    return;
}
if (sourceType &amp;&amp; targetType) {
    var pks = sourceType.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"));
    if (pks.length == 0) {
        let pk = createElement("Attribute", "id", sourceType.id.toString());
        pk.typeReference.setType(getSurrogateKeyType());
        pk.addStereotype("b99aac21-9ca4-467f-a3a6-046255a9eed6");
        pk.setMetadata("is-managed-key", "true");
        pk.setOrder(0);
    }
}
function getSurrogateKeyType() {
    const commonTypes = {
        guid: "6b649125-18ea-48fd-a6ba-0bfff0d8f488",
        long: "33013006-E404-48C2-AC46-24EF5A5774FD",
        int: "fb0a362d-e9e2-40de-b6ff-5ce8167cbe74"
    };
    const javaTypes = {
        long: "e9e575eb-f8de-4ce4-9838-2d09665a752d",
        int: "b3e5cb3b-8a26-4346-810b-9789afa25a82"
    };
    const typeNameToIdMap = new Map();
    typeNameToIdMap.set("guid", commonTypes.guid);
    typeNameToIdMap.set("int", lookup(javaTypes.int) != null ? javaTypes.int : commonTypes.int);
    typeNameToIdMap.set("long", lookup(javaTypes.long) != null ? javaTypes.long : commonTypes.long);
    let typeName = application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Type")?.value ?? "int";
    if (typeNameToIdMap.has(typeName)) {
        return typeNameToIdMap.get(typeName);
    }
    return typeNameToIdMap.get("guid");
}</script>
        </macro>
      </macros>
    </associationExtension>
  </associationExtensions>
</settings>