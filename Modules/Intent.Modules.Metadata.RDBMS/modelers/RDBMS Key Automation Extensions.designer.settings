<?xml version="1.0" encoding="utf-8"?>
<settings version="3.1.1">
  <id>ee1b6efd-1cc6-441c-a50e-edc50f5ac6a3</id>
  <name>RDBMS Key Automation Extensions</name>
  <designerReferences />
  <packageSettings />
  <packageExtensions />
  <elementSettings />
  <elementExtensions>
    <elementExtension type="Attribute" typeId="0090fb93-483e-41af-a11d-5ad2dc796adf">
      <mappingSettings />
      <macros>
        <macro trigger="on-changed">
          <script>if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit" || element.getParent().getMetadata("auto-manage-keys") == "false"){
    return;
}

if (element.getName().toLocaleLowerCase() == "id" &amp;&amp; 
    element.hasStereotype("Primary Key") &amp;&amp; 
    element.typeReference.getType()) {

    if (element.typeReference.getType()?.getName() != application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Type")?.value) {
        element.setMetadata("is-managed-key", "false");
    } else {
        element.setMetadata("is-managed-key", "true");
    }
}</script>
        </macro>
      </macros>
    </elementExtension>
    <elementExtension type="Class" typeId="04e12b51-ed12-42a3-9667-a6aa81bb6d10">
      <mappingSettings />
      <macros>
        <macro trigger="on-created">
          <script>if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit" || element.getMetadata("auto-manage-keys") == "false"){
    return;
}

function getSurrogateKeyType() {
    let keyType = application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9").getField("Key Type").value;
    if (keyType == "guid")
        return "6b649125-18ea-48fd-a6ba-0bfff0d8f488"; // guid id
    if (keyType == "int")
        return "fb0a362d-e9e2-40de-b6ff-5ce8167cbe74"; // int id
    if (keyType == "long")
        return "33013006-E404-48C2-AC46-24EF5A5774FD"; // long id
    return "6b649125-18ea-48fd-a6ba-0bfff0d8f488"; // guid id
}

let pk = createElement("Attribute", "id", element.id);
pk.setOrder(0);
pk.typeReference.setType(getSurrogateKeyType()); 
pk.addStereotype("b99aac21-9ca4-467f-a3a6-046255a9eed6");
pk.setMetadata("is-managed-key", "true");</script>
        </macro>
      </macros>
    </elementExtension>
  </elementExtensions>
  <associationSettings />
  <associationExtensions>
    <associationExtension type="Association" typeId="eaf9ed4e-0b61-4ac1-ba88-09f912c12087">
      <sourceEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </sourceEndExtension>
      <targetEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </targetEndExtension>
      <macros>
        <macro trigger="on-changed">
          <script>if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit"){
    return;
}

function requiresForeignKey(associationEnd)
{
    return isManyToVariantsOfOne(associationEnd) || isSelfReferencingZeroToOne(associationEnd);
}

function isManyToVariantsOfOne(associationEnd)
{
    return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.getOtherEnd().typeReference.isCollection;
}

function isSelfReferencingZeroToOne(associationEnd)
{
    return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.typeReference.isNullable &amp;&amp; 
            associationEnd.typeReference.typeId == associationEnd.getOtherEnd().typeReference.typeId;
}

let sourceType = lookup(association.getOtherEnd().typeReference.typeId);
let targetType = lookup(association.typeReference.typeId);

if (sourceType &amp;&amp; targetType) {

    if (requiresForeignKey(association) &amp;&amp; sourceType.getMetadata("auto-manage-keys") != "false") {
        let pks = targetType.getChildren("Attribute").filter(x =&gt; x.getStereotype("Primary Key") != null);
        pks.forEach((pk, index) =&gt; {
        let fk = sourceType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id)[index] ||
                 createElement("Attribute", "", sourceType.id);
            // This check to avoid a loop where the Domain script is updating the convensions and this keeps renaming it back.
            if (fk.getName().toLocaleLowerCase() !== `${ toCamelCase(association.getName())}${toPascalCase(pk.getName())}`.toLocaleLowerCase()) {
                fk.setName(`${ toCamelCase(association.getName())}${toPascalCase(pk.getName())}`);
            }
            fk.setMetadata("association", association.id);
            fk.setMetadata("is-managed-key", "true");
            if (!fk.hasStereotype("793a5128-57a1-440b-a206-af5722b752a6"))
                fk.addStereotype("793a5128-57a1-440b-a206-af5722b752a6");
            fk.typeReference.setType(pk.typeReference.typeId);
            fk.typeReference.setIsNullable(association.typeReference.isNullable);
        });
        sourceType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach((x, index) =&gt; {
            if (index &gt;= pks.length)
                x.delete();
        })
        if (targetType.id !== sourceType.id &amp;&amp; targetType.getMetadata("auto-manage-keys") != "false") {
            targetType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
        }
    }
    else if (requiresForeignKey(association.getOtherEnd()) &amp;&amp; targetType.getMetadata("auto-manage-keys") != "false") {
        let pks = sourceType.getChildren("Attribute").filter(x =&gt; x.getStereotype("Primary Key") != null);
        pks.forEach((pk, index) =&gt; {
        let fk = targetType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id)[index] ||
                 createElement("Attribute", "", targetType.id);
            // This check to avoid a loop where the Domain script is updating the convensions and this keeps renaming it back.
            if (fk.getName().toLocaleLowerCase() !== `${ toCamelCase(association.getOtherEnd().getName()) }${toPascalCase(pk.getName())}`.toLocaleLowerCase()) {
                fk.setName(`${ toCamelCase(association.getOtherEnd().getName()) }${toPascalCase(pk.getName())}`);
            }
            fk.setMetadata("association", association.id);
            fk.setMetadata("is-managed-key", "true");
            if (!fk.hasStereotype("793a5128-57a1-440b-a206-af5722b752a6"))
                fk.addStereotype("793a5128-57a1-440b-a206-af5722b752a6");
            fk.typeReference.setType(pk.typeReference.typeId);
            fk.typeReference.setIsNullable(association.getOtherEnd().typeReference.isNullable);
        });
        targetType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach((x, index) =&gt; {
            if (index &gt;= pks.length)
                x.delete();
        })
        if (sourceType.id !== targetType.id &amp;&amp; sourceType.getMetadata("auto-manage-keys") != "false") {
            sourceType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
        }
    }
    else { // many-to-many
        if (targetType.getMetadata("auto-manage-keys") != "false") {
            targetType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
        }
        if (sourceType.getMetadata("auto-manage-keys") != "false") {
            sourceType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
        }
    }
}</script>
        </macro>
        <macro trigger="on-deleted">
          <script>let sourceType = lookup(association.getOtherEnd().typeReference.typeId);
let targetType = lookup(association.typeReference.typeId);
if (targetType &amp;&amp; targetType.getMetadata("auto-manage-keys") != "false") {
    targetType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
}
if (sourceType &amp;&amp; sourceType.getMetadata("auto-manage-keys") != "false") {
    sourceType.getChildren().filter(x =&gt; x.getMetadata("association") == association.id).forEach(x =&gt; x.delete());
}
</script>
        </macro>
      </macros>
    </associationExtension>
    <associationExtension type="Generalization" typeId="5de35973-3ac7-4e65-b48c-385605aec561">
      <sourceEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </sourceEndExtension>
      <targetEndExtension>
        <typeReferenceExtension>
          <isRequired>true</isRequired>
          <targetTypes />
          <allowIsNavigable>inherit</allowIsNavigable>
          <allowIsNullable>inherit</allowIsNullable>
          <allowIsCollection>inherit</allowIsCollection>
        </typeReferenceExtension>
      </targetEndExtension>
      <macros>
        <macro trigger="on-changed">
          <script>if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit"){
    return;
}

let sourceType = association.getOtherEnd().typeReference.getType();
let targetType = association.typeReference.getType();

if (sourceType.getMetadata("auto-manage-keys") == "false") {
    return;
}

if (sourceType &amp;&amp; targetType) {
    var pks = sourceType.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key") &amp;&amp; x.getMetadata("is-managed-key") == "true");
    pks.forEach(x =&gt; x.delete());
}</script>
        </macro>
        <macro trigger="on-deleted">
          <script>if (application?.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Creation Mode")?.value != "explicit"){
    return;
}

let sourceType = association.getOtherEnd().typeReference.getType();
let targetType = association.typeReference.getType();

if (sourceType.getMetadata("auto-manage-keys") == "false") {
    return;
}

if (sourceType &amp;&amp; targetType) {
    var pks = sourceType.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"));
    if (pks.length == 0) {
        let keyType = application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9").getField("Key Type").value;

        let pk = createElement("Attribute", "id", sourceType.id.toString());
        if (keyType == "guid")
            pk.typeReference.setType("6b649125-18ea-48fd-a6ba-0bfff0d8f488"); // guid id
        if (keyType == "int")
            pk.typeReference.setType("fb0a362d-e9e2-40de-b6ff-5ce8167cbe74"); // int id
        if (keyType == "long")
            pk.typeReference.setType("33013006-E404-48C2-AC46-24EF5A5774FD"); // guid id
        pk.addStereotype("b99aac21-9ca4-467f-a3a6-046255a9eed6");
        pk.setMetadata("is-managed-key", "true");
        pk.setOrder(0);
    }
}</script>
        </macro>
      </macros>
    </associationExtension>
  </associationExtensions>
</settings>