<?xml version="1.0" encoding="utf-8"?>
<class id="783c1402-6c4e-4a01-979c-f128dded8162" type="Association Extension" typeId="41cb9c1a-063e-4ff4-889a-7501235351eb">
  <name>Association Key Extension</name>
  <display>Association Key Extension: Association</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="e2f30809-c62b-4634-989e-e87a991ea61b">
    <typeId>eaf9ed4e-0b61-4ac1-ba88-09f912c12087</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Domain</typePackageName>
    <typePackageId>6572b98d-5e13-4d4b-9ffc-820057da974e</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>ee1b6efd-1cc6-441c-a50e-edc50f5ac6a3</parentFolderId>
  <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
  <packageName>Intent.Metadata.RDBMS</packageName>
  <stereotypes />
  <metadata />
  <childElements>
    <childElement id="4c4ed48c-e50e-4501-bef0-9f13d3bc3de7" type="Association Source End Extension" typeId="66ec1dcd-a0c3-45ac-ad62-f2d9d7064bb3">
      <name>[source]</name>
      <display>[source end extension]</display>
      <isAbstract>false</isAbstract>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>783c1402-6c4e-4a01-979c-f128dded8162</parentFolderId>
      <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
      <packageName>Intent.Metadata.RDBMS</packageName>
      <stereotypes>
        <stereotype stereotypeDefinitionId="1cd7ee9e-614e-4770-a831-d6cdaa56027c" name="Association End Extension Settings">
          <addedByDefault>true</addedByDefault>
          <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
          <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
          <properties>
            <property name="e7d1e8c5-6748-4f56-8a92-4f413b598412" display="Display Name" isActive="true" />
            <property name="f957891b-3aef-48b2-9241-71c8a45a8fbb" display="Hint" isActive="true" />
            <property name="05d63939-2d01-4b12-8bcf-d6751c7c32b8" display="Target Types" isActive="true" />
            <property name="ced53770-7796-42de-850e-5cd523e368f9" display="Default Type Id" isActive="true" />
            <property name="585f6851-b6a5-4d39-9804-256cefcb10ab" display="Allow Navigable" value="Inherit" isActive="true" />
            <property name="c5da195d-90af-4d23-9a62-6aca60a9b304" display="Allow Nullable" value="Inherit" isActive="true" />
            <property name="558c27e8-dc8b-40ae-8633-fd42f0077268" display="Allow Collection" value="Inherit" isActive="true" />
          </properties>
        </stereotype>
      </stereotypes>
      <metadata />
      <childElements />
    </childElement>
    <childElement id="72b34000-1a77-4920-ba25-bdeb36c5f30c" type="Association Target End Extension" typeId="1cc6c731-af5f-41a0-9e82-44486f45b903">
      <name>[destination]</name>
      <display>[target end extension]</display>
      <isAbstract>false</isAbstract>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>783c1402-6c4e-4a01-979c-f128dded8162</parentFolderId>
      <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
      <packageName>Intent.Metadata.RDBMS</packageName>
      <stereotypes>
        <stereotype stereotypeDefinitionId="1cd7ee9e-614e-4770-a831-d6cdaa56027c" name="Association End Extension Settings">
          <addedByDefault>true</addedByDefault>
          <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
          <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
          <properties>
            <property name="e7d1e8c5-6748-4f56-8a92-4f413b598412" display="Display Name" isActive="true" />
            <property name="f957891b-3aef-48b2-9241-71c8a45a8fbb" display="Hint" isActive="true" />
            <property name="05d63939-2d01-4b12-8bcf-d6751c7c32b8" display="Target Types" isActive="true" />
            <property name="ced53770-7796-42de-850e-5cd523e368f9" display="Default Type Id" isActive="true" />
            <property name="585f6851-b6a5-4d39-9804-256cefcb10ab" display="Allow Navigable" value="Inherit" isActive="true" />
            <property name="c5da195d-90af-4d23-9a62-6aca60a9b304" display="Allow Nullable" value="Inherit" isActive="true" />
            <property name="558c27e8-dc8b-40ae-8633-fd42f0077268" display="Allow Collection" value="Inherit" isActive="true" />
          </properties>
        </stereotype>
      </stereotypes>
      <metadata />
      <childElements />
    </childElement>
    <childElement id="020efba7-1f08-4d95-99d6-267bfd7ca2f2" type="Association Event Settings" typeId="1bdee938-8569-4fbf-84b4-8522d2cbee32">
      <name>[events]</name>
      <display>[events]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-by-name</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>783c1402-6c4e-4a01-979c-f128dded8162</parentFolderId>
      <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
      <packageName>Intent.Metadata.RDBMS</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="a4da6921-2d0c-4171-812b-accdb77d8ac1" type="Association Event Handler" typeId="f9b3e6fd-3c51-4ed9-b214-cb7f5fc1cf7c">
          <name>On Changed</name>
          <display>On Changed: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="4ab359f1-d083-457d-8b5e-c8d5b0bbc3ca">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>020efba7-1f08-4d95-99d6-267bfd7ca2f2</parentFolderId>
          <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
          <packageName>Intent.Metadata.RDBMS</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="1f88f1ac-b96a-4ae7-9047-883c2fa3b3df" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="d418d372-ae82-4852-81b1-20b78a26eb6c" display="Script" value="// This script was made using a Typescript source. Don't edit this script directly.&#xD;&#xA;const foreignKeyStereotypeId = &quot;793a5128-57a1-440b-a206-af5722b752a6&quot;;&#xD;&#xA;if (application?.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)?.getField(&quot;Key Creation Mode&quot;)?.value != &quot;explicit&quot;) {&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;let sourceEnd = association.getOtherEnd().typeReference;&#xD;&#xA;let relationalDatabaseId = &quot;51a7bcf5-0eb9-4c9a-855e-3ead1048729c&quot;&#xD;&#xA;if (!sourceEnd.getType().getPackage().hasStereotype(relationalDatabaseId)) {&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let sourceType = lookup(association.getOtherEnd().typeReference.typeId);&#xD;&#xA;let targetType = lookup(association.typeReference.typeId);&#xD;&#xA;if (sourceType.specialization != &quot;Class&quot; || targetType.specialization != &quot;Class&quot;) {&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;if (sourceType &amp;&amp; targetType) {&#xD;&#xA;    if (requiresForeignKey(association) &amp;&amp; sourceType.getMetadata(&quot;auto-manage-keys&quot;) != &quot;false&quot;) {&#xD;&#xA;        updateForeignKeyAttribute(sourceType, targetType, association, association.id);&#xD;&#xA;    }&#xD;&#xA;    else if (requiresForeignKey(association.getOtherEnd()) &amp;&amp; targetType.getMetadata(&quot;auto-manage-keys&quot;) != &quot;false&quot;) {&#xD;&#xA;        updateForeignKeyAttribute(targetType, sourceType, association.getOtherEnd(), association.id);&#xD;&#xA;    }&#xD;&#xA;    else { // many-to-many&#xD;&#xA;        if (targetType.getMetadata(&quot;auto-manage-keys&quot;) != &quot;false&quot;) {&#xD;&#xA;            targetType.getChildren().filter(x =&gt; x.getMetadata(&quot;association&quot;) == association.id).forEach(x =&gt; x.delete());&#xD;&#xA;        }&#xD;&#xA;        if (sourceType.getMetadata(&quot;auto-manage-keys&quot;) != &quot;false&quot;) {&#xD;&#xA;            sourceType.getChildren().filter(x =&gt; x.getMetadata(&quot;association&quot;) == association.id).forEach(x =&gt; x.delete());&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function updateForeignKeyAttribute(startingEndType, destinationEndType, associationEnd, associationId) {&#xD;&#xA;    let primaryKeyDict = getPrimaryKeysWithMapPath(destinationEndType);&#xD;&#xA;    let primaryKeyObjects = Object.values(primaryKeyDict);&#xD;&#xA;    let primaryKeysLen = primaryKeyObjects.length;&#xD;&#xA;    primaryKeyObjects.forEach((pk, index) =&gt; {&#xD;&#xA;        let fk = startingEndType.getChildren().filter(x =&gt; x.getMetadata(&quot;association&quot;) == associationId)[index] ||&#xD;&#xA;            createElement(&quot;Attribute&quot;, &quot;&quot;, startingEndType.id);&#xD;&#xA;        // This check to avoid a loop where the Domain script is updating the conventions and this keeps renaming it back.&#xD;&#xA;        let fkNameToUse = `${toCamelCase(associationEnd.getName())}${toPascalCase(pk.name)}`;&#xD;&#xA;        if (fk.getName().toLocaleLowerCase() !== fkNameToUse.toLocaleLowerCase()) {&#xD;&#xA;            if (!fk.hasMetadata(&quot;fk-original-name&quot;) || (fk.getMetadata(&quot;fk-original-name&quot;) == fk.getName())) {&#xD;&#xA;                fk.setName(fkNameToUse);&#xD;&#xA;                fk.setMetadata(&quot;fk-original-name&quot;, fk.getName());&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        fk.setMetadata(&quot;association&quot;, associationId);&#xD;&#xA;        fk.setMetadata(&quot;is-managed-key&quot;, &quot;true&quot;);&#xD;&#xA;        let fkStereotype = fk.getStereotype(foreignKeyStereotypeId);&#xD;&#xA;        if (!fkStereotype) {&#xD;&#xA;            fk.addStereotype(foreignKeyStereotypeId);&#xD;&#xA;            fkStereotype = fk.getStereotype(foreignKeyStereotypeId);&#xD;&#xA;        }&#xD;&#xA;        fkStereotype.getProperty(&quot;Association&quot;).setValue(associationId);&#xD;&#xA;        fk.typeReference.setType(pk.typeId);&#xD;&#xA;        fk.typeReference.setIsNullable(associationEnd.typeReference.isNullable);&#xD;&#xA;    });&#xD;&#xA;    startingEndType.getChildren().filter(x =&gt; x.getMetadata(&quot;association&quot;) == associationId).forEach((attr, index) =&gt; {&#xD;&#xA;        if (index &gt;= primaryKeysLen) {&#xD;&#xA;            attr.delete();&#xD;&#xA;        }&#xD;&#xA;    });&#xD;&#xA;    if (destinationEndType.id !== startingEndType.id &amp;&amp; destinationEndType.getMetadata(&quot;auto-manage-keys&quot;) != &quot;false&quot;) {&#xD;&#xA;        destinationEndType.getChildren().filter(x =&gt; x.getMetadata(&quot;association&quot;) == associationId).forEach(x =&gt; x.delete());&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function requiresForeignKey(associationEnd) {&#xD;&#xA;    return isManyToVariantsOfOne(associationEnd) || isSelfReferencingZeroToOne(associationEnd);&#xD;&#xA;}&#xD;&#xA;function isManyToVariantsOfOne(associationEnd) {&#xD;&#xA;    return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.getOtherEnd().typeReference.isCollection;&#xD;&#xA;}&#xD;&#xA;function isSelfReferencingZeroToOne(associationEnd) {&#xD;&#xA;    return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.typeReference.isNullable &amp;&amp;&#xD;&#xA;        associationEnd.typeReference.typeId == associationEnd.getOtherEnd().typeReference.typeId;&#xD;&#xA;}&#xD;&#xA;;&#xD;&#xA;function getPrimaryKeysWithMapPath(entity) {&#xD;&#xA;    let keydict = Object.create(null);&#xD;&#xA;    let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;    let generalizations = entity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;    // There is a problem with execution order where this script executes before&#xD;&#xA;    // the generalization script had a chance to potentially remove a PK attribute&#xD;&#xA;    // and so I have to perform an inheritance check and ignore any PKs on derived classes.&#xD;&#xA;    if (generalizations.length == 0) {&#xD;&#xA;        keys.forEach(key =&gt; keydict[key.id] = {&#xD;&#xA;            id: key.id,&#xD;&#xA;            name: key.getName(),&#xD;&#xA;            typeId: key.typeReference.typeId,&#xD;&#xA;            mapPath: [key.id],&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);&#xD;&#xA;    return keydict;&#xD;&#xA;    function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        baseKeys.forEach(key =&gt; {&#xD;&#xA;            keydict[key.id] = {&#xD;&#xA;                id: key.id,&#xD;&#xA;                name: key.getName(),&#xD;&#xA;                typeId: key.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                isNullable: key.typeReference.isNullable,&#xD;&#xA;                isCollection: key.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="206c7a88-d13e-464a-8cb9-a1cb9c134dd2" type="Association Event Handler" typeId="f9b3e6fd-3c51-4ed9-b214-cb7f5fc1cf7c">
          <name>On Deleted</name>
          <display>On Deleted: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="f186fb76-5d1f-40d2-a35b-3cfa92b27661">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>020efba7-1f08-4d95-99d6-267bfd7ca2f2</parentFolderId>
          <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
          <packageName>Intent.Metadata.RDBMS</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="1f88f1ac-b96a-4ae7-9047-883c2fa3b3df" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="d418d372-ae82-4852-81b1-20b78a26eb6c" display="Script" value="let sourceEnd = association.getOtherEnd().typeReference;&#xD;&#xA;let relationalDatabaseId = &quot;51a7bcf5-0eb9-4c9a-855e-3ead1048729c&quot;&#xD;&#xA;if (!sourceEnd.getType().getPackage().hasStereotype(relationalDatabaseId)) {&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;let sourceType = lookup(association.getOtherEnd().typeReference.typeId);&#xD;&#xA;let targetType = lookup(association.typeReference.typeId);&#xD;&#xA;if (sourceType.specialization != &quot;Class&quot; || targetType.specialization != &quot;Class&quot;) {&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;if (targetType &amp;&amp; targetType.getMetadata(&quot;auto-manage-keys&quot;) != &quot;false&quot;) {&#xD;&#xA;    targetType.getChildren().filter(x =&gt; x.getMetadata(&quot;association&quot;) == association.id).forEach(x =&gt; x.delete());&#xD;&#xA;}&#xD;&#xA;if (sourceType &amp;&amp; sourceType.getMetadata(&quot;auto-manage-keys&quot;) != &quot;false&quot;) {&#xD;&#xA;    sourceType.getChildren().filter(x =&gt; x.getMetadata(&quot;association&quot;) == association.id).forEach(x =&gt; x.delete());&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>