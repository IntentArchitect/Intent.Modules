<?xml version="1.0" encoding="utf-8"?>
<class id="1da42774-fe46-4bde-b372-75d70e5bce45" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Attribute Key Extension</name>
  <display>Attribute Key Extension: Attribute</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="17e67977-793c-438a-a365-3b9823020a05">
    <typeId>0090fb93-483e-41af-a11d-5ad2dc796adf</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Domain</typePackageName>
    <typePackageId>6572b98d-5e13-4d4b-9ffc-820057da974e</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>ee1b6efd-1cc6-441c-a50e-edc50f5ac6a3</parentFolderId>
  <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
  <packageName>Intent.Metadata.RDBMS</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" isActive="false" />
        <property name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
    <stereotype stereotypeDefinitionId="312eab00-f6db-492e-bbb4-e41383c8d3d8" name="Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="8c964307-9d03-4a14-9fd3-40ea2607955a" display="Display Text Function" value="" isActive="true" />
        <property name="996ed45f-2318-4587-9618-73db3d7cfed0" display="Validate Function" value="" isActive="true" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="73a27efb-3700-4bbb-a0b6-9e77da44c472" type="Element Event Settings" typeId="3c628ab0-2407-4fb0-8507-ddde986cff2e">
      <name>NewElementEventSettings</name>
      <display>[events]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-by-name</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>1da42774-fe46-4bde-b372-75d70e5bce45</parentFolderId>
      <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
      <packageName>Intent.Metadata.RDBMS</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="591ee4d9-7c47-4703-97b6-f9df45a0d417" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Changed</name>
          <display>On Changed: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="ff613fec-1c4e-4935-8fdb-2f9adc53dd54">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>73a27efb-3700-4bbb-a0b6-9e77da44c472</parentFolderId>
          <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
          <packageName>Intent.Metadata.RDBMS</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="function getSurrogateKeyType() {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const commonTypes = {&#xD;&#xA;        guid: &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;,&#xD;&#xA;        long: &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;,&#xD;&#xA;        int: &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;&#xD;&#xA;    };&#xD;&#xA;    const javaTypes = {&#xD;&#xA;        long: &quot;e9e575eb-f8de-4ce4-9838-2d09665a752d&quot;,&#xD;&#xA;        int: &quot;b3e5cb3b-8a26-4346-810b-9789afa25a82&quot;&#xD;&#xA;    };&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, commonTypes.guid);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, lookup(javaTypes.int) != null ? javaTypes.int : commonTypes.int);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, lookup(javaTypes.long) != null ? javaTypes.long : commonTypes.long);&#xD;&#xA;    let typeName = (_c = (_b = (_a = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Key Type&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;const primaryKeyStereotypeId = &quot;b99aac21-9ca4-467f-a3a6-046255a9eed6&quot;;&#xD;&#xA;const relationalDatabaseId = &quot;51a7bcf5-0eb9-4c9a-855e-3ead1048729c&quot;;&#xD;&#xA;const foreignKeyStereotypeId = &quot;793a5128-57a1-440b-a206-af5722b752a6&quot;;&#xD;&#xA;const foreignKeyStereotypeAssociationProperty = &quot;Association&quot;;&#xD;&#xA;const metadataKey = {&#xD;&#xA;    isManagedKey: &quot;is-managed-key&quot;,&#xD;&#xA;    autoManageKeys: &quot;auto-manage-keys&quot;,&#xD;&#xA;    association: &quot;association&quot;,&#xD;&#xA;    isBeingDeletedByScript: &quot;is-being-deleted-by-script&quot;&#xD;&#xA;};&#xD;&#xA;/// &lt;reference path=&quot;../../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../../common/getSurrogateKeyType.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../_common/constants.ts&quot; /&gt;&#xD;&#xA;function execute() {&#xD;&#xA;    var _a, _b, _c, _d, _e;&#xD;&#xA;    if (((_b = (_a = application === null || application === void 0 ? void 0 : application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Key Creation Mode&quot;)) === null || _b === void 0 ? void 0 : _b.value) != &quot;explicit&quot; ||&#xD;&#xA;        element.getParent().getMetadata(metadataKey.autoManageKeys) === &quot;false&quot; ||&#xD;&#xA;        element.getPackage().specialization !== &quot;Domain Package&quot; ||&#xD;&#xA;        !element.getPackage().hasStereotype(relationalDatabaseId)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    if (element.getName().toLocaleLowerCase() == &quot;id&quot; &amp;&amp;&#xD;&#xA;        element.hasStereotype(&quot;Primary Key&quot;) &amp;&amp;&#xD;&#xA;        element.typeReference.getType()) {&#xD;&#xA;        if (((_c = element.typeReference.getType()) === null || _c === void 0 ? void 0 : _c.id) != getSurrogateKeyType()) {&#xD;&#xA;            element.setMetadata(metadataKey.isManagedKey, &quot;false&quot;);&#xD;&#xA;        }&#xD;&#xA;        else {&#xD;&#xA;            element.setMetadata(metadataKey.isManagedKey, &quot;true&quot;);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    let associationTarget = (_e = (_d = element.getStereotype(foreignKeyStereotypeId)) === null || _d === void 0 ? void 0 : _d.getProperty(foreignKeyStereotypeAssociationProperty)) === null || _e === void 0 ? void 0 : _e.getValue();&#xD;&#xA;    if (associationTarget &amp;&amp; element.getMetadata(metadataKey.association) != associationTarget.id) {&#xD;&#xA;        element.setMetadata(metadataKey.association, associationTarget.id);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;execute();&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="406c816f-9df1-4a6e-a27e-c9fd21b1226a" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Deleted</name>
          <display>On Deleted: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="817e5d02-b1f5-4843-af2c-f44048243c9f">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>73a27efb-3700-4bbb-a0b6-9e77da44c472</parentFolderId>
          <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
          <packageName>Intent.Metadata.RDBMS</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="const primaryKeyStereotypeId = &quot;b99aac21-9ca4-467f-a3a6-046255a9eed6&quot;;&#xD;&#xA;const relationalDatabaseId = &quot;51a7bcf5-0eb9-4c9a-855e-3ead1048729c&quot;;&#xD;&#xA;const foreignKeyStereotypeId = &quot;793a5128-57a1-440b-a206-af5722b752a6&quot;;&#xD;&#xA;const foreignKeyStereotypeAssociationProperty = &quot;Association&quot;;&#xD;&#xA;const metadataKey = {&#xD;&#xA;    isManagedKey: &quot;is-managed-key&quot;,&#xD;&#xA;    autoManageKeys: &quot;auto-manage-keys&quot;,&#xD;&#xA;    association: &quot;association&quot;,&#xD;&#xA;    isBeingDeletedByScript: &quot;is-being-deleted-by-script&quot;&#xD;&#xA;};&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const commonTypes = {&#xD;&#xA;        guid: &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;,&#xD;&#xA;        long: &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;,&#xD;&#xA;        int: &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;&#xD;&#xA;    };&#xD;&#xA;    const javaTypes = {&#xD;&#xA;        long: &quot;e9e575eb-f8de-4ce4-9838-2d09665a752d&quot;,&#xD;&#xA;        int: &quot;b3e5cb3b-8a26-4346-810b-9789afa25a82&quot;&#xD;&#xA;    };&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, commonTypes.guid);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, lookup(javaTypes.int) != null ? javaTypes.int : commonTypes.int);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, lookup(javaTypes.long) != null ? javaTypes.long : commonTypes.long);&#xD;&#xA;    let typeName = (_c = (_b = (_a = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Key Type&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;/**&#xD;&#xA; * Applies camelCasing or PascalCasing naming convention according to the setting configured for the current application.&#xD;&#xA; */&#xD;&#xA;function applyAttributeNamingConvention(str) {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    let convention = (_c = (_b = (_a = application.getSettings(&quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Attribute Naming Convention&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;pascal-case&quot;;&#xD;&#xA;    switch (convention) {&#xD;&#xA;        case &quot;pascal-case&quot;:&#xD;&#xA;            return toPascalCase(str);&#xD;&#xA;        case &quot;camel-case&quot;:&#xD;&#xA;            return toCamelCase(str);&#xD;&#xA;    }&#xD;&#xA;    return str;&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../../common/getSurrogateKeyType.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../../common/applyAttributeNamingConvention.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../_common/constants.ts&quot; /&gt;&#xD;&#xA;function updateForeignKeys(thisEnd) {&#xD;&#xA;    var _a, _b;&#xD;&#xA;    if (((_b = (_a = application === null || application === void 0 ? void 0 : application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Key Creation Mode&quot;)) === null || _b === void 0 ? void 0 : _b.value) != &quot;explicit&quot;) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    let otherEnd = thisEnd.getOtherEnd();&#xD;&#xA;    if (!otherEnd.typeReference.getType().getPackage().hasStereotype(relationalDatabaseId)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    let thisEndType = thisEnd.getOtherEnd().typeReference.getType();&#xD;&#xA;    let otherEndType = thisEnd.typeReference.getType();&#xD;&#xA;    if ((thisEndType === null || thisEndType === void 0 ? void 0 : thisEndType.specialization) !== &quot;Class&quot; || (otherEndType === null || otherEndType === void 0 ? void 0 : otherEndType.specialization) !== &quot;Class&quot;) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    const targetEndId = thisEnd.isTargetEnd() ? thisEnd.id : otherEnd.id;&#xD;&#xA;    if (requiresForeignKey(thisEnd)) {&#xD;&#xA;        updateForeignKeyAttribute(thisEnd, thisEndType, otherEndType, targetEndId);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    thisEndType.getChildren()&#xD;&#xA;        .filter(x =&gt; x.getMetadata(metadataKey.association) == targetEndId)&#xD;&#xA;        .forEach(x =&gt; {&#xD;&#xA;        x.setMetadata(metadataKey.isBeingDeletedByScript, &quot;true&quot;);&#xD;&#xA;        x.delete();&#xD;&#xA;    });&#xD;&#xA;    function updateForeignKeyAttribute(thisEnd, thisEndType, otherEndType, targetEndId) {&#xD;&#xA;        const pkAttributes = getPrimaryKeys(otherEndType);&#xD;&#xA;        pkAttributes.forEach((pk, index) =&gt; {&#xD;&#xA;            var _a;&#xD;&#xA;            let fkAttribute = (_a = thisEndType.getChildren().filter(x =&gt; x.getMetadata(metadataKey.association) == targetEndId)[index]) !== null &amp;&amp; _a !== void 0 ? _a : createElement(&quot;Attribute&quot;, &quot;&quot;, thisEndType.id);&#xD;&#xA;            // This check to avoid a loop where the Domain script is updating the conventions and this keeps renaming it back.&#xD;&#xA;            let fkNameToUse = `${toCamelCase(thisEnd.getName())}${toPascalCase(pk.name)}`;&#xD;&#xA;            if (fkAttribute.getName().toLocaleLowerCase() !== fkNameToUse.toLocaleLowerCase()) {&#xD;&#xA;                if (!fkAttribute.hasMetadata(&quot;fk-original-name&quot;) || (fkAttribute.getMetadata(&quot;fk-original-name&quot;) == fkAttribute.getName())) {&#xD;&#xA;                    fkAttribute.setName(fkNameToUse);&#xD;&#xA;                    fkAttribute.setMetadata(&quot;fk-original-name&quot;, fkAttribute.getName());&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            fkAttribute.setMetadata(metadataKey.association, targetEndId);&#xD;&#xA;            fkAttribute.setMetadata(metadataKey.isManagedKey, &quot;true&quot;);&#xD;&#xA;            let fkStereotype = fkAttribute.getStereotype(foreignKeyStereotypeId);&#xD;&#xA;            if (fkStereotype == null) {&#xD;&#xA;                fkAttribute.addStereotype(foreignKeyStereotypeId);&#xD;&#xA;                fkStereotype = fkAttribute.getStereotype(foreignKeyStereotypeId);&#xD;&#xA;            }&#xD;&#xA;            fkStereotype.getProperty(foreignKeyStereotypeAssociationProperty).setValue(thisEnd.isTargetEnd() ? thisEnd.id : thisEnd.getOtherEnd().id);&#xD;&#xA;            fkAttribute.typeReference.setType(pk.typeId);&#xD;&#xA;            fkAttribute.typeReference.setIsNullable(thisEnd.typeReference.isNullable);&#xD;&#xA;        });&#xD;&#xA;        thisEndType.getChildren().filter(x =&gt; x.getMetadata(metadataKey.association) == targetEndId).forEach((attr, index) =&gt; {&#xD;&#xA;            if (index &gt;= pkAttributes.length) {&#xD;&#xA;                attr.setMetadata(metadataKey.isBeingDeletedByScript, &quot;true&quot;);&#xD;&#xA;                attr.delete();&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;        if (otherEndType.id !== thisEndType.id) {&#xD;&#xA;            otherEndType.getChildren()&#xD;&#xA;                .filter(x =&gt; x.getMetadata(metadataKey.association) == targetEndId)&#xD;&#xA;                .forEach(x =&gt; {&#xD;&#xA;                x.setMetadata(metadataKey.isBeingDeletedByScript, &quot;true&quot;);&#xD;&#xA;                x.delete();&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    function requiresForeignKey(associationEnd) {&#xD;&#xA;        return isManyToVariantsOfOne(associationEnd) || isSelfReferencingZeroToOne(associationEnd);&#xD;&#xA;    }&#xD;&#xA;    function isManyToVariantsOfOne(associationEnd) {&#xD;&#xA;        return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.getOtherEnd().typeReference.isCollection;&#xD;&#xA;    }&#xD;&#xA;    function isSelfReferencingZeroToOne(associationEnd) {&#xD;&#xA;        return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.typeReference.isNullable &amp;&amp;&#xD;&#xA;            associationEnd.typeReference.typeId == associationEnd.getOtherEnd().typeReference.typeId;&#xD;&#xA;    }&#xD;&#xA;    function getPrimaryKeys(element) {&#xD;&#xA;        let currentClass = element;&#xD;&#xA;        while ((currentClass === null || currentClass === void 0 ? void 0 : currentClass.specialization) === &quot;Class&quot;) {&#xD;&#xA;            const pkAttributes = currentClass.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(primaryKeyStereotypeId));&#xD;&#xA;            if (pkAttributes.length &gt; 0) {&#xD;&#xA;                return pkAttributes.map(x =&gt; ({ name: x.getName(), typeId: x.typeReference.getTypeId() }));&#xD;&#xA;            }&#xD;&#xA;            const derivedTypes = currentClass&#xD;&#xA;                .getAssociations(&quot;Generalization&quot;)&#xD;&#xA;                .filter(generalization =&gt; generalization.isTargetEnd())&#xD;&#xA;                .map(generalization =&gt; generalization.typeReference.getType());&#xD;&#xA;            if (derivedTypes.length &gt; 1) {&#xD;&#xA;                console.error(`Could not compute possible foreign keys as &quot;${currentClass.getName()}&quot; [${currentClass.id}] is derived from more than one class.`);&#xD;&#xA;                return [createImplicitPrimaryKey()];&#xD;&#xA;            }&#xD;&#xA;            currentClass = derivedTypes[0];&#xD;&#xA;            if ((currentClass === null || currentClass === void 0 ? void 0 : currentClass.id) === (element === null || element === void 0 ? void 0 : element.id)) {&#xD;&#xA;                console.error(`Could not compute possible foreign keys as &quot;${element.getName()}&quot; [${element.id}] has cyclic inheritance.`);&#xD;&#xA;                return [createImplicitPrimaryKey()];&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        return [createImplicitPrimaryKey()];&#xD;&#xA;        function createImplicitPrimaryKey() {&#xD;&#xA;            return {&#xD;&#xA;                name: applyAttributeNamingConvention(&quot;Id&quot;),&#xD;&#xA;                typeId: getSurrogateKeyType()&#xD;&#xA;            };&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../_common/constants.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../_common/updateForeignKeys.ts&quot; /&gt;&#xD;&#xA;function execute() {&#xD;&#xA;    if (element.hasMetadata(metadataKey.isBeingDeletedByScript) ||&#xD;&#xA;        !element.hasMetadata(metadataKey.isManagedKey) ||&#xD;&#xA;        !element.getPackage().hasStereotype(relationalDatabaseId)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    const classElement = element.getParent();&#xD;&#xA;    if (element.hasStereotype(primaryKeyStereotypeId)) {&#xD;&#xA;        classElement.setMetadata(metadataKey.autoManageKeys, &quot;false&quot;);&#xD;&#xA;    }&#xD;&#xA;    for (const association of classElement.getAssociations(&quot;Association&quot;)) {&#xD;&#xA;        updateForeignKeys(association.getOtherEnd());&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;execute();&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="04920764-3513-43fe-aed8-ffc4a1271f56" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Loaded</name>
          <display>On Loaded: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="aab57f1f-03de-4b2f-aa84-c54f62367199">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>73a27efb-3700-4bbb-a0b6-9e77da44c472</parentFolderId>
          <packageId>AF8F3810-745C-42A2-93C8-798860DC45B1</packageId>
          <packageName>Intent.Metadata.RDBMS</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="const primaryKeyStereotypeId = &quot;b99aac21-9ca4-467f-a3a6-046255a9eed6&quot;;&#xD;&#xA;const relationalDatabaseId = &quot;51a7bcf5-0eb9-4c9a-855e-3ead1048729c&quot;;&#xD;&#xA;const foreignKeyStereotypeId = &quot;793a5128-57a1-440b-a206-af5722b752a6&quot;;&#xD;&#xA;const foreignKeyStereotypeAssociationProperty = &quot;Association&quot;;&#xD;&#xA;const metadataKey = {&#xD;&#xA;    isManagedKey: &quot;is-managed-key&quot;,&#xD;&#xA;    autoManageKeys: &quot;auto-manage-keys&quot;,&#xD;&#xA;    association: &quot;association&quot;,&#xD;&#xA;    isBeingDeletedByScript: &quot;is-being-deleted-by-script&quot;&#xD;&#xA;};&#xD;&#xA;/// &lt;reference path=&quot;../../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../_common/constants.ts&quot; /&gt;&#xD;&#xA;function execute() {&#xD;&#xA;    var _a, _b;&#xD;&#xA;    if (element.getPackage().specialization !== &quot;Domain Package&quot; ||&#xD;&#xA;        !element.getPackage().hasStereotype(relationalDatabaseId)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    const associationTarget = (_b = (_a = element.getStereotype(foreignKeyStereotypeId)) === null || _a === void 0 ? void 0 : _a.getProperty(foreignKeyStereotypeAssociationProperty)) === null || _b === void 0 ? void 0 : _b.getValue();&#xD;&#xA;    associationTarget.isSourceEnd();&#xD;&#xA;    associationTarget.getOtherEnd().id;&#xD;&#xA;    const existingAssociation = element.getMetadata(metadataKey.association);&#xD;&#xA;    if (associationTarget == null &amp;&amp; existingAssociation != null) {&#xD;&#xA;        if (!element.hasStereotype(foreignKeyStereotypeId)) {&#xD;&#xA;            element.addStereotype(foreignKeyStereotypeId);&#xD;&#xA;        }&#xD;&#xA;        const stereotype = element.getStereotype(foreignKeyStereotypeId);&#xD;&#xA;        stereotype.getProperty(foreignKeyStereotypeAssociationProperty).setValue(existingAssociation);&#xD;&#xA;    }&#xD;&#xA;    if (existingAssociation &amp;&amp; !element.getMetadata(&quot;fk-original-name&quot;)) {&#xD;&#xA;        element.setMetadata(&quot;fk-original-name&quot;, element.getName());&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;execute();&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>