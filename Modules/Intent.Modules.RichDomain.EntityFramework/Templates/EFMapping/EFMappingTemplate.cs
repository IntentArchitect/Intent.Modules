// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.RichDomain.EntityFramework.Templates.EFMapping
{
    using Intent.SoftwareFactory.MetaModels.UMLModel;
    using Intent.Modules.Common.Templates;
    using Intent.Modules.RichDomain;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class EFMappingTemplate : IntentRoslynProjectItemTemplateBase<Class>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(" \r\n\r\n");
            
            #line 16 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
//Some initial validation
    foreach (var associationEnd in Model.Associations)
    {
        var association = associationEnd.Association;
        
        //if there is more than 1 parent association && there are any which are not 0..1->1 (this is a manual inheritance mapping)
        if ((Model.Associations.Where(ae => ae.Association.AssociationType == AssociationType.Composite &&  ae.Association.ChildEnd == ae).Count() > 1)
            && (Model.Associations.Where(ae => ae.Association.AssociationType == AssociationType.Composite &&  ae.Association.ChildEnd == ae && ae.Association.RelationshipString() != "0..1->1").Count() > 0)
            )
        {
            throw new Exception(string.Format("Unsupported Mapping, multiple composite parents to {0} ", Model.Name));            
        }

        if (!association.ParentEnd.Navigable)
        {
            throw new Exception(string.Format("Unsupported Parent Needs to be Navigable to Child relationship  {0} on {1} ", association.ToString(), association.ChildEnd.Class.Name));
        }

        //Unsupported Associations
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->0..1"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship  {0} - this relationship implies composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->1"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship  {0} - this relationship implies composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->*"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship {0}, this relationship implies Composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composite ) && ( association.RelationshipString() == "0..1->0..1"))
        {
            throw new Exception(string.Format("Unsupported composite relationship {0}", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composite ) && ( association.RelationshipString() == "0..1->*"))
        {
            throw new Exception(string.Format("Unsupported composite relationship {0}, this relationship implies aggregation", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composite ) && ( association.RelationshipString().StartsWith("*->")))
        {
            throw new Exception(string.Format("Unsupported composite relationship {0}, this relationship implies aggregation", association.ToString()));
        }
        //Naviagability Requirement
        if ((association.AssociationType == AssociationType.Composite ) && ( association.RelationshipString() == "0..1->1") && (!association.ParentEnd.Navigable))
        {
            throw new Exception(string.Format("Unsupported. IsNavigable from Composite Required for composite relationship {0}", association.ToString()));
        }
    }


            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Data.Entity.ModelConfiguration;\r\nusing System.Data.En" +
                    "tity.Infrastructure.Annotations;\r\nusing System.ComponentModel.DataAnnotations.Sc" +
                    "hema;\r\nusing Intent.Framework.EntityFramework.Mapping;\r\n");
            
            #line 72 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DependencyUsings));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 76 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public partial class ");
            
            #line 78 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Mapping : EntityTypeConfiguration<");
            
            #line 78 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write(">\r\n    {\r\n    \r\n        public ");
            
            #line 81 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Mapping()\r\n        {\r\n");
            
            #line 83 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    if (Model.ParentClass == null || Model.ParentClass.Stereotypes.GetTagValue<string>("InheritanceMapping", "Type") != "TPH")
    {
            
            #line default
            #line hidden
            this.Write("            this.ToTable(\"");
            
            #line 85 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.TableName()));
            
            #line default
            #line hidden
            this.Write("\", \"");
            
            #line 85 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.BoundedContext()));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 86 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    }
    if (Model.Stereotypes.GetTagValue<string>("InheritanceMapping", "Type") == "TPH")
    {
        foreach (var subClass in Model.SubClasses)
        {

            
            #line default
            #line hidden
            this.Write("            this.Map<");
            
            #line 92 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subClass.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write(">(m => m.Requires(\"DbSpecialization\").HasValue((int)");
            
            #line 92 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Specialization.");
            
            #line 92 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(subClass.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("));\r\n");
            
            #line 93 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
      }
    }
    //Key Mapping
    if (Model.IsSubClass() && Model.ParentClass.Stereotypes.GetTagValue<string>("InheritanceMapping", "Type") == "TPH")    
    {
        //No Key mapping required
    } 
    else 
    {
        bool doneKey = false;
        foreach (var assocaitionEnd in Model.Associations)
        {
            /*if (assocaitionEnd.Association.RelationshipString() == "1->*" && assocaitionEnd == assocaitionEnd.Association.ChildEnd)
            {
            
            #line default
            #line hidden
            this.Write("            this.HasKey(x => new { x.Id, x.");
            
            #line 107 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(assocaitionEnd.Association.ChildEnd.IdentifierName()));
            
            #line default
            #line hidden
            this.Write(" });\r\n            this.Property(x => x.Id).HasColumnName(\"");
            
            #line 108 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.PrimaryKeys().First()));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 109 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                doneKey = true;
            }*/
        }
        if (!doneKey)
        {

            
            #line default
            #line hidden
            this.Write("            this.HasKey(x => x.Id);\r\n            this.Property(x => x.Id).HasColu" +
                    "mnName(\"");
            
            #line 116 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.PrimaryKeys().First()));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 117 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
        }
    }
    
    foreach (var attribute in Model.Attributes)
    {
        if (attribute.IsAssociationAttribute)
            continue;
            
            #line default
            #line hidden
            this.Write("            this.Property(x => x.");
            
            #line 124 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 124 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

        if (attribute.Stereotypes.GetTagValue("UniqueConstraint", "IsIndex", false)){ 
            
            #line default
            #line hidden
            this.Write("\r\n                .HasColumnAnnotation(\"Index\", new IndexAnnotation( new IndexAtt" +
                    "ribute(\"");
            
            #line 127 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 127 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Stereotypes.GetTagValue("UniqueConstraint", "UniqueKey", "Unique1")));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 127 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Stereotypes.GetTagValue("UniqueConstraint", "Order", "1")));
            
            #line default
            #line hidden
            this.Write(") { IsUnique = true }))");
            
            #line 127 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

        }
		if (!string.IsNullOrEmpty(attribute.Stereotypes.GetTagValue("Index", "UniqueKey", "")))
		{
            
            #line default
            #line hidden
            this.Write("\r\n                .HasColumnAnnotation(\"Index\", new IndexAnnotation(new []\r\n     " +
                    "               {\r\n");
            
            #line 134 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
			foreach(var index in attribute.Stereotypes.Where(x => x.Name == "Index")) { 
            
            #line default
            #line hidden
            this.Write("                        new IndexAttribute(\"");
            
            #line 135 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 135 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetTagValue("UniqueKey", "Unique1")));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 135 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetTagValue("Order", "1")));
            
            #line default
            #line hidden
            this.Write(") { IsUnique = ");
            
            #line 135 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(index.GetTagValue("IsUnique", "false")));
            
            #line default
            #line hidden
            this.Write(" },\r\n");
            
            #line 136 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

			}
            
            #line default
            #line hidden
            this.Write("                    }))");
            
            #line 138 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

        }
        if (attribute.IsMandatory){
            
            #line default
            #line hidden
            this.Write("\r\n                .IsRequired()");
            
            #line 142 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

        }

        if (attribute.Type == "string" )
        {
            var maxLength = attribute.Stereotypes.GetTagValue<int?>("Text", "MaxLength");    
            if (maxLength.HasValue){
        
            
            #line default
            #line hidden
            this.Write("\r\n                .HasMaxLength(");
            
            #line 151 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(maxLength.Value));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 151 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

            }
        }

        var decimalPrecision = attribute.Stereotypes.GetTagValue<int?>("Numeric", "Precision");
        var decimalScale = attribute.Stereotypes.GetTagValue<int?>("Numeric", "Scale");
        if (decimalPrecision.HasValue && decimalScale.HasValue){
            
            #line default
            #line hidden
            this.Write("\r\n                .HasPrecision(");
            
            #line 159 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(decimalPrecision));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 159 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(decimalScale));
            
            #line default
            #line hidden
            this.Write(")");
            
            #line 159 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

        }
        switch (attribute.Type)
        {
            case "date" :
            
            #line default
            #line hidden
            this.Write("\r\n                .HasColumnType(\"date\")");
            
            #line 165 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

                break;
            case "datetime" :
            
            #line default
            #line hidden
            this.Write("\r\n                .HasColumnType(\"datetime2\")");
            
            #line 169 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

                break;
        }    

            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 174 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
  }
            
            #line default
            #line hidden
            
            #line 175 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    foreach (var associationEnd in Model.Associations)
    {

        if (associationEnd.OtherAssociationEnd().Multiplicity == Multiplicity.Many && associationEnd.Multiplicity == Multiplicity.One)
        {
            
            #line default
            #line hidden
            this.Write("            this.Property(x => x.");
            
            #line 180 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.IdentifierName()));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 181 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            if (associationEnd.Stereotypes.GetTagValue("UniqueConstraint", "IsIndex", false)){ 
            
            #line default
            #line hidden
            this.Write("\r\n                .HasColumnAnnotation(\"Index\", new IndexAnnotation( new IndexAtt" +
                    "ribute(\"");
            
            #line 183 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 183 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Stereotypes.GetTagValue("UniqueConstraint", "UniqueKey", "Unique1")));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 183 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Stereotypes.GetTagValue("UniqueConstraint", "Order", "1")));
            
            #line default
            #line hidden
            this.Write(") { IsUnique = true }))");
            
            #line 183 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

            }
            if (!string.IsNullOrEmpty(associationEnd.Stereotypes.GetTagValue("Index", "UniqueKey", ""))){
            
            #line default
            #line hidden
            this.Write("\r\n                .HasColumnAnnotation(\"Index\", new IndexAnnotation( new IndexAtt" +
                    "ribute(\"");
            
            #line 187 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("_");
            
            #line 187 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Stereotypes.GetTagValue("Index", "UniqueKey", "Unique1")));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 187 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Stereotypes.GetTagValue("Index", "Order", "1")));
            
            #line default
            #line hidden
            this.Write(") { IsUnique = false }))");
            
            #line 187 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

            }
            
            #line default
            #line hidden
            this.Write("                ;\r\n");
            
            #line 190 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
        }
        if (associationEnd.AssociationType != AssociationType.Association)
        {
            switch (associationEnd.RelationshipType)
            {
                case RelationshipType.OneToOne :
                    MapOneToOne(associationEnd);
                    break;
                case RelationshipType.OneToMany :
            
            #line default
            #line hidden
            this.Write("            ");
            
            #line 199 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("this.{0}(x => x.{1})", associationEnd.IsMandatory() ? "HasRequired" : "HasOptional", associationEnd.Name().ToPascalCase())));
            
            #line default
            #line hidden
            this.Write("\r\n                .WithMany(");
            
            #line 200 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherAssociationEnd().Navigable ? "x => x." + associationEnd.OtherAssociationEnd().Name().ToPascalCase() : ""));
            
            #line default
            #line hidden
            this.Write(")\r\n                .HasForeignKey(x => x.");
            
            #line 201 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Id)\r\n                ;\r\n\r\n");
            
            #line 204 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    break;
                case RelationshipType.ManyToOne :
            
            #line default
            #line hidden
            this.Write("            this.HasMany(x => x.");
            
            #line 206 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write(")\r\n                .");
            
            #line 207 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("{0}({1})", associationEnd.OtherAssociationEnd().IsMandatory() ? "WithRequired" : "WithOptional", "x => x." + associationEnd.OtherAssociationEnd().Name().ToPascalCase())));
            
            #line default
            #line hidden
            this.Write("\r\n                .HasForeignKey(x => x.");
            
            #line 208 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherAssociationEnd().Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Id)\r\n                ;\r\n\r\n");
            
            #line 211 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    break;
                case RelationshipType.ManyToMany :
            
            #line default
            #line hidden
            this.Write("            this.HasMany(x => x.");
            
            #line 213 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write(")\r\n                .WithMany(");
            
            #line 214 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherAssociationEnd().Navigable ? "x => x." + associationEnd.OtherAssociationEnd().Name().ToPascalCase() : ""));
            
            #line default
            #line hidden
            this.Write(")\r\n                .Map(m => \r\n                    {\r\n                        m.T" +
                    "oTable(\"");
            
            #line 217 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherAssociationEnd().Class.Name.ToPascalCase() + associationEnd.Name().ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("\");\r\n                        m.MapLeftKey(\"");
            
            #line 218 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.OtherAssociationEnd().Class.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Id\");\r\n                        m.MapRightKey(\"");
            
            #line 219 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Class.Name.ToPascalCase()));
            
            #line default
            #line hidden
            this.Write("Id\");\r\n                    });\r\n\r\n");
            
            #line 222 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
                    break;
            }
        }
    }

            
            #line default
            #line hidden
            
            #line 226 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PropertyMappings(Model)));
            
            #line default
            #line hidden
            
            #line 226 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    
	if (Model.IsAggregateRoot() && !Model.IsSubClass()) 
    {
            
            #line default
            #line hidden
            this.Write(@"            this.Property(x => x.CreateDateTime)
                .HasColumnType(""datetime2"");
            this.Property(x => x.UpdateDateTime)
                .HasColumnType(""datetime2"");
            this.Property(x => x.UpdatedBy)
                .HasMaxLength(50);
            this.Property(x => x.Version)
                .IsRowVersion()
                .HasColumnName(""Version"");
");
            
            #line 238 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
  }
            
            #line default
            #line hidden
            this.Write("        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 242 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"

public void MapOneToOne(AssociationEnd associationEnd)
{
    AssociationEnd parent = associationEnd.Association.ParentEnd;
    AssociationEnd child = associationEnd.Association.ChildEnd;

    string hasClause = associationEnd.IsMandatory() ? "HasRequired" : "HasOptional";
    string withClause = "With" + (associationEnd.OtherAssociationEnd().IsMandatory() ? "Required" : "Optional") + (associationEnd.IsMandatory() == associationEnd.OtherAssociationEnd().IsMandatory() ?  DeterminePrinciple(associationEnd)  : "");    

        
        #line default
        #line hidden
        
        #line 250 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("            ");

        
        #line default
        #line hidden
        
        #line 251 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Format("this.{0}(x => x.{1})", hasClause, associationEnd.Name().ToPascalCase())));

        
        #line default
        #line hidden
        
        #line 251 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("\r\n            ");

        
        #line default
        #line hidden
        
        #line 252 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Format(".{0}({1})", withClause, associationEnd.OtherAssociationEnd().Navigable ? "x => x." + associationEnd.OtherAssociationEnd().Name().ToPascalCase(): "" )));

        
        #line default
        #line hidden
        
        #line 252 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("\r\n");

        
        #line default
        #line hidden
        
        #line 253 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
  if ((associationEnd.Association.AssociationType == AssociationType.Composite && associationEnd.Association.RelationshipString() == "0..1->1")
            || (associationEnd.Association.AssociationType == AssociationType.Aggregation && associationEnd.Association.RelationshipString() == "0..1->1")
        )
    {
        
        #line default
        #line hidden
        
        #line 256 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("            .Map(m => m.MapKey(\"");

        
        #line default
        #line hidden
        
        #line 257 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(associationEnd.Name().ToPascalCase() + "Id"));

        
        #line default
        #line hidden
        
        #line 257 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("\"))\r\n");

        
        #line default
        #line hidden
        
        #line 258 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    }
        
        #line default
        #line hidden
        
        #line 258 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
this.Write("            ;\r\n");

        
        #line default
        #line hidden
        
        #line 260 "C:\Dev\Intent.Modules\Modules\Intent.Modules.RichDomain.EntityFramework\Templates\EFMapping\EFMappingTemplate.tt"
    
}

public string DeterminePrinciple(AssociationEnd associationEnd)
{
    if (associationEnd.AssociationType == AssociationType.Composite || associationEnd.OtherAssociationEnd().AssociationType == AssociationType.Aggregation)
    {
        return "Principal";
    }
    if (associationEnd.AssociationType == AssociationType.Aggregation || associationEnd.OtherAssociationEnd().AssociationType == AssociationType.Composite)
    {
        return "Dependent";
    }
    return "";
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
