<?xml version="1.0" encoding="utf-8"?>
<class id="84298280-29cc-4d20-80e7-33b169128436" type="Association Extension" typeId="41cb9c1a-063e-4ff4-889a-7501235351eb">
  <name>Association Extension</name>
  <display>Association Extension: Association</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="124496c3-7c0b-41d2-808a-cd0205c4155d">
    <typeId>eaf9ed4e-0b61-4ac1-ba88-09f912c12087</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Domain</typePackageName>
    <typePackageId>6572b98d-5e13-4d4b-9ffc-820057da974e</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>4652d8dc-eea5-49cb-8c08-93ac1972962c</parentFolderId>
  <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
  <packageName>Intent.Metadata.DocumentDB</packageName>
  <stereotypes />
  <metadata />
  <childElements>
    <childElement id="3c684c08-1051-4ea0-aec9-f1b91f9efc3a" type="Association Source End Extension" typeId="66ec1dcd-a0c3-45ac-ad62-f2d9d7064bb3">
      <name>[source]</name>
      <display>[source end extension]</display>
      <isAbstract>false</isAbstract>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>84298280-29cc-4d20-80e7-33b169128436</parentFolderId>
      <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
      <packageName>Intent.Metadata.DocumentDB</packageName>
      <stereotypes>
        <stereotype stereotypeDefinitionId="1cd7ee9e-614e-4770-a831-d6cdaa56027c" name="Association End Extension Settings">
          <addedByDefault>true</addedByDefault>
          <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
          <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
          <properties>
            <property name="e7d1e8c5-6748-4f56-8a92-4f413b598412" display="Display Name" isActive="true" />
            <property name="f957891b-3aef-48b2-9241-71c8a45a8fbb" display="Hint" isActive="true" />
            <property name="05d63939-2d01-4b12-8bcf-d6751c7c32b8" display="Target Types" isActive="true" />
            <property name="ced53770-7796-42de-850e-5cd523e368f9" display="Default Type Id" isActive="true" />
            <property name="585f6851-b6a5-4d39-9804-256cefcb10ab" display="Allow Navigable" value="Inherit" isActive="true" />
            <property name="c5da195d-90af-4d23-9a62-6aca60a9b304" display="Allow Nullable" value="Inherit" isActive="true" />
            <property name="558c27e8-dc8b-40ae-8633-fd42f0077268" display="Allow Collection" value="Inherit" isActive="true" />
          </properties>
        </stereotype>
      </stereotypes>
      <metadata />
      <childElements />
    </childElement>
    <childElement id="4a238edc-8ae3-4b2f-8f78-1c1704a01dd0" type="Association Target End Extension" typeId="1cc6c731-af5f-41a0-9e82-44486f45b903">
      <name>[destination]</name>
      <display>[target end extension]</display>
      <isAbstract>false</isAbstract>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>84298280-29cc-4d20-80e7-33b169128436</parentFolderId>
      <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
      <packageName>Intent.Metadata.DocumentDB</packageName>
      <stereotypes>
        <stereotype stereotypeDefinitionId="1cd7ee9e-614e-4770-a831-d6cdaa56027c" name="Association End Extension Settings">
          <addedByDefault>true</addedByDefault>
          <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
          <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
          <properties>
            <property name="e7d1e8c5-6748-4f56-8a92-4f413b598412" display="Display Name" isActive="true" />
            <property name="f957891b-3aef-48b2-9241-71c8a45a8fbb" display="Hint" isActive="true" />
            <property name="05d63939-2d01-4b12-8bcf-d6751c7c32b8" display="Target Types" isActive="true" />
            <property name="ced53770-7796-42de-850e-5cd523e368f9" display="Default Type Id" isActive="true" />
            <property name="585f6851-b6a5-4d39-9804-256cefcb10ab" display="Allow Navigable" value="Inherit" isActive="true" />
            <property name="c5da195d-90af-4d23-9a62-6aca60a9b304" display="Allow Nullable" value="Inherit" isActive="true" />
            <property name="558c27e8-dc8b-40ae-8633-fd42f0077268" display="Allow Collection" value="Inherit" isActive="true" />
          </properties>
        </stereotype>
      </stereotypes>
      <metadata />
      <childElements />
    </childElement>
    <childElement id="691d5593-12f3-472a-9202-638e3aaf8340" type="Association Event Settings" typeId="1bdee938-8569-4fbf-84b4-8522d2cbee32">
      <name>NewAssociationEventSettings</name>
      <display>[events]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-by-name</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>84298280-29cc-4d20-80e7-33b169128436</parentFolderId>
      <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
      <packageName>Intent.Metadata.DocumentDB</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="cd9a0eef-2907-4c48-823a-dfb86899370b" type="Association Event Handler" typeId="f9b3e6fd-3c51-4ed9-b214-cb7f5fc1cf7c">
          <name>On Changed</name>
          <display>On Changed: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="9040c473-be79-43a3-b0d3-149c9f178de0">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>691d5593-12f3-472a-9202-638e3aaf8340</parentFolderId>
          <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
          <packageName>Intent.Metadata.DocumentDB</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="1f88f1ac-b96a-4ae7-9047-883c2fa3b3df" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="d418d372-ae82-4852-81b1-20b78a26eb6c" display="Script" value="    // This script was made using a Typescript source. Don't edit this script directly.&#xD;&#xA;    {&#xD;&#xA;        //This happens while linking the association i.e. only 1 end attached.&#xD;&#xA;        if (!association.typeReference.getType()) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let sourceTarget = association.getOtherEnd().typeReference.getType();&#xD;&#xA;        const documentStoreId = &quot;8b68020c-6652-484b-85e8-6c33e1d8031f&quot;;&#xD;&#xA;        if (!sourceTarget.getPackage().hasStereotype(documentStoreId)) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        updatePrimaryKey(association.typeReference.getType());&#xD;&#xA;        updateForeignKeys(association);&#xD;&#xA;    }&#xD;&#xA;    function updatePrimaryKey(element) {&#xD;&#xA;        const PrimaryKeyStereotypeId = &quot;64f6a994-4909-4a9d-a0a9-afc5adf2ef74&quot;;&#xD;&#xA;        let pk = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;            .filter(x =&gt; x.hasStereotype(PrimaryKeyStereotypeId) || (x.hasMetadata(&quot;is-managed-key&quot;) &amp;&amp; !x.hasMetadata(&quot;association&quot;)))[0];&#xD;&#xA;        let isAggregate = isAggregateRoot(element);&#xD;&#xA;        if (pk &amp;&amp; (pk.hasStereotype(PrimaryKeyStereotypeId) &amp;&amp; !isAggregate)) {&#xD;&#xA;            pk.removeStereotype(PrimaryKeyStereotypeId);&#xD;&#xA;            pk.setMetadata(&quot;is-managed-key&quot;, &quot;false&quot;);&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        if (!isAggregate) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let idAttr = pk || createElement(&quot;Attribute&quot;, &quot;Id&quot;, element.id);&#xD;&#xA;        if (!pk) {&#xD;&#xA;            idAttr.setOrder(0);&#xD;&#xA;            idAttr.typeReference.setType(getDefaultIdType());&#xD;&#xA;        }&#xD;&#xA;        if (idAttr.getMetadata(&quot;is-managed-key&quot;) != &quot;true&quot;) {&#xD;&#xA;            idAttr.setMetadata(&quot;is-managed-key&quot;, &quot;true&quot;);&#xD;&#xA;        }&#xD;&#xA;        if (!idAttr.hasStereotype(PrimaryKeyStereotypeId)) {&#xD;&#xA;            idAttr.addStereotype(PrimaryKeyStereotypeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    function updateForeignKeys(associationEnd) {&#xD;&#xA;        let sourceType = lookup(associationEnd.getOtherEnd().typeReference.typeId);&#xD;&#xA;        let targetType = lookup(associationEnd.typeReference.typeId);&#xD;&#xA;        if (!sourceType || !targetType) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        if (requiresForeignKey(associationEnd)) {&#xD;&#xA;            updateForeignKeyAttribute(sourceType, targetType, associationEnd, associationEnd.id);&#xD;&#xA;        }&#xD;&#xA;        else {&#xD;&#xA;            sourceType.getChildren()&#xD;&#xA;                .filter(x =&gt; x.getMetadata(&quot;association&quot;) == associationEnd.id)&#xD;&#xA;                .forEach(x =&gt; x.delete());&#xD;&#xA;        }&#xD;&#xA;        if (requiresForeignKey(associationEnd.getOtherEnd())) {&#xD;&#xA;            updateForeignKeyAttribute(targetType, sourceType, associationEnd.getOtherEnd(), associationEnd.id);&#xD;&#xA;        }&#xD;&#xA;        else {&#xD;&#xA;            targetType.getChildren()&#xD;&#xA;                .filter(x =&gt; x.getMetadata(&quot;association&quot;) == associationEnd.id)&#xD;&#xA;                .forEach(x =&gt; x.delete());&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    function updateForeignKeyAttribute(startingEndType, destinationEndType, associationEnd, associationId) {&#xD;&#xA;        const ForeignKeyStereotypeId = &quot;ced3e970-e900-4f99-bd04-b993228fe17d&quot;;&#xD;&#xA;        let primaryKeyDict = getPrimaryKeysWithMapPath(destinationEndType);&#xD;&#xA;        let primaryKeyObjects = Object.values(primaryKeyDict);&#xD;&#xA;        let primaryKeysLen = primaryKeyObjects.length;&#xD;&#xA;        primaryKeyObjects.forEach((pk, index) =&gt; {&#xD;&#xA;            let fk = startingEndType.getChildren()&#xD;&#xA;                .filter(x =&gt; (x.getMetadata(&quot;association&quot;) == associationId) || (x.hasStereotype(ForeignKeyStereotypeId) &amp;&amp; !x.hasMetadata(&quot;association&quot;)))[index] ||&#xD;&#xA;                createElement(&quot;Attribute&quot;, &quot;&quot;, startingEndType.id);&#xD;&#xA;            // This check to avoid a loop where the Domain script is updating the conventions and this keeps renaming it back.&#xD;&#xA;            let fkNameToUse = `${toCamelCase(associationEnd.getName())}${toPascalCase(pk.name)}`;&#xD;&#xA;            if (associationEnd.typeReference.isCollection) {&#xD;&#xA;                fkNameToUse = pluralize(fkNameToUse);&#xD;&#xA;            }&#xD;&#xA;            if (fk.getName().toLocaleLowerCase() !== fkNameToUse.toLocaleLowerCase()) {&#xD;&#xA;                if (!fk.hasMetadata(&quot;fk-original-name&quot;) || (fk.getMetadata(&quot;fk-original-name&quot;) == fk.getName())) {&#xD;&#xA;                    if (fkNameToUse != fk.getName()) {&#xD;&#xA;                        fk.setName(fkNameToUse);&#xD;&#xA;                    }&#xD;&#xA;                    fk.setMetadata(&quot;fk-original-name&quot;, fk.getName());&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            fk.setMetadata(&quot;association&quot;, associationId);&#xD;&#xA;            fk.setMetadata(&quot;is-managed-key&quot;, &quot;true&quot;);&#xD;&#xA;            let fkStereotype = fk.getStereotype(ForeignKeyStereotypeId);&#xD;&#xA;            if (!fkStereotype) {&#xD;&#xA;                fk.addStereotype(ForeignKeyStereotypeId);&#xD;&#xA;                fkStereotype = fk.getStereotype(ForeignKeyStereotypeId);&#xD;&#xA;            }&#xD;&#xA;            if (fkStereotype.getProperty(&quot;Association&quot;).getValue() != associationId) {&#xD;&#xA;                fkStereotype.getProperty(&quot;Association&quot;).setValue(associationId);&#xD;&#xA;            }&#xD;&#xA;            if (fk.typeReference.typeId != pk.typeId) {&#xD;&#xA;                fk.typeReference.setType(pk.typeId);&#xD;&#xA;            }&#xD;&#xA;            if (fk.typeReference.isNullable != associationEnd.typeReference.isNullable) {&#xD;&#xA;                fk.typeReference.setIsNullable(associationEnd.typeReference.isNullable);&#xD;&#xA;            }&#xD;&#xA;            if (fk.typeReference.isCollection != associationEnd.typeReference.isCollection) {&#xD;&#xA;                fk.typeReference.setIsCollection(associationEnd.typeReference.isCollection);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;        startingEndType.getChildren().filter(x =&gt; x.getMetadata(&quot;association&quot;) == associationId).forEach((attr, index) =&gt; {&#xD;&#xA;            if (index &gt;= primaryKeysLen) {&#xD;&#xA;                attr.delete();&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    function requiresForeignKey(associationEnd) {&#xD;&#xA;        return associationEnd.typeReference.isNavigable &amp;&amp;&#xD;&#xA;            isAggregateRelationship(associationEnd);&#xD;&#xA;    }&#xD;&#xA;    function isAggregateRelationship(associationEnd) {&#xD;&#xA;        let sourceAssociationEnd = associationEnd;&#xD;&#xA;        if (associationEnd.isTargetEnd()) {&#xD;&#xA;            sourceAssociationEnd = sourceAssociationEnd.getOtherEnd();&#xD;&#xA;        }&#xD;&#xA;        return sourceAssociationEnd.typeReference.isNullable || sourceAssociationEnd.typeReference.isCollection;&#xD;&#xA;    }&#xD;&#xA;    function isAggregateRoot(element) {&#xD;&#xA;        return !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;    }&#xD;&#xA;    function getDefaultIdType() {&#xD;&#xA;        const StringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;        const GuidTypeId = &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;;&#xD;&#xA;        const IntTypeId = &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;;&#xD;&#xA;        const LongTypeId = &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;;&#xD;&#xA;        const MongoSettingId = &quot;d5581fe8-7385-4bb6-88dc-8940e20ec1d4&quot;;&#xD;&#xA;        switch (application.getSettings(MongoSettingId)?.getField(&quot;Id Type&quot;)?.value) {&#xD;&#xA;            default:&#xD;&#xA;                return StringTypeId;&#xD;&#xA;            case &quot;guid&quot;:&#xD;&#xA;                return GuidTypeId;&#xD;&#xA;            case &quot;int&quot;:&#xD;&#xA;                return IntTypeId;&#xD;&#xA;            case &quot;long&quot;:&#xD;&#xA;                return LongTypeId;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    ;&#xD;&#xA;    function getPrimaryKeysWithMapPath(entity) {&#xD;&#xA;        let keydict = Object.create(null);&#xD;&#xA;        let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        let generalizations = entity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        // There is a problem with execution order where this script executes before&#xD;&#xA;        // the generalization script had a chance to potentially remove a PK attribute&#xD;&#xA;        // and so I have to perform an inheritance check and ignore any PKs on derived classes.&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            keys.forEach(key =&gt; keydict[key.id] = {&#xD;&#xA;                id: key.id,&#xD;&#xA;                name: key.getName(),&#xD;&#xA;                typeId: key.typeReference.typeId,&#xD;&#xA;                mapPath: [key.id],&#xD;&#xA;                isNullable: false,&#xD;&#xA;                isCollection: false&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);&#xD;&#xA;        return keydict;&#xD;&#xA;        function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {&#xD;&#xA;            if (!curEntity) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;            if (generalizations.length == 0) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalization = generalizations[0];&#xD;&#xA;            generalizationStack.push(generalization.id);&#xD;&#xA;            let nextEntity = generalization.typeReference.getType();&#xD;&#xA;            let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;            baseKeys.forEach(key =&gt; {&#xD;&#xA;                keydict[key.id] = {&#xD;&#xA;                    id: key.id,&#xD;&#xA;                    name: key.getName(),&#xD;&#xA;                    typeId: key.typeReference.typeId,&#xD;&#xA;                    mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                    isNullable: key.typeReference.isNullable,&#xD;&#xA;                    isCollection: key.typeReference.isCollection&#xD;&#xA;                };&#xD;&#xA;            });&#xD;&#xA;            traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="68a2d17f-1713-4d71-8103-cf635381eb32" type="Association Event Handler" typeId="f9b3e6fd-3c51-4ed9-b214-cb7f5fc1cf7c">
          <name>On Created</name>
          <display>On Created: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="d60be785-b743-4c23-833a-df8206405f96">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>691d5593-12f3-472a-9202-638e3aaf8340</parentFolderId>
          <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
          <packageName>Intent.Metadata.DocumentDB</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="1f88f1ac-b96a-4ae7-9047-883c2fa3b3df" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="d418d372-ae82-4852-81b1-20b78a26eb6c" display="Script" value="    // This script was made using a Typescript source. Don't edit this script directly.&#xD;&#xA;    if (!association) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    let sourceEnd = association.getOtherEnd().typeReference;&#xD;&#xA;    const documentStoreId = &quot;8b68020c-6652-484b-85e8-6c33e1d8031f&quot;;&#xD;&#xA;    if (!sourceEnd.getType().getPackage().hasStereotype(documentStoreId)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    sourceEnd.setIsCollection(false);&#xD;&#xA;    sourceEnd.setIsNullable(false);" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="7208d920-66a2-44ab-902b-91e9ed16c9bd" type="Association Event Handler" typeId="f9b3e6fd-3c51-4ed9-b214-cb7f5fc1cf7c">
          <name>On Deleted</name>
          <display>On Deleted: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="c99eb016-314e-4617-ae22-a5bfdacfe95f">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>691d5593-12f3-472a-9202-638e3aaf8340</parentFolderId>
          <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
          <packageName>Intent.Metadata.DocumentDB</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="1f88f1ac-b96a-4ae7-9047-883c2fa3b3df" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="d418d372-ae82-4852-81b1-20b78a26eb6c" display="Script" value="// This script was made using a Typescript source. Don't edit this script directly.&#xD;&#xA;    {&#xD;&#xA;        let targetClass = association.typeReference.getType();&#xD;&#xA;        const documentStoreId = &quot;8b68020c-6652-484b-85e8-6c33e1d8031f&quot;;&#xD;&#xA;        if (!targetClass.getPackage().hasStereotype(documentStoreId)) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        updatePrimaryKey(targetClass);&#xD;&#xA;        removeAssociatedForeignKeys(association);&#xD;&#xA;    }&#xD;&#xA;    function updatePrimaryKey(element) {&#xD;&#xA;        const PrimaryKeyStereotypeId = &quot;64f6a994-4909-4a9d-a0a9-afc5adf2ef74&quot;;&#xD;&#xA;        let pk = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;            .filter(x =&gt; x.hasStereotype(PrimaryKeyStereotypeId) || (x.hasMetadata(&quot;is-managed-key&quot;) &amp;&amp; !x.hasMetadata(&quot;association&quot;)))[0];&#xD;&#xA;        let isAggregate = isAggregateRoot(element);&#xD;&#xA;        if (pk &amp;&amp; (pk.hasStereotype(PrimaryKeyStereotypeId) &amp;&amp; !isAggregate)) {&#xD;&#xA;            pk.removeStereotype(PrimaryKeyStereotypeId);&#xD;&#xA;            pk.setMetadata(&quot;is-managed-key&quot;, &quot;false&quot;);&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        if (!isAggregate) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let idAttr = pk || createElement(&quot;Attribute&quot;, &quot;Id&quot;, element.id);&#xD;&#xA;        if (!pk) {&#xD;&#xA;            idAttr.setOrder(0);&#xD;&#xA;            idAttr.typeReference.setType(getDefaultIdType());&#xD;&#xA;        }&#xD;&#xA;        if (idAttr.getMetadata(&quot;is-managed-key&quot;) != &quot;true&quot;) {&#xD;&#xA;            idAttr.setMetadata(&quot;is-managed-key&quot;, &quot;true&quot;);&#xD;&#xA;        }&#xD;&#xA;        if (!idAttr.hasStereotype(PrimaryKeyStereotypeId)) {&#xD;&#xA;            idAttr.addStereotype(PrimaryKeyStereotypeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    function removeAssociatedForeignKeys(associationEnd) {&#xD;&#xA;        const ForeignKeyStereotypeId = &quot;ced3e970-e900-4f99-bd04-b993228fe17d&quot;;&#xD;&#xA;        let targetClass = associationEnd.typeReference.getType();&#xD;&#xA;        let sourceClass = associationEnd.getOtherEnd().typeReference.getType();&#xD;&#xA;        targetClass.getChildren()&#xD;&#xA;            .filter(x =&gt; x.getMetadata(&quot;association&quot;) == associationEnd.id)&#xD;&#xA;            .forEach(x =&gt; x.delete());&#xD;&#xA;        sourceClass.getChildren()&#xD;&#xA;            .filter(x =&gt; x.getMetadata(&quot;association&quot;) == associationEnd.id)&#xD;&#xA;            .forEach(x =&gt; x.delete());&#xD;&#xA;    }&#xD;&#xA;    function isAggregateRoot(element) {&#xD;&#xA;        return !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;    }&#xD;&#xA;    function getDefaultIdType() {&#xD;&#xA;        const StringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;        const GuidTypeId = &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;;&#xD;&#xA;        const IntTypeId = &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;;&#xD;&#xA;        const LongTypeId = &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;;&#xD;&#xA;        const MongoSettingId = &quot;d5581fe8-7385-4bb6-88dc-8940e20ec1d4&quot;;&#xD;&#xA;        switch (application.getSettings(MongoSettingId)?.getField(&quot;Id Type&quot;)?.value) {&#xD;&#xA;            default:&#xD;&#xA;                return StringTypeId;&#xD;&#xA;            case &quot;guid&quot;:&#xD;&#xA;                return GuidTypeId;&#xD;&#xA;            case &quot;int&quot;:&#xD;&#xA;                return IntTypeId;&#xD;&#xA;            case &quot;long&quot;:&#xD;&#xA;                return LongTypeId;&#xD;&#xA;        }&#xD;&#xA;    }" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>