<?xml version="1.0" encoding="utf-8"?>
<class id="f15ed9f1-9344-4ffe-add2-44f83d0ed3aa" type="Package Extension" typeId="ab4152df-3add-4a08-81b6-0fefc7cbb204">
  <name>Document DB Domain Package Extension</name>
  <display>Document DB Domain Package Extension: Domain Package</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-by-name</sort-children>
  <genericTypes />
  <typeReference id="0dd4c0f1-22f4-4854-8ea2-df3e8abfbf92">
    <typeId>1a824508-4623-45d9-accc-f572091ade5a</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Domain</typePackageName>
    <typePackageId>6572b98d-5e13-4d4b-9ffc-820057da974e</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>4652d8dc-eea5-49cb-8c08-93ac1972962c</parentFolderId>
  <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
  <packageName>Intent.Metadata.DocumentDB</packageName>
  <stereotypes />
  <metadata />
  <childElements>
    <childElement id="8c870c16-b9a3-402b-83b5-bafc6b8be9ca" type="Package Event Settings" typeId="48bcdd5f-690c-425b-8f5e-99097a7188dc">
      <name>NewPackageEventSettings</name>
      <display>[events]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-by-name</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>f15ed9f1-9344-4ffe-add2-44f83d0ed3aa</parentFolderId>
      <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
      <packageName>Intent.Metadata.DocumentDB</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="3554e8c8-3a8e-44f9-92d4-3a6cbd05404d" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Changed</name>
          <display>On Changed: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="49824f1f-d567-4dc4-84fb-e1531bd35837">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>8c870c16-b9a3-402b-83b5-bafc6b8be9ca</parentFolderId>
          <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
          <packageName>Intent.Metadata.DocumentDB</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;function getDefaultIdType() {&#xD;&#xA;    var _a, _b;&#xD;&#xA;    const stringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;    const guidTypeId = &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;;&#xD;&#xA;    const intTypeId = &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;;&#xD;&#xA;    const longTypeId = &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;;&#xD;&#xA;    const documentDbSettingsId = &quot;d5581fe8-7385-4bb6-88dc-8940e20ec1d4&quot;;&#xD;&#xA;    switch ((_b = (_a = application.getSettings(documentDbSettingsId)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Id Type&quot;)) === null || _b === void 0 ? void 0 : _b.value) {&#xD;&#xA;        default:&#xD;&#xA;            return stringTypeId;&#xD;&#xA;        case &quot;guid&quot;:&#xD;&#xA;            return guidTypeId;&#xD;&#xA;        case &quot;int&quot;:&#xD;&#xA;            return intTypeId;&#xD;&#xA;        case &quot;long&quot;:&#xD;&#xA;            return longTypeId;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;isAggregateRoot.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;getDefaultIdType.ts&quot; /&gt;&#xD;&#xA;function updatePartitionKeyAsPrimary(element, packageLoad = false) {&#xD;&#xA;    if (!isCosmosDb(element))&#xD;&#xA;        return;&#xD;&#xA;    let allowedTypes = [&quot;Class&quot;, &quot;Folder&quot;, &quot;Domain Package&quot;];&#xD;&#xA;    if (!allowedTypes.includes(element.specialization)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    const primaryKeyStereotypeId = &quot;64f6a994-4909-4a9d-a0a9-afc5adf2ef74&quot;;&#xD;&#xA;    const containerStereotypeId = &quot;ef9b1772-18e1-44ad-b606-66406221c805&quot;;&#xD;&#xA;    const multiTenancyStereotypeId = &quot;586eb05b-d647-4430-ac05-8d096fe3f79e&quot;;&#xD;&#xA;    let partitionKey = getPartitionKey(element);&#xD;&#xA;    if (!packageLoad &amp;&amp; [&quot;Folder&quot;, &quot;Domain Package&quot;].includes(element.specialization)) {&#xD;&#xA;        //prevent unnecessary package scans on every package change event.&#xD;&#xA;        if (element.hasMetadata(&quot;currentPartitionKey&quot;) &amp;&amp; element.getMetadata(&quot;currentPartitionKey&quot;) === partitionKey) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    if (element.specialization == &quot;Class&quot;) {&#xD;&#xA;        ensureCorrectPartitionKey(element, partitionKey, packageLoad);&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        updateDescendants(element, partitionKey, packageLoad);&#xD;&#xA;    }&#xD;&#xA;    element.setMetadata(&quot;currentPartitionKey&quot;, partitionKey);&#xD;&#xA;    function getPartitionKey(element) {&#xD;&#xA;        var _a, _b;&#xD;&#xA;        let result = &quot;&quot;;&#xD;&#xA;        while (element) {&#xD;&#xA;            if (element.hasStereotype(containerStereotypeId) &amp;&amp; ((_a = element.getStereotype(containerStereotypeId).getProperty(&quot;Partition Key&quot;)) === null || _a === void 0 ? void 0 : _a.value)) {&#xD;&#xA;                let partitionKey = (_b = element.getStereotype(containerStereotypeId).getProperty(&quot;Partition Key&quot;)) === null || _b === void 0 ? void 0 : _b.value;&#xD;&#xA;                if (!partitionKey)&#xD;&#xA;                    partitionKey = &quot;&quot;;&#xD;&#xA;                return partitionKey;&#xD;&#xA;            }&#xD;&#xA;            element = element.getParent();&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;    function updateDescendants(element, partitionKeyName, packageLoad) {&#xD;&#xA;        let children = element.getChildren().filter(c =&gt; allowedTypes.includes(c.specialization));&#xD;&#xA;        children.forEach(child =&gt; {&#xD;&#xA;            var _a;&#xD;&#xA;            if (child.hasStereotype(containerStereotypeId)) {&#xD;&#xA;                if (packageLoad) {&#xD;&#xA;                    //On package load we check the entire tree not just the scope of the edited item&#xD;&#xA;                    partitionKeyName = (_a = child.getStereotype(containerStereotypeId).getProperty(&quot;Partition Key&quot;)) === null || _a === void 0 ? void 0 : _a.value;&#xD;&#xA;                }&#xD;&#xA;                else {&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            if (child.specialization == &quot;Class&quot;) {&#xD;&#xA;                ensureCorrectPartitionKey(child, partitionKeyName, packageLoad);&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                updateDescendants(child, partitionKeyName, packageLoad);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    function ensureCorrectPartitionKey(element, partitionKeyName, packageLoad) {&#xD;&#xA;        var _a;&#xD;&#xA;        if (element.specialization !== &quot;Class&quot;) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        if (!partitionKeyName) {&#xD;&#xA;            let toRemove = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .find(x =&gt; x.hasStereotype(primaryKeyStereotypeId) &amp;&amp; x.hasMetadata(&quot;partition-key&quot;));&#xD;&#xA;            if (toRemove != null) {&#xD;&#xA;                toRemove.delete();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        else {&#xD;&#xA;            let toFix = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .find(x =&gt; x.hasStereotype(primaryKeyStereotypeId) &amp;&amp; x.hasMetadata(&quot;partition-key&quot;) &amp;&amp; x.getName().toLowerCase() != partitionKeyName.toLowerCase());&#xD;&#xA;            if (toFix != null) {&#xD;&#xA;                toFix.removeMetadata(&quot;partition-key&quot;);&#xD;&#xA;                toFix.removeStereotype(primaryKeyStereotypeId);&#xD;&#xA;            }&#xD;&#xA;            let toAdjust = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .find(x =&gt; x.getName().toLowerCase() == partitionKeyName.toLowerCase());&#xD;&#xA;            if (toAdjust != null) {&#xD;&#xA;                if (!toAdjust.hasStereotype(primaryKeyStereotypeId)) {&#xD;&#xA;                    toAdjust.addStereotype(primaryKeyStereotypeId);&#xD;&#xA;                }&#xD;&#xA;                let partitionPkStereotype = toAdjust.getStereotype(primaryKeyStereotypeId);&#xD;&#xA;                if (!element.hasStereotype(multiTenancyStereotypeId)) {&#xD;&#xA;                    (_a = partitionPkStereotype.getProperty(&quot;Data source&quot;)) === null || _a === void 0 ? void 0 : _a.setValue(&quot;User supplied&quot;);&#xD;&#xA;                }&#xD;&#xA;                toAdjust.setMetadata(&quot;partition-key&quot;, &quot;true&quot;);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    function isCosmosDb(element) {&#xD;&#xA;        var _a, _b, _c;&#xD;&#xA;        const documentStoreId = &quot;8b68020c-6652-484b-85e8-6c33e1d8031f&quot;;&#xD;&#xA;        const cosmosDbProvider = &quot;3e1a00f7-c6f1-4785-a544-bbcb17602b31&quot;;&#xD;&#xA;        let docDbStereotype = element.getPackage().getStereotype(documentStoreId);&#xD;&#xA;        let providers = lookupTypesOf(&quot;Document Db Provider&quot;).filter((elem, index) =&gt; lookupTypesOf(&quot;Document Db Provider&quot;).findIndex(obj =&gt; obj.id == elem.id) === index &amp;&amp; elem.getName() != &quot;Custom&quot;);&#xD;&#xA;        return ((!((_a = docDbStereotype.getProperty(&quot;Provider&quot;)) === null || _a === void 0 ? void 0 : _a.getValue()) &amp;&amp; providers.length == 1 &amp;&amp; providers[0].id == cosmosDbProvider) ||&#xD;&#xA;            ((_c = (_b = docDbStereotype.getProperty(&quot;Provider&quot;)) === null || _b === void 0 ? void 0 : _b.getValue()) === null || _c === void 0 ? void 0 : _c.id) == cosmosDbProvider);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/**&#xD;&#xA; * Used by Intent.Modules\Modules\Intent.Modules.Metadata.DocumentDB&#xD;&#xA; *&#xD;&#xA; * Source code here:&#xD;&#xA; * https://github.com/IntentArchitect/Intent.Modules/blob/master/DesignerMacros/src/documentdb/package-on-change/package-on-change.ts&#xD;&#xA; */&#xD;&#xA;/// &lt;reference path=&quot;../common/updatePartitionKeyAsPrimary.ts&quot; /&gt;&#xD;&#xA;const package = element.getPackage();&#xD;&#xA;function execute() {&#xD;&#xA;    const documentStoreId = &quot;8b68020c-6652-484b-85e8-6c33e1d8031f&quot;;&#xD;&#xA;    if (!package.hasStereotype(documentStoreId)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    updatePartitionKeyAsPrimary(element);&#xD;&#xA;}&#xD;&#xA;execute();&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
        <childElement id="cd455f21-42cc-468d-bf86-9d3d0ead0b0d" type="Element Event Handler" typeId="0ef412e3-d15a-45d3-bcd3-f646165f2eb6">
          <name>On Loaded</name>
          <display>On Loaded: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="e3ac8d9d-00f6-4138-aa73-9db3d6876525">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>8c870c16-b9a3-402b-83b5-bafc6b8be9ca</parentFolderId>
          <packageId>1c7eab18-9482-4b4e-b61b-1fbd2d2427b6</packageId>
          <packageName>Intent.Metadata.DocumentDB</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="/**&#xD;&#xA; * Will run code against a package as needed based on the current (which is stored in metadata on the package) and a target version.&#xD;&#xA; *&#xD;&#xA; * If the package is already at the {@link targetVersion}, {@link action} is not executed. After execution of {@link targetVersion} is recorded&#xD;&#xA; * in metadata on the package under the {@link metadataKeyName} key.&#xD;&#xA; *&#xD;&#xA; * @param package The package to ensure is at the latest version and on which the version will be stored as metadata.&#xD;&#xA; * @param metadataKeyName The name of the metadata key in which to store the version.&#xD;&#xA; * @param targetVersion The version that should be saved in the metadata this method is complete.&#xD;&#xA; * @param action A delegate which is called if the current version in the metadata is unspecified or less than the {@link targetVersion}.&#xD;&#xA; * The delegate is passed the current version as specified in the metadata, or if there is no version yet it is passed -1.&#xD;&#xA; */&#xD;&#xA;function ensureIsAtTargetVersion(package, metadataKeyName, targetVersion, action) {&#xD;&#xA;    if (!Number.isInteger(targetVersion)) {&#xD;&#xA;        throw new Error(&quot;targetVersion must be an integer&quot;);&#xD;&#xA;    }&#xD;&#xA;    var currentVersion = package.hasMetadata(metadataKeyName) &amp;&amp;&#xD;&#xA;        Number.isInteger(Number.parseInt(package.getMetadata(metadataKeyName)))&#xD;&#xA;        ? Number.parseInt(package.getMetadata(metadataKeyName))&#xD;&#xA;        : -1;&#xD;&#xA;    if (currentVersion &gt;= targetVersion) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    action(currentVersion);&#xD;&#xA;    package.removeMetadata(metadataKeyName);&#xD;&#xA;    package.addMetadata(metadataKeyName, targetVersion.toString());&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;function getDefaultIdType() {&#xD;&#xA;    var _a, _b;&#xD;&#xA;    const stringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;    const guidTypeId = &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;;&#xD;&#xA;    const intTypeId = &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;;&#xD;&#xA;    const longTypeId = &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;;&#xD;&#xA;    const documentDbSettingsId = &quot;d5581fe8-7385-4bb6-88dc-8940e20ec1d4&quot;;&#xD;&#xA;    switch ((_b = (_a = application.getSettings(documentDbSettingsId)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Id Type&quot;)) === null || _b === void 0 ? void 0 : _b.value) {&#xD;&#xA;        default:&#xD;&#xA;            return stringTypeId;&#xD;&#xA;        case &quot;guid&quot;:&#xD;&#xA;            return guidTypeId;&#xD;&#xA;        case &quot;int&quot;:&#xD;&#xA;            return intTypeId;&#xD;&#xA;        case &quot;long&quot;:&#xD;&#xA;            return longTypeId;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;isAggregateRoot.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;getDefaultIdType.ts&quot; /&gt;&#xD;&#xA;function updatePrimaryKey(element) {&#xD;&#xA;    if (element.specialization !== &quot;Class&quot;) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    const primaryKeyStereotypeId = &quot;64f6a994-4909-4a9d-a0a9-afc5adf2ef74&quot;;&#xD;&#xA;    let idAttr = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .find(x =&gt; x.hasStereotype(primaryKeyStereotypeId));&#xD;&#xA;    const isToCompositionalOneRelationshipTarget = () =&gt; element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable &amp;&amp; !x.getOtherEnd().typeReference.isCollection);&#xD;&#xA;    if ((!isAggregateRoot(element) &amp;&amp; isToCompositionalOneRelationshipTarget()) || derivedFromTypeHasPk(element)) {&#xD;&#xA;        if (idAttr != null) {&#xD;&#xA;            idAttr.delete();&#xD;&#xA;        }&#xD;&#xA;        updateDerivedTypePks(element);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    if (isTableStorage(element)) {&#xD;&#xA;        updateTableStoragePk(element);&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        if (idAttr == null) {&#xD;&#xA;            const classNameWithId = `${element.getName()}Id`.toLowerCase();&#xD;&#xA;            idAttr = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .find(attribute =&gt; {&#xD;&#xA;                const attributeName = attribute.getName().toLowerCase();&#xD;&#xA;                return attributeName === &quot;id&quot; || attributeName === classNameWithId;&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;        if (idAttr == null) {&#xD;&#xA;            idAttr = createElement(&quot;Attribute&quot;, &quot;Id&quot;, element.id);&#xD;&#xA;            idAttr.setOrder(0);&#xD;&#xA;            if (idAttr.typeReference == null)&#xD;&#xA;                throw new Error(&quot;typeReference is not defined&quot;);&#xD;&#xA;            idAttr.typeReference.setType(getDefaultIdType());&#xD;&#xA;        }&#xD;&#xA;        if (!idAttr.hasStereotype(primaryKeyStereotypeId)) {&#xD;&#xA;            idAttr.addStereotype(primaryKeyStereotypeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    updateDerivedTypePks(element);&#xD;&#xA;    function derivedFromTypeHasPk(element) {&#xD;&#xA;        const primaryKeyStereotypeId = &quot;64f6a994-4909-4a9d-a0a9-afc5adf2ef74&quot;;&#xD;&#xA;        return element.getAssociations(&quot;Generalization&quot;)&#xD;&#xA;            .some(generalization =&gt; {&#xD;&#xA;            if (!generalization.isTargetEnd()) {&#xD;&#xA;                return false;&#xD;&#xA;            }&#xD;&#xA;            const baseType = generalization.typeReference.getType();&#xD;&#xA;            if (baseType.getChildren(&quot;Attribute&quot;).some(attribute =&gt; attribute.hasStereotype(primaryKeyStereotypeId))) {&#xD;&#xA;                return true;&#xD;&#xA;            }&#xD;&#xA;            return derivedFromTypeHasPk(baseType);&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    function updateDerivedTypePks(element) {&#xD;&#xA;        const derivedTypes = element.getAssociations(&quot;Generalization&quot;)&#xD;&#xA;            .filter(generalization =&gt; generalization.isSourceEnd())&#xD;&#xA;            .map(generalization =&gt; generalization.typeReference.getType());&#xD;&#xA;        for (const derivedType of derivedTypes) {&#xD;&#xA;            updatePrimaryKey(derivedType);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function isTableStorage(element) {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const documentStoreId = &quot;8b68020c-6652-484b-85e8-6c33e1d8031f&quot;;&#xD;&#xA;    const tableStorageProvider = &quot;1d05ee8e-747f-4120-9647-29ac784ef633&quot;;&#xD;&#xA;    var docDbStereotype = element.getPackage().getStereotype(documentStoreId);&#xD;&#xA;    let providers = lookupTypesOf(&quot;Document Db Provider&quot;).filter((elem, index) =&gt; lookupTypesOf(&quot;Document Db Provider&quot;).findIndex(obj =&gt; obj.id == elem.id) === index &amp;&amp; elem.getName() != &quot;Custom&quot;);&#xD;&#xA;    return ((!((_a = docDbStereotype.getProperty(&quot;Provider&quot;)) === null || _a === void 0 ? void 0 : _a.getValue()) &amp;&amp; providers.length == 1 &amp;&amp; providers[0].id == tableStorageProvider) ||&#xD;&#xA;        ((_c = (_b = docDbStereotype.getProperty(&quot;Provider&quot;)) === null || _b === void 0 ? void 0 : _b.getValue()) === null || _c === void 0 ? void 0 : _c.id) == tableStorageProvider);&#xD;&#xA;}&#xD;&#xA;function updateTableStoragePk(element) {&#xD;&#xA;    var _a, _b;&#xD;&#xA;    const primaryKeyStereotypeId = &quot;64f6a994-4909-4a9d-a0a9-afc5adf2ef74&quot;;&#xD;&#xA;    const stringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;    let idAttrs = element.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(primaryKeyStereotypeId));&#xD;&#xA;    if (!isAggregateRoot(element)) {&#xD;&#xA;        if (idAttrs.length &gt; 0) {&#xD;&#xA;            idAttrs.forEach(key =&gt; key.delete());&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        //Keys are not right&#xD;&#xA;        if (!(idAttrs.length == 2 &amp;&amp; idAttrs[0].getName() == &quot;PartitionKey&quot; &amp;&amp; idAttrs[1].getName() == &quot;RowKey&quot;)) {&#xD;&#xA;            if (idAttrs.length &gt; 0) {&#xD;&#xA;                idAttrs.forEach(key =&gt; key.delete());&#xD;&#xA;            }&#xD;&#xA;            let rowKeyAttr = createElement(&quot;Attribute&quot;, &quot;RowKey&quot;, element.id);&#xD;&#xA;            rowKeyAttr.setOrder(0);&#xD;&#xA;            rowKeyAttr.typeReference.setType(stringTypeId);&#xD;&#xA;            let idPkSterotype = rowKeyAttr.addStereotype(primaryKeyStereotypeId);&#xD;&#xA;            (_a = idPkSterotype.getProperty(&quot;Data source&quot;)) === null || _a === void 0 ? void 0 : _a.setValue(&quot;User supplied&quot;);&#xD;&#xA;            let partitionKeyAttr = createElement(&quot;Attribute&quot;, &quot;PartitionKey&quot;, element.id);&#xD;&#xA;            partitionKeyAttr.setOrder(0);&#xD;&#xA;            partitionKeyAttr.typeReference.setType(stringTypeId);&#xD;&#xA;            let partitionPkStereotype = partitionKeyAttr.addStereotype(primaryKeyStereotypeId);&#xD;&#xA;            (_b = partitionPkStereotype.getProperty(&quot;Data source&quot;)) === null || _b === void 0 ? void 0 : _b.setValue(&quot;User supplied&quot;);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;function isAggregateRelationship(associationEnd) {&#xD;&#xA;    let sourceAssociationEnd = associationEnd;&#xD;&#xA;    if (associationEnd.isTargetEnd()) {&#xD;&#xA;        sourceAssociationEnd = sourceAssociationEnd.getOtherEnd();&#xD;&#xA;    }&#xD;&#xA;    return sourceAssociationEnd.typeReference.isNullable || sourceAssociationEnd.typeReference.isCollection;&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../common/isAggregateRelationship.ts&quot; /&gt;&#xD;&#xA;function requiresForeignKey(associationEnd) {&#xD;&#xA;    return associationEnd.typeReference.isNavigable &amp;&amp;&#xD;&#xA;        isAggregateRelationship(associationEnd);&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;;&#xD;&#xA;function getPrimaryKeysWithMapPath(entity) {&#xD;&#xA;    let keyDict = Object.create(null);&#xD;&#xA;    let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;    let generalizations = entity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;    // There is a problem with execution order where this script executes before&#xD;&#xA;    // the generalization script had a chance to potentially remove a PK attribute&#xD;&#xA;    // and so I have to perform an inheritance check and ignore any PKs on derived classes.&#xD;&#xA;    if (generalizations.length == 0) {&#xD;&#xA;        keys.forEach(key =&gt; {&#xD;&#xA;            if (key.typeReference == null)&#xD;&#xA;                throw new Error(&quot;typeReference is undefined&quot;);&#xD;&#xA;            return keyDict[key.id] = {&#xD;&#xA;                id: key.id,&#xD;&#xA;                name: key.getName(),&#xD;&#xA;                typeId: key.typeReference.typeId,&#xD;&#xA;                mapPath: [key.id],&#xD;&#xA;                isNullable: false,&#xD;&#xA;                isCollection: false&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    traverseInheritanceHierarchyForPrimaryKeys(keyDict, entity, []);&#xD;&#xA;    return keyDict;&#xD;&#xA;    function traverseInheritanceHierarchyForPrimaryKeys(keyDict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        baseKeys.forEach(key =&gt; {&#xD;&#xA;            if (key.typeReference == null)&#xD;&#xA;                throw new Error(&quot;typeReference is undefined&quot;);&#xD;&#xA;            keyDict[key.id] = {&#xD;&#xA;                id: key.id,&#xD;&#xA;                name: key.getName(),&#xD;&#xA;                typeId: key.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                isNullable: key.typeReference.isNullable,&#xD;&#xA;                isCollection: key.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keyDict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../common/getPrimaryKeysWithMapPath.ts&quot; /&gt;&#xD;&#xA;function updateForeignKeyAttribute(startingEndType, destinationEndType, associationEnd, associationId) {&#xD;&#xA;    const ForeignKeyStereotypeId = &quot;ced3e970-e900-4f99-bd04-b993228fe17d&quot;;&#xD;&#xA;    let primaryKeyDict = getPrimaryKeysWithMapPath(destinationEndType);&#xD;&#xA;    let primaryKeyObjects = Object.values(primaryKeyDict);&#xD;&#xA;    let primaryKeysLen = primaryKeyObjects.length;&#xD;&#xA;    primaryKeyObjects.forEach((pk, index) =&gt; {&#xD;&#xA;        var _a;&#xD;&#xA;        let fk = (_a = startingEndType.getChildren()&#xD;&#xA;            .filter(x =&gt; (x.getMetadata(&quot;association&quot;) == associationId) ||&#xD;&#xA;            (x.hasStereotype(ForeignKeyStereotypeId) &amp;&amp; !x.hasMetadata(&quot;association&quot;)))[index]) !== null &amp;&amp; _a !== void 0 ? _a : createElement(&quot;Attribute&quot;, &quot;&quot;, startingEndType.id);&#xD;&#xA;        // This check to avoid a loop where the Domain script is updating the conventions and this keeps renaming it back.&#xD;&#xA;        let fkNameToUse = `${toCamelCase(associationEnd.getName())}${toPascalCase(pk.name)}`;&#xD;&#xA;        if (associationEnd.typeReference.isCollection) {&#xD;&#xA;            fkNameToUse = pluralize(fkNameToUse);&#xD;&#xA;        }&#xD;&#xA;        if (fk.getName().toLocaleLowerCase() !== fkNameToUse.toLocaleLowerCase()) {&#xD;&#xA;            if (!fk.hasMetadata(&quot;fk-original-name&quot;) || (fk.getMetadata(&quot;fk-original-name&quot;) == fk.getName())) {&#xD;&#xA;                if (fkNameToUse != fk.getName()) {&#xD;&#xA;                    fk.setName(fkNameToUse);&#xD;&#xA;                }&#xD;&#xA;                fk.setMetadata(&quot;fk-original-name&quot;, fk.getName());&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        fk.setMetadata(&quot;association&quot;, associationId);&#xD;&#xA;        fk.setMetadata(&quot;is-managed-key&quot;, &quot;true&quot;);&#xD;&#xA;        let fkStereotype = fk.getStereotype(ForeignKeyStereotypeId);&#xD;&#xA;        if (!fkStereotype) {&#xD;&#xA;            fk.addStereotype(ForeignKeyStereotypeId);&#xD;&#xA;            fkStereotype = fk.getStereotype(ForeignKeyStereotypeId);&#xD;&#xA;        }&#xD;&#xA;        if (fkStereotype.getProperty(&quot;Association&quot;).getValue() != associationId) {&#xD;&#xA;            fkStereotype.getProperty(&quot;Association&quot;).setValue(associationId);&#xD;&#xA;        }&#xD;&#xA;        if (fk.typeReference == null)&#xD;&#xA;            throw new Error(&quot;typeReference is undefined&quot;);&#xD;&#xA;        if (fk.typeReference.typeId != pk.typeId) {&#xD;&#xA;            fk.typeReference.setType(pk.typeId);&#xD;&#xA;        }&#xD;&#xA;        if (fk.typeReference.isNullable != associationEnd.typeReference.isNullable) {&#xD;&#xA;            fk.typeReference.setIsNullable(associationEnd.typeReference.isNullable);&#xD;&#xA;        }&#xD;&#xA;        if (fk.typeReference.isCollection != associationEnd.typeReference.isCollection) {&#xD;&#xA;            fk.typeReference.setIsCollection(associationEnd.typeReference.isCollection);&#xD;&#xA;        }&#xD;&#xA;    });&#xD;&#xA;    startingEndType.getChildren().filter(x =&gt; x.getMetadata(&quot;association&quot;) == associationId).forEach((attr, index) =&gt; {&#xD;&#xA;        if (index &gt;= primaryKeysLen) {&#xD;&#xA;            attr.delete();&#xD;&#xA;        }&#xD;&#xA;    });&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../common/requiresForeignKey.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../common/updateForeignKeyAttribute.ts&quot; /&gt;&#xD;&#xA;function updateForeignKeysForElement(element) {&#xD;&#xA;    for (let association of element.getAssociations()) {&#xD;&#xA;        if (!association.isTargetEnd()) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        let sourceType = lookup(association.getOtherEnd().typeReference.typeId);&#xD;&#xA;        let targetType = lookup(association.typeReference.typeId);&#xD;&#xA;        if (!sourceType || !targetType) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        if (requiresForeignKey(association)) {&#xD;&#xA;            updateForeignKeyAttribute(sourceType, targetType, association, association.id);&#xD;&#xA;        }&#xD;&#xA;        if (requiresForeignKey(association.getOtherEnd())) {&#xD;&#xA;            updateForeignKeyAttribute(targetType, sourceType, association.getOtherEnd(), association.id);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    removeOrphanedAssociations(element);&#xD;&#xA;}&#xD;&#xA;function removeOrphanedAssociations(element) {&#xD;&#xA;    let existingAssociations = element.getAssociations();&#xD;&#xA;    let existingAttributes = element.getChildren(&quot;Attribute&quot;);&#xD;&#xA;    for (let attr of existingAttributes) {&#xD;&#xA;        if (!attr.getMetadata(&quot;association&quot;)) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        if (!existingAssociations.some(x =&gt; attr.getMetadata(&quot;association&quot;) == x.id)) {&#xD;&#xA;            attr.delete();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;isAggregateRoot.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;getDefaultIdType.ts&quot; /&gt;&#xD;&#xA;function updatePartitionKeyAsPrimary(element, packageLoad = false) {&#xD;&#xA;    if (!isCosmosDb(element))&#xD;&#xA;        return;&#xD;&#xA;    let allowedTypes = [&quot;Class&quot;, &quot;Folder&quot;, &quot;Domain Package&quot;];&#xD;&#xA;    if (!allowedTypes.includes(element.specialization)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    const primaryKeyStereotypeId = &quot;64f6a994-4909-4a9d-a0a9-afc5adf2ef74&quot;;&#xD;&#xA;    const containerStereotypeId = &quot;ef9b1772-18e1-44ad-b606-66406221c805&quot;;&#xD;&#xA;    const multiTenancyStereotypeId = &quot;586eb05b-d647-4430-ac05-8d096fe3f79e&quot;;&#xD;&#xA;    let partitionKey = getPartitionKey(element);&#xD;&#xA;    if (!packageLoad &amp;&amp; [&quot;Folder&quot;, &quot;Domain Package&quot;].includes(element.specialization)) {&#xD;&#xA;        //prevent unnecessary package scans on every package change event.&#xD;&#xA;        if (element.hasMetadata(&quot;currentPartitionKey&quot;) &amp;&amp; element.getMetadata(&quot;currentPartitionKey&quot;) === partitionKey) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    if (element.specialization == &quot;Class&quot;) {&#xD;&#xA;        ensureCorrectPartitionKey(element, partitionKey, packageLoad);&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        updateDescendants(element, partitionKey, packageLoad);&#xD;&#xA;    }&#xD;&#xA;    element.setMetadata(&quot;currentPartitionKey&quot;, partitionKey);&#xD;&#xA;    function getPartitionKey(element) {&#xD;&#xA;        var _a, _b;&#xD;&#xA;        let result = &quot;&quot;;&#xD;&#xA;        while (element) {&#xD;&#xA;            if (element.hasStereotype(containerStereotypeId) &amp;&amp; ((_a = element.getStereotype(containerStereotypeId).getProperty(&quot;Partition Key&quot;)) === null || _a === void 0 ? void 0 : _a.value)) {&#xD;&#xA;                let partitionKey = (_b = element.getStereotype(containerStereotypeId).getProperty(&quot;Partition Key&quot;)) === null || _b === void 0 ? void 0 : _b.value;&#xD;&#xA;                if (!partitionKey)&#xD;&#xA;                    partitionKey = &quot;&quot;;&#xD;&#xA;                return partitionKey;&#xD;&#xA;            }&#xD;&#xA;            element = element.getParent();&#xD;&#xA;        }&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;    function updateDescendants(element, partitionKeyName, packageLoad) {&#xD;&#xA;        let children = element.getChildren().filter(c =&gt; allowedTypes.includes(c.specialization));&#xD;&#xA;        children.forEach(child =&gt; {&#xD;&#xA;            var _a;&#xD;&#xA;            if (child.hasStereotype(containerStereotypeId)) {&#xD;&#xA;                if (packageLoad) {&#xD;&#xA;                    //On package load we check the entire tree not just the scope of the edited item&#xD;&#xA;                    partitionKeyName = (_a = child.getStereotype(containerStereotypeId).getProperty(&quot;Partition Key&quot;)) === null || _a === void 0 ? void 0 : _a.value;&#xD;&#xA;                }&#xD;&#xA;                else {&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            if (child.specialization == &quot;Class&quot;) {&#xD;&#xA;                ensureCorrectPartitionKey(child, partitionKeyName, packageLoad);&#xD;&#xA;            }&#xD;&#xA;            else {&#xD;&#xA;                updateDescendants(child, partitionKeyName, packageLoad);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    function ensureCorrectPartitionKey(element, partitionKeyName, packageLoad) {&#xD;&#xA;        var _a;&#xD;&#xA;        if (element.specialization !== &quot;Class&quot;) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        if (!partitionKeyName) {&#xD;&#xA;            let toRemove = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .find(x =&gt; x.hasStereotype(primaryKeyStereotypeId) &amp;&amp; x.hasMetadata(&quot;partition-key&quot;));&#xD;&#xA;            if (toRemove != null) {&#xD;&#xA;                toRemove.delete();&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        else {&#xD;&#xA;            let toFix = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .find(x =&gt; x.hasStereotype(primaryKeyStereotypeId) &amp;&amp; x.hasMetadata(&quot;partition-key&quot;) &amp;&amp; x.getName().toLowerCase() != partitionKeyName.toLowerCase());&#xD;&#xA;            if (toFix != null) {&#xD;&#xA;                toFix.removeMetadata(&quot;partition-key&quot;);&#xD;&#xA;                toFix.removeStereotype(primaryKeyStereotypeId);&#xD;&#xA;            }&#xD;&#xA;            let toAdjust = element.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .find(x =&gt; x.getName().toLowerCase() == partitionKeyName.toLowerCase());&#xD;&#xA;            if (toAdjust != null) {&#xD;&#xA;                if (!toAdjust.hasStereotype(primaryKeyStereotypeId)) {&#xD;&#xA;                    toAdjust.addStereotype(primaryKeyStereotypeId);&#xD;&#xA;                }&#xD;&#xA;                let partitionPkStereotype = toAdjust.getStereotype(primaryKeyStereotypeId);&#xD;&#xA;                if (!element.hasStereotype(multiTenancyStereotypeId)) {&#xD;&#xA;                    (_a = partitionPkStereotype.getProperty(&quot;Data source&quot;)) === null || _a === void 0 ? void 0 : _a.setValue(&quot;User supplied&quot;);&#xD;&#xA;                }&#xD;&#xA;                toAdjust.setMetadata(&quot;partition-key&quot;, &quot;true&quot;);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    function isCosmosDb(element) {&#xD;&#xA;        var _a, _b, _c;&#xD;&#xA;        const documentStoreId = &quot;8b68020c-6652-484b-85e8-6c33e1d8031f&quot;;&#xD;&#xA;        const cosmosDbProvider = &quot;3e1a00f7-c6f1-4785-a544-bbcb17602b31&quot;;&#xD;&#xA;        let docDbStereotype = element.getPackage().getStereotype(documentStoreId);&#xD;&#xA;        let providers = lookupTypesOf(&quot;Document Db Provider&quot;).filter((elem, index) =&gt; lookupTypesOf(&quot;Document Db Provider&quot;).findIndex(obj =&gt; obj.id == elem.id) === index &amp;&amp; elem.getName() != &quot;Custom&quot;);&#xD;&#xA;        return ((!((_a = docDbStereotype.getProperty(&quot;Provider&quot;)) === null || _a === void 0 ? void 0 : _a.getValue()) &amp;&amp; providers.length == 1 &amp;&amp; providers[0].id == cosmosDbProvider) ||&#xD;&#xA;            ((_c = (_b = docDbStereotype.getProperty(&quot;Provider&quot;)) === null || _b === void 0 ? void 0 : _b.getValue()) === null || _c === void 0 ? void 0 : _c.id) == cosmosDbProvider);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/**&#xD;&#xA; * Used by Intent.Modules\Modules\Intent.Modules.Metadata.DocumentDB&#xD;&#xA; *&#xD;&#xA; * Source code here:&#xD;&#xA; * https://github.com/IntentArchitect/Intent.Modules/blob/master/DesignerMacros/src/documentdb/package-on-loaded/package-on-loaded.ts&#xD;&#xA; */&#xD;&#xA;/// &lt;reference path=&quot;../../common/ensureIsAtTargetVersion.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../common/updatePrimaryKey.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../common/updateForeignKeysForElement.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../common/updatePartitionKeyAsPrimary.ts&quot; /&gt;&#xD;&#xA;const package = element.getPackage();&#xD;&#xA;function execute() {&#xD;&#xA;    const documentStoreId = &quot;8b68020c-6652-484b-85e8-6c33e1d8031f&quot;;&#xD;&#xA;    package.getStereotypes();&#xD;&#xA;    if (!package.hasStereotype(documentStoreId) &amp;&amp;&#xD;&#xA;        !package.hasMetadata(&quot;database-paradigm-selected&quot;) &amp;&amp;&#xD;&#xA;        !package.hasStereotype(&quot;Relational Database&quot;)) {&#xD;&#xA;        package.addStereotype(documentStoreId);&#xD;&#xA;    }&#xD;&#xA;    package.setMetadata(&quot;database-paradigm-selected&quot;, &quot;true&quot;);&#xD;&#xA;    if (!package.hasStereotype(documentStoreId)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    let classes = lookupTypesOf(&quot;Class&quot;).filter(x =&gt; x.getPackage().id === package.id);&#xD;&#xA;    for (let classElement of classes) {&#xD;&#xA;        updatePrimaryKey(classElement);&#xD;&#xA;        updateForeignKeysForElement(classElement);&#xD;&#xA;    }&#xD;&#xA;    updatePartitionKeyAsPrimary(element, true);&#xD;&#xA;}&#xD;&#xA;execute();&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>