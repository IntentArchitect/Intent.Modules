<#@ template  debug="true"  inherits="CSharpTemplateBase<object>"#>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory.SDK" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #> 
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#


#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
<#  if (!IsNetCore2App()) { #>
using Microsoft.Extensions.Hosting;
<#  } #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge)]
    public class <#= ClassName #>
    {
        public <#= ClassName #>(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // [IntentManaged(Mode.Ignore)] // Uncomment this line to take over management of configuring services
        public void ConfigureServices(IServiceCollection services)
        {
<#  if (IsNetCore2App()) { #>
            services.AddMvc();
<#  } else { #>
            services.AddControllers();
<#  } #>
            IntentConfiguredServices(services);
<#= ServiceConfigurations() #>
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, <#= (IsNetCore2App() ? "IHostingEnvironment" : "IWebHostEnvironment") #> env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }
<#  if (IsNetCore2App()) { #>
            else
            {
                // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
                app.UseHsts();
            }
<#  } #>

<#  if (IsNetCore2App()) { #>
            app.UseHttpsRedirection();
            
            app.UseMvc();
<#  } else { #>
            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
<#  } #>
<#= Configurations() #>
        }

        public void IntentConfiguredServices(IServiceCollection services) 
        {
<#= Registrations() #>
        }

<#= Methods() #>
    }
}