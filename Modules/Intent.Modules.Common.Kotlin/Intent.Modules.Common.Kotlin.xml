<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intent.Modules.Common.Kotlin</name>
    </assembly>
    <members>
        <member name="T:Intent.Modules.Common.Kotlin.KotlinTemplateExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.KotlinTemplateExtensions.GetPackageName``1(Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase{``0})">
            <summary>
            Returns the package name based on the <paramref name="template"/>'s
            <see cref="P:Intent.Modules.Common.Templates.IntentTemplateBase.OutputTarget"/> and folder location within the designer.
            Uses the 'kotlin' folder as the root for the package name.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.KotlinTemplateExtensions.GetPackageName``1(Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase{``0},System.String)">
            <summary>
            Returns the package name based on the <paramref name="template"/>'s Output Target and folder location within the designer.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.KotlinTemplateExtensions.GetPackageName(Intent.Engine.IOutputTarget)">
            <summary>
            Returns the package name of the <paramref name="target"/>'s using the 'kotlin' folder as the root.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.KotlinTemplateExtensions.GetPackageName(Intent.Engine.IOutputTarget,System.String)">
            <summary>
            Returns the package name of the <paramref name="target"/>'s using the <paramref name="rootFolder"/> folder as the root.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.KotlinTemplateExtensions.ToKotlinPackage(System.String)">
            <summary>
            Escapes any invalid characters in the string for a Kotlin package name.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.KotlinTemplateExtensions.ToKotlinIdentifier(System.String)">
            <summary>
            Escapes any invalid characters in the string for a Kotlin identifier name (e.g. class, interface, etc.).
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinFileHelper.GetAllDeclareUsing(Intent.Templates.ITemplate)">
            <summary>
            This member will be changed to be only privately accessible or possibly removed
            entirely, please contact Intent Architect support should you have a dependency on it.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase.#ctor(System.String,Intent.Engine.IOutputTarget)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`2">
            <inheritdoc cref="T:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1"/>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`2.#ctor(System.String,Intent.Engine.IOutputTarget,`0)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`2"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`2.AddDecorator(`1)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`2.GetDecorators">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`2.GetDecoratorsOutput(System.Func{`1,System.String})">
            <summary>
            Aggregates the specified <paramref name="propertyFunc"/> property of all decorators.
            </summary>
            <remarks>
            Ignores Decorators where the property returns null.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`2.GetDecoratorsOutput(System.Func{`1,System.String},System.String)">
            <summary>
            Aggregates the specified <paramref name="propertyFunc"/> property of all decorators and
            suffixes the result with <paramref name="suffixIfFound"/> provided that there is output
            from one or more decorators.
            </summary>
            <remarks>
            Ignores Decorators where the property returns null.
            </remarks>
        </member>
        <member name="T:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1">
            <summary>
            Template base for Kotlin files, which invokes code-management to make updates to existing files.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.#ctor(System.String,Intent.Engine.IOutputTarget,`0)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.ClassName">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.Dependencies">
            <summary>
            Library dependencies of this template.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.Location">
            <inheritdoc cref="P:Intent.Templates.IFileMetadata.LocationInProject"/>.
        </member>
        <member name="P:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.Namespace">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.Package">
            <summary>
            The package for the type defined by this template.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.AddDependency(Intent.Modules.Common.Kotlin.Templates.KotlinDependency)">
            <summary>
            Adds a <see cref="T:Intent.Modules.Common.Kotlin.Templates.KotlinDependency"/> which can be use by Maven or Gradle to import dependencies.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.AddImport(System.String)">
            <summary>
            Imports the fully qualified type name <paramref name="fullyQualifiedType"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.BeforeTemplateExecution">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.CreateCollectionFormatter(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.DeclareImports">
            <summary>
            Override this method to add additional imports to this Kotlin template. It is recommended to call base.DeclareImports().
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.GetTypeName(Intent.Modules.Common.ITemplateDependency,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the type name of the <paramref name="templateDependency"/> as a string. Will automatically import types if necessary.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.GetTemplateFile">
            <summary>
            Gets the <see cref="T:Intent.Code.Weaving.Kotlin.Editor.KotlinFile"/> of the template output.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.GetTypeName(Intent.Metadata.Models.ITypeReference)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.GetTypeName(Intent.Metadata.Models.ITypeReference,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.ImportType(System.String)">
            <summary>
            Imports the fully qualified type and returns its reference name. For example,
            java.util.List will import java.util.List and return List.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.RunTemplate">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Templates.KotlinTemplateBase`1.UseType(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo)">
            <summary>
            Returns a string representation of the provided <paramref name="resolvedTypeInfo"/>,
            adds any required imports and applicable template dependencies.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter">
            <summary>
            Kotlin <see cref="T:Intent.Modules.Common.TypeResolution.ICollectionFormatter"/> which recognizes collection types with generic parameters
            as well as the <c>[]</c> syntax.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter.GetOrCreate(System.String)">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter"/> based on the provided
            <paramref name="collectionFormat"/>.
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter"/> instances is first checked for an
            already existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            </remarks>
            <param name="collectionFormat">The collection type</param>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter.GetOrCreate(Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo)">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter"/> constructed with the
            specified parameters.
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter"/> instances is first checked for an
            already existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            <para>
            If any of the values of <see cref="P:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.GenericTypeParameters"/> is null,
            they will be substituted by the provided <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo"/> in the
            <see cref="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter.ApplyTo(Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo)"/> method.
            </para>
            </remarks>
            <param name="typeInfo">The collection type</param>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter.Format(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter.ApplyTo(Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo)">
            <summary>
            Returns a <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo"/> which is the type of collection for this
            instance of the <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinCollectionFormatter"/> of the provided
            <paramref name="typeInfo"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo">
            <summary>
            Kotlin specialization of <see cref="T:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.Create(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Intent.Metadata.Models.ITypeReference,Intent.Templates.ITemplate,System.Collections.Generic.IReadOnlyList{Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo})">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.Create(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo,System.Collections.Generic.IReadOnlyList{Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo})">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo"/> from the provided <paramref name="resolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.CreateForArray(Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo,System.Boolean,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo"/> for an array resolved type.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.WithIsNullable(System.Boolean)">
            <inheritdoc cref="M:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.WithIsNullable(System.Boolean)" />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.WithIsNullableProtected(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.Package">
            <summary>
            The package of the type.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.GenericTypeParameters">
            <inheritdoc cref="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.GenericTypeParameters"/>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.GetAllResolvedTypes">
            <summary>
            Returns the the fully qualified name for this this type as well as the recursively acquired
            packages of this type's <see cref="P:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.GenericTypeParameters"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.ToString">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinResolvedTypeInfo.GetFullyQualifiedTypeName">
            <summary>
            Gets the fully qualified type name.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinTypeResolver">
            <summary>
            Kotlin specialization of <see cref="T:Intent.Modules.Common.TypeResolution.TypeResolverBase"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinTypeResolver.#ctor">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinTypeResolver"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.TypeResolvers.KotlinTypeResolver.CreateContext">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.Kotlin.Weaving.KotlinWeavingOutputTransformer">
            <summary>
            An <see cref="T:Intent.Plugins.FactoryExtensions.ITransformOutput"/> which will weave changes between an existing file
            and the output of a template respecting annotations in the files.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Kotlin.Weaving.KotlinWeavingOutputTransformer.Id">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Weaving.KotlinWeavingOutputTransformer.CanTransform(Intent.Engine.IOutputFile)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Kotlin.Weaving.KotlinWeavingOutputTransformer.Transform(Intent.Engine.IOutputFile)">
            <inheritdoc />
        </member>
    </members>
</doc>
