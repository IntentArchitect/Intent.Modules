// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Unity.Templates.UnityConfig
{
    using Intent.SoftwareFactory.Templates;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\UnityConfig\UnityConfigTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class UnityConfigTemplate : IntentRoslynProjectItemTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(" \r\nusing System;\r\nusing System.Linq;\r\nusing System.Collections.Generic;\r\nusing Un" +
                    "ity;\r\nusing Unity.RegistrationByConvention;\r\n");
            
            #line 17 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\UnityConfig\UnityConfigTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DependencyUsings));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 21 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\UnityConfig\UnityConfigTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    [IntentManaged(Mode.Merge)]\r\n    public class ");
            
            #line 24 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\UnityConfig\UnityConfigTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        #region Unity Container\r\n        private static readonly Lazy<IU" +
                    "nityContainer> container = new Lazy<IUnityContainer>(() =>\r\n        {\r\n         " +
                    "   var container = new UnityContainer();\r\n            RegisterTypes(container);\r" +
                    "\n            return container;\r\n        });\r\n\r\n        /// <summary>\r\n        //" +
                    "/ Gets the configured Unity container.\r\n        /// </summary>\r\n        public s" +
                    "tatic IUnityContainer GetConfiguredContainer()\r\n        {\r\n            return co" +
                    "ntainer.Value;\r\n        }\r\n        #endregion\r\n\r\n        private static void Reg" +
                    "isterTypes(IUnityContainer container)\r\n        {\r\n            LoadConventions(co" +
                    "ntainer);\r\n            LoadGeneratedRegistrations(container);\r\n            LoadC" +
                    "ustom(container);\r\n        }\r\n\r\n        /// <summary>Registers the type mappings" +
                    " with the Unity container.</summary>\r\n        /// <param name=\"container\">The un" +
                    "ity container to configure.</param>\r\n        /// <remarks>There is no need to re" +
                    "gister concrete types (unless you want to change the defaults), \r\n        /// as" +
                    " Unity allows resolving a concrete type even if it was not previously registered" +
                    ".</remarks>\r\n        [IntentManaged(Mode.Ignore)]\r\n        private static void L" +
                    "oadCustom(IUnityContainer container)\r\n        {\r\n            //Add Custom Unity " +
                    "Registrations\r\n        }\r\n\r\n        private static void LoadConventions(IUnityCo" +
                    "ntainer container)\r\n        {\r\n            var assemblies = AppDomain.CurrentDom" +
                    "ain.GetAssemblies()\r\n                .Where(x => x.FullName.StartsWith(\"Intent\")" +
                    "\r\n");
            
            #line 64 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\UnityConfig\UnityConfigTemplate.tt"
  foreach(var project in ApplicationProjects) { 
            
            #line default
            #line hidden
            this.Write("                            || x.FullName.Equals(\"");
            
            #line 65 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\UnityConfig\UnityConfigTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(project.Name));
            
            #line default
            #line hidden
            this.Write("\")\r\n");
            
            #line 66 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\UnityConfig\UnityConfigTemplate.tt"
  } 
            
            #line default
            #line hidden
            this.Write(@"                      ).ToArray();
            container.RegisterTypes(
               AllClasses.FromAssemblies(assemblies),
               WithMappings.FromMatchingInterface,
               WithName.Default,
               WithLifetime.PerResolve);
        }

        private static void LoadGeneratedRegistrations(IUnityContainer container)
        {
            ");
            
            #line 77 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\UnityConfig\UnityConfigTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Registrations()));
            
            #line default
            #line hidden
            this.Write("\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
