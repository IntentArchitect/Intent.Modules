// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Unity.Templates.PerServiceCallLifetimeManager
{
    using Intent.SoftwareFactory.Templates;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\PerServiceCallLifetimeManager\PerServiceCallLifetimeManagerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class PerServiceCallLifetimeManagerTemplate : IntentRoslynProjectItemTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(" \r\n");
            
            #line 13 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\PerServiceCallLifetimeManager\PerServiceCallLifetimeManagerTemplate.tt"




            
            #line default
            #line hidden
            this.Write("using Newtonsoft.Json;\r\nusing Newtonsoft.Json.Serialization;\r\nusing Owin;\r\nusing " +
                    "System.Web.Http;\r\nusing Unity.WebApi;\r\n");
            
            #line 22 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\PerServiceCallLifetimeManager\PerServiceCallLifetimeManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DependencyUsings));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 26 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\PerServiceCallLifetimeManager\PerServiceCallLifetimeManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    /// <summary>\r\n    /// Per request lifetime manager, ensuring that the s" +
                    "ame instance shall be resolved at any stage during a service call.\r\n    /// This" +
                    " lifetime manager requires that the ServiceCallContext is set with an approriate" +
                    " IContextBackingStore.\r\n    /// For more information, see the following article " +
                    "https://www.wiktorzychla.com/2013/03/unity-and-http-per-request-lifetime.html\r\n " +
                    "   /// </summary>\r\n    public class PerServiceCallLifetimeManager : LifetimeMana" +
                    "ger\r\n    {\r\n        private readonly object _key = new object();\r\n\r\n        publ" +
                    "ic override object GetValue(ILifetimeContainer container = null)\r\n        {\r\n   " +
                    "         return BackingStore.GetValue(_key);\r\n        }\r\n\r\n        public overri" +
                    "de void SetValue(object newValue, ILifetimeContainer container = null)\r\n        " +
                    "{\r\n            if (newValue == null)\r\n            {\r\n                RemoveValue" +
                    "();\r\n            }\r\n\r\n            BackingStore.SetValue(_key, newValue);\r\n      " +
                    "  }\r\n\r\n        public override void RemoveValue(ILifetimeContainer container = n" +
                    "ull)\r\n        {\r\n            BackingStore.RemoveValue(_key);\r\n        }\r\n\r\n     " +
                    "   protected override LifetimeManager OnCreateLifetimeManager()\r\n        {\r\n    " +
                    "        return new PerServiceCallLifetimeManager();\r\n        }\r\n\r\n        privat" +
                    "e static PerServiceCallLifetimeManagerBackingStore BackingStore\r\n        {\r\n    " +
                    "        get\r\n            {\r\n                var instance = ServiceCallContext.In" +
                    "stance.Get<PerServiceCallLifetimeManagerBackingStore>();\r\n                if (in" +
                    "stance == null)\r\n                {\r\n                    instance = new PerServic" +
                    "eCallLifetimeManagerBackingStore();\r\n                    ServiceCallContext.Inst" +
                    "ance.Set(instance);\r\n                }\r\n\r\n                return instance;\r\n    " +
                    "        }\r\n        }\r\n\r\n        private class PerServiceCallLifetimeManagerBacki" +
                    "ngStore : IDisposable\r\n        {\r\n            private readonly Dictionary<object" +
                    ", object> _values = new Dictionary<object, object>();\r\n            private bool " +
                    "_isDisposing;\r\n\r\n            public void SetValue(object key, object value)\r\n   " +
                    "         {\r\n                _values[key] = value;\r\n            }\r\n\r\n            " +
                    "public void RemoveValue(object key)\r\n            {\r\n                _values.Remo" +
                    "ve(key);\r\n            }\r\n\r\n            public object GetValue(object key)\r\n     " +
                    "       {\r\n                _values.TryGetValue(key, out var returnValue);\r\n\r\n    " +
                    "            return returnValue;\r\n            }\r\n\r\n            public void Dispos" +
                    "e()\r\n            {\r\n                // Guard against stack overflows (if one of " +
                    "the values for some reason tries to dispose this)\r\n                if (_isDispos" +
                    "ing)\r\n                {\r\n                    return;\r\n                }\r\n\r\n     " +
                    "           _isDisposing = true;\r\n\r\n                foreach (var value in _values" +
                    ")\r\n                {\r\n                    var disposable = value.Value as IDispo" +
                    "sable;\r\n                    disposable?.Dispose();\r\n                }\r\n         " +
                    "   }\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
