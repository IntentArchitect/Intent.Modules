// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Unity.Templates.PerServiceCallLifetimeManager
{
    using Intent.Modules.Common.Templates;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\PerServiceCallLifetimeManager\PerServiceCallLifetimeManagerTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class PerServiceCallLifetimeManagerTemplate : IntentRoslynProjectItemTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(" \r\n");
            
            #line 13 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\PerServiceCallLifetimeManager\PerServiceCallLifetimeManagerTemplate.tt"




            
            #line default
            #line hidden
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing Intent.Framework.Core.Con" +
                    "text;\r\nusing Unity.Lifetime;\r\n");
            
            #line 21 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\PerServiceCallLifetimeManager\PerServiceCallLifetimeManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DependencyUsings));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamespace ");
            
            #line 25 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\PerServiceCallLifetimeManager\PerServiceCallLifetimeManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write(@"
{
    /// <summary>
    /// Per request lifetime manager, ensuring that the same instance shall be resolved at any stage during a service call.
    /// This lifetime manager requires that the ServiceCallContext is set with an approriate IContextBackingStore.
    /// For more information, see the following article https://www.wiktorzychla.com/2013/03/unity-and-http-per-request-lifetime.html
    /// </summary>
    public class ");
            
            #line 32 "C:\Dev\Intent.Modules\Modules\Intent.Modules.Unity\Templates\PerServiceCallLifetimeManager\PerServiceCallLifetimeManagerTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ClassName));
            
            #line default
            #line hidden
            this.Write(" : LifetimeManager\r\n    {\r\n        private readonly object _key = new object();\r\n" +
                    "\r\n        public override object GetValue(ILifetimeContainer container = null)\r\n" +
                    "        {\r\n            return BackingStore.GetValue(_key);\r\n        }\r\n\r\n       " +
                    " public override void SetValue(object newValue, ILifetimeContainer container = n" +
                    "ull)\r\n        {\r\n            if (newValue == null)\r\n            {\r\n             " +
                    "   RemoveValue();\r\n            }\r\n\r\n            BackingStore.SetValue(_key, newV" +
                    "alue);\r\n        }\r\n\r\n        public override void RemoveValue(ILifetimeContainer" +
                    " container = null)\r\n        {\r\n            BackingStore.RemoveValue(_key);\r\n    " +
                    "    }\r\n\r\n        protected override LifetimeManager OnCreateLifetimeManager()\r\n " +
                    "       {\r\n            return new PerServiceCallLifetimeManager();\r\n        }\r\n\r\n" +
                    "        private static PerServiceCallLifetimeManagerBackingStore BackingStore\r\n " +
                    "       {\r\n            get\r\n            {\r\n                var instance = Service" +
                    "CallContext.Instance.Get<PerServiceCallLifetimeManagerBackingStore>();\r\n        " +
                    "        if (instance == null)\r\n                {\r\n                    instance =" +
                    " new PerServiceCallLifetimeManagerBackingStore();\r\n                    ServiceCa" +
                    "llContext.Instance.Set(instance);\r\n                }\r\n\r\n                return i" +
                    "nstance;\r\n            }\r\n        }\r\n\r\n        private class PerServiceCallLifeti" +
                    "meManagerBackingStore : IDisposable\r\n        {\r\n            private readonly Dic" +
                    "tionary<object, object> _values = new Dictionary<object, object>();\r\n           " +
                    " private bool _isDisposing;\r\n\r\n            public void SetValue(object key, obje" +
                    "ct value)\r\n            {\r\n                _values[key] = value;\r\n            }\r\n" +
                    "\r\n            public void RemoveValue(object key)\r\n            {\r\n              " +
                    "  _values.Remove(key);\r\n            }\r\n\r\n            public object GetValue(obje" +
                    "ct key)\r\n            {\r\n                _values.TryGetValue(key, out var returnV" +
                    "alue);\r\n\r\n                return returnValue;\r\n            }\r\n\r\n            publ" +
                    "ic void Dispose()\r\n            {\r\n                // Guard against stack overflo" +
                    "ws (if one of the values for some reason tries to dispose this)\r\n               " +
                    " if (_isDisposing)\r\n                {\r\n                    return;\r\n            " +
                    "    }\r\n\r\n                _isDisposing = true;\r\n\r\n                foreach (var va" +
                    "lue in _values)\r\n                {\r\n                    var disposable = value.V" +
                    "alue as IDisposable;\r\n                    disposable?.Dispose();\r\n              " +
                    "  }\r\n            }\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
