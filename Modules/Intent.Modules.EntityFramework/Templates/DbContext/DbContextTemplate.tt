<#@ template  debug="true" inherits="CSharpTemplateBase<IEnumerable<ClassModel>>"#>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.Modelers.Domain.Api" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
using System.Data.Entity;
using System.Data.Entity.ModelConfiguration.Conventions;
<#= DependencyUsings #>
<#= DeclareUsings() #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public class <#= ClassName#> : <#= GetBaseClass() #>
    {
        public <#= ClassName#>() : base("<#= Project.Application.Name#>DB")
        {

        } 

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            ConfigureConventions(modelBuilder);
            
<# foreach (var model in Model) {#>
            modelBuilder.Configurations.Add(new <#= GetMappingName(model) #>());
<# }#>
        }

		[IntentManaged(Mode.Ignore)]
        private void ConfigureConventions(DbModelBuilder modelBuilder)
        {
            modelBuilder.Conventions.Remove<OneToManyCascadeDeleteConvention>();

			// Customize Default Schema
			// modelBuilder.HasDefaultSchema("<#= Project.Application.Name#>");
        }<#= GetMethods() #>
    }
}