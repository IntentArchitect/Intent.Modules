<#@ template  debug="true" inherits="IntentRoslynProjectItemTemplateBase<IClass>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.MetaModel.Domain" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="Intent.SoftwareFactory.MetaData"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 

<#//Some initial validation
    foreach (var associationEnd in Model.AssociatedClasses)
    {
        var association = associationEnd.Association;
 
        //if there is more than 1 parent association && there are any which are not 0..1->1 (this is a manual inheritance mapping)
        if ((Model.AssociatedClasses.Where(ae => ae.Association.AssociationType == AssociationType.Composition &&  ae.Association.TargetEnd == ae).Count() > 1)
            && (Model.AssociatedClasses.Where(ae => ae.Association.AssociationType == AssociationType.Composition &&  ae.Association.TargetEnd == ae && ae.Association.RelationshipString() != "0..1->1").Count() > 0)
            )
        {
            throw new Exception(string.Format("Unsupported Mapping, multiple Composition parents to {0} ", Model.Name));            
        }

        if (!association.TargetEnd.IsNavigable)
        {
            throw new Exception(string.Format("Unsupported Source Needs to be Navigable to Target relationship  {0} on {1} ", association.ToString(), association.TargetEnd.Class.Name));
        }

        //Unsupported Associations
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->0..1"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship  {0} - this relationship implies composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->1"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship  {0} - this relationship implies composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Aggregation ) && ( association.RelationshipString() == "1->*"))
        {
            throw new Exception(string.Format("Unsupported Aggregation relationship {0}, this relationship implies Composition", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString() == "0..1->0..1"))
        {
            throw new Exception(string.Format("Unsupported Composition relationship {0}", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString() == "0..1->*"))
        {
            throw new Exception(string.Format("Unsupported Composition relationship {0}, this relationship implies aggregation", association.ToString()));
        }
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString().StartsWith("*->")))
        {
            throw new Exception(string.Format("Unsupported Composition relationship {0}, this relationship implies aggregation", association.ToString()));
        }
        //Naviagability Requirement
        if ((association.AssociationType == AssociationType.Composition ) && ( association.RelationshipString() == "0..1->1") && (!association.SourceEnd.IsNavigable))
        {
            throw new Exception(string.Format("Unsupported. IsNavigable from Composition Required for Composition relationship {0}", association.ToString()));
        }
    }

#>
using System;
using System.Data.Entity.ModelConfiguration;
using System.Data.Entity.Infrastructure.Annotations;
using System.ComponentModel.DataAnnotations.Schema;
<#= DependencyUsings #>
using Intent.CodeGen;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public partial class <#= Model.Name.ToPascalCase() #>Mapping : EntityTypeConfiguration<<#= Model.Name.ToPascalCase() #>>
    {
    
        public <#= Model.Name.ToPascalCase() #>Mapping()
        {
<#    if (Model.ParentClass == null || Model.ParentClass.GetStereotypeProperty<string>("InheritanceMapping", "Type") != "TPH")
    {#>
            this.ToTable("<#= Model.Name #>");
<#    }
    if (Model.GetStereotypeProperty<string>("InheritanceMapping", "Type") == "TPH")
    {
        foreach (var subClass in Model.ChildClasses)
        {
#>
            this.Map<<#= subClass.Name.ToPascalCase() #>>(m => m.Requires("DbSpecialization").HasValue((int)<#= Model.Name.ToPascalCase() #>Specialization.<#= subClass.Name.ToPascalCase() #>));
<#      }
    }
	bool mapPk = true;
    //Key Mapping
    if (Model.ParentClass != null && Model.ParentClass.GetStereotypeProperty<string>("InheritanceMapping", "Type") == "TPH")    
    {
		mapPk = false;
        //No Key mapping required
    } 

	if (mapPk || ImplicitSurrogateKey) {#>
            this.HasKey(x => x.Id);
            this.Property(x => x.Id).HasColumnName("Id");
<#  }  
    foreach (var attribute in Model.Attributes)
    {
		if (mapPk && attribute.Name.ToLower() == "id")
        {
			if (ImplicitSurrogateKey) {
				throw new Exception(string.Format("Surrogate Key is implicit for class {0}. Either remove the 'id' attribute, or disable this option in the module", Model.Name));
            }
#>
            this.HasKey(x => x.Id);
            this.Property(x => x.Id).HasColumnName("Id");
<#			continue;
        }#>
            this.Property(x => x.<#= attribute.Name.ToPascalCase()#>)<#
        if (attribute.GetStereotypeProperty("UniqueConstraint", "IsIndex", false)){ #>

                .HasColumnAnnotation("Index", new IndexAnnotation( new IndexAttribute("<#= Model.Name.ToPascalCase()#>_<#= attribute.GetStereotypeProperty("UniqueConstraint", "UniqueKey", "Unique1")#>", <#=attribute.GetStereotypeProperty("UniqueConstraint", "Order", "1")#>) { IsUnique = true }))<#
        }
        if (!string.IsNullOrEmpty(attribute.GetStereotypeProperty("Index", "UniqueKey", ""))){#>

                .HasColumnAnnotation("Index", new IndexAnnotation( new IndexAttribute("<#= Model.Name.ToPascalCase()#>_<#= attribute.GetStereotypeProperty("Index", "UniqueKey", "Unique1")#>", <#= attribute.GetStereotypeProperty("Index", "Order", "1")#>) { IsUnique = <#= attribute.GetStereotypeProperty("Index", "IsUnique", "false")#> }))<#
        }
        if (!attribute.IsNullable){#>

                .IsRequired()<#
        }

        if (attribute.Type.Name == "string" )
        {
            var maxLength = attribute.GetStereotypeProperty<int?>("Text", "MaxLength");    
            if (maxLength.HasValue){
        #>

                .HasMaxLength(<#= maxLength.Value#>)<#
            }
        }

        var decimalPrecision = attribute.GetStereotypeProperty<int?>("Numeric", "Precision");
        var decimalScale = attribute.GetStereotypeProperty<int?>("Numeric", "Scale");
        if (decimalPrecision.HasValue && decimalScale.HasValue){#>

                .HasPrecision(<#= decimalPrecision#>, <#= decimalScale #>)<#
        }
        switch (attribute.Type.Name)
        {
            case "date" :#>

                .HasColumnType("date")<#
                break;
            case "datetime" :#>

                .HasColumnType("datetime2")<#
                break;
        }    
#>;

<#  }#>
<#    foreach (var associationEnd in Model.AssociatedClasses)
    {

		if (associationEnd != associationEnd.Association.TargetEnd)
        {
			continue;
        }

        switch (associationEnd.Relationship())
        {
            case RelationshipType.OneToOne :
                MapOneToOne(associationEnd);
                break;
            case RelationshipType.OneToMany :#>
            <#= string.Format("this.{0}(x => x.{1})", associationEnd.MinMultiplicity != "0" ? "HasRequired" : "HasOptional", associationEnd.Name().ToPascalCase())#>
                .WithMany(<#= associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase() : "" #>)
<#				if (UseForeignKeys) { #>
				.HasForeignKey(x => x.<#= associationEnd.Name().ToPascalCase()#>Id)
<#				} else { #>
                .Map(m => m.MapKey("<#= associationEnd.Name().ToPascalCase()#>Id"))
<#				} #>
                ;

<#                  break;
            case RelationshipType.ManyToOne :#>
            this.HasMany(x => x.<#= associationEnd.Name().ToPascalCase()#>)
                .<#= string.Format("{0}({1})", associationEnd.OtherEnd().MinMultiplicity != "0" ? "WithRequired" : "WithOptional", "x => x." + associationEnd.OtherEnd().Name().ToPascalCase())#>
<#				if (UseForeignKeys) { #>
				.HasForeignKey(x => x.<#= associationEnd.OtherEnd().Name().ToPascalCase()#>Id)
<#				} else { #>
				.Map(m => m.MapKey("<#= associationEnd.OtherEnd().Name().ToPascalCase()#>Id"))
<#				} #>
                ;

<#                  break;
            case RelationshipType.ManyToMany :#>
            this.HasMany(x => x.<#= associationEnd.Name().ToPascalCase()#>)
                .WithMany(<#= associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase() : "" #>)
                .Map(m => 
                    {
                        m.ToTable("<#= associationEnd.OtherEnd().Class.Name.ToPascalCase() + associationEnd.Name().ToPascalCase() #>");
                        m.MapLeftKey("<#= associationEnd.OtherEnd().Class.Name.ToPascalCase()#>Id");
                        m.MapRightKey("<#= associationEnd.Class.Name.ToPascalCase()#>Id");
                    });

<#                  break;
        }       
    }
#>
        }
    }
}
<#+
public void MapOneToOne(IAssociationEnd associationEnd)
{
    var parent = associationEnd.Association.SourceEnd;
    var child = associationEnd.Association.TargetEnd;

    string hasClause = associationEnd.MinMultiplicity != "0" ? "HasRequired" : "HasOptional";
    string withClause = "With" + (associationEnd.OtherEnd().MinMultiplicity != "0" ? "Required" : "Optional") + ((associationEnd.MinMultiplicity != "0") == (associationEnd.OtherEnd().MinMultiplicity != "0") ?  DeterminePrinciple(associationEnd)  : "");    
#>
            <#= string.Format("this.{0}(x => x.{1})", hasClause, associationEnd.Name().ToPascalCase())#>
            <#= string.Format(".{0}({1})", withClause, associationEnd.OtherEnd().IsNavigable ? "x => x." + associationEnd.OtherEnd().Name().ToPascalCase(): "" )#>
<#+  if ((associationEnd.Association.AssociationType == AssociationType.Composition && associationEnd.Association.RelationshipString() == "0..1->1")
            || (associationEnd.Association.AssociationType == AssociationType.Aggregation && associationEnd.Association.RelationshipString() == "0..1->1")
        )
    {#>
            .Map(m => m.MapKey("<#= associationEnd.Name().ToPascalCase() + "Id"#>"))
<#+    }#>
            ;
<#+    
}

public string DeterminePrinciple(IAssociationEnd associationEnd)
{
    if (associationEnd.Association.AssociationType == AssociationType.Composition )
    {
        return "Principal";
    }
    if (associationEnd.Association.AssociationType == AssociationType.Aggregation )
    {
        return "Dependent";
    }
    return "";
}


#>