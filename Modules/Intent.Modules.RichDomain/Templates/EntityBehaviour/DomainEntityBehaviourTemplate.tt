<#@ template  debug="true"  inherits="IntentRoslynProjectItemTemplateBase<Class>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.UMLModel" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>  

using System;
using System.Collections.Generic;
using System.Linq;

[assembly: DefaultIntentManaged(Mode.Ignore)]

namespace <#= Namespace #>
{   
    [IntentManaged(Mode.Merge)]
    [DefaultIntentManaged(Mode.Merge, Signature = Mode.Merge, Body = Mode.Ignore, Targets = Targets.Methods, AccessModifiers = AccessModifiers.Public)]
    partial class <#= Model.Name#>  
    {

<#	if (Model.Attributes.Any()) {#>
        [IntentInitialGen]
<#		string constructorDefinition = Model.Attributes.Any(a => !a.IsAssociationAttribute)
			? Model.Attributes.Where(a => !a.IsAssociationAttribute).Select(x => x.DomainType() + " " + x.Name.ToCamelCase()).Aggregate((x, y) => x + ", " + y)
			: "";
#>
        public <#= Model.Name#>(<#= constructorDefinition #>)
            : this (false)
        {
<#		foreach (var attribute in Model.Attributes.Where(a => !a.IsAssociationAttribute)) {#>
            <#= attribute.Name.ToPascalCase()#> = <#= attribute.Name.ToCamelCase()#>;
<#		}//for
#>
        }

<#		foreach (var attribute in Model.Attributes.Where(a => a.Stereotypes.Any(x => x.Name == "Calculated"))) {#>
        public <#= attribute.DomainType() #> <#= attribute.Name.ToPascalCase() #>
        {
            get { return default(<#= attribute.DomainType() #>); }
            set { }
        }
<#		}
	}//if
#>
<#  foreach (var operation in Model.Operations)
    {
        string returnType = operation.ReturnType != null ? operation.ReturnType.DomainType() : "void";
        string parameterDefinitions = operation.Parameters.Any() ? operation.Parameters.Select(x => x.DomainType() + " " + x.Name.ToCamelCase()).Aggregate((x, y) => x + ", " + y) : "";
        if (!operation.IsCommandBehaviour())
        {
			if (!operation.IsAbstract)
			{#>
        public <#= returnType #> <#= operation.Name.ToPascalCase() #>(<#= parameterDefinitions #>)
        {
            throw new NotImplementedException("Replace with your implementation...");
        }
<#			}
			else
			{ #>
        public abstract <#= returnType #> <#= operation.Name.ToPascalCase() #>(<#= parameterDefinitions #>);
<#			}
		}
    }
#>

    }

    [IntentManaged(Mode.Merge)]
    [DefaultIntentManaged(Mode.Merge, Signature = Mode.Merge, Body = Mode.Ignore, Targets = Targets.Methods, AccessModifiers = AccessModifiers.Public)]
    partial class <#= Model.Name#>Behaviour
    {
<#  foreach (var operation in Model.Operations)
    {
        string returnType = operation.ReturnType != null ? operation.ReturnType.DomainType() : "void";
        string parameterDefinitions = operation.Parameters.Any() ? operation.Parameters.Select(x => x.DomainType() + " " + x.Name.ToCamelCase()).Aggregate((x, y) => x + ", " + y) : "";
        if (operation.IsCommandBehaviour())
        {
#>
        public <#= returnType #> <#= operation.Name.ToPascalCase() #>(<#= parameterDefinitions #>)
        {<#= OperationStart() #>
            throw new NotImplementedException("Replace with your implementation...");
        }

<#      }
    }
#>
    }
}
