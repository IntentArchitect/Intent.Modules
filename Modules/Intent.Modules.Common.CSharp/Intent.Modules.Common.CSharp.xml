<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intent.Modules.Common.CSharp</name>
    </assembly>
    <members>
        <member name="T:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest">
            <summary>
            For adding a section or key to a .NET configuration file. If the configuration file already
            contains a section or key with the provided <see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.Key"/>, it is left untouched.
            </summary>
            <remarks>
            Templates for appsettings[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;].json and
            Web/App[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;].config files may listen for these
            requests and update themselves accordingly.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.#ctor(System.String,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.#ctor(System.String,System.Object,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.Key">
            <summary>
            For appsettings[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;].json files, this is the top
            level section name to add. For Web/App[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;].config
            files, this is "key" attribute value for the &lt;settings /&gt; element to add.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.Value">
            <summary>
            The value to add for the <see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.Key"/>.
            </summary>
            <remarks>
            For appsettings[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;].json files, the object will
            be serialized to json (even an anonymous object works fine). For
            Web/App[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;].config files, this needs to be a
            string as it's placed in the "key" attribute value for the &lt;settings /&gt; element
            being added.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment">
            <summary>
            Optional. The specific appsettings.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;.json or
            Web/App.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;.config file to apply to, when not
            specified then the default appsettings.json or Web/App.config file is applied to.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.ForProjectWithRole">
            <summary>
            Optional. Name of the output target 'Role' which must be present in the project within
            the Intent Architect Visual Studio designer.
            </summary>
            <remarks>
            Used for disambiguating which appsettings[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;].json
            or Web/App[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.RuntimeEnvironment"/>&gt;].config file to apply to when a
            solution has multiple projects each with their own configuration file(s).
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.WasHandled">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.AppSettingRegistrationRequest.MarkHandled">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest">
            <summary>
            For adding a connection string to a .NET configuration file. If the configuration file
            already contains a connection string with the provided <see cref="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.Name"/>, it is left
            untouched.
            </summary>
            <remarks>
            Templates for appsettings[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.RuntimeEnvironment"/>&gt;].json and
            Web/App[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.RuntimeEnvironment"/>&gt;].config files may listen for these
            requests and update themselves accordingly.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.Name">
            <summary>
            The name of the connection string.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.ConnectionString">
            <summary>
            The connection string value.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.ProviderName">
            <summary>
            Only applicable for Web/App[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.RuntimeEnvironment"/>&gt;].config files
            and is used to populate the "providerName" attribute.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.RuntimeEnvironment">
            <summary>
            Optional. The specific appsettings.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.RuntimeEnvironment"/>&gt;.json or
            Web/App.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.RuntimeEnvironment"/>&gt;.config file to apply to, when not
            specified then the default appsettings.json or Web/App.config file is applied to.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.ForProjectWithRole">
            <summary>
            Optional. Name of the output target 'Role' which must be present in the project within
            the Intent Architect Visual Studio designer.
            </summary>
            <remarks>
            Used for disambiguating which appsettings.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.RuntimeEnvironment"/>&gt;.json
            or Web/App[.&lt;<see cref="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.RuntimeEnvironment"/>&gt;].config file to apply to when a
            solution has multiple projects each with their own configuration file(s).
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.WasHandled">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.ConnectionStringRegistrationRequest.MarkHandled">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequest">
            <summary>
            Sets the default launch url path in the <c>launchsettings.json</c> file to the provided
            <see cref="P:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequest.UrlPath"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequest.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequest"/>.
            </summary>
            <remarks>
            Use <see cref="!:DefaultLaunchUrlPathRequestExtensions.PublishDefaultLaunchUrlRequest"/>
            to perform publishing of this event.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequest.UrlPath">
            <summary>
            The Path component to be applied to the <c>launchUrl</c> for the default profiles.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequest.ForProjectWithRole">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequest.WasHandled">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequest.MarkHandled">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequestExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequest"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.DefaultLaunchUrlPathRequestExtensions.PublishDefaultLaunchUrlPathRequest(Intent.Modules.Common.Templates.IntentTemplateBase,System.String,System.String)">
            <summary>
            Sets the default launch url path in the <c>launchsettings.json</c> file to the provided
            <paramref name="urlPath"/>.
            </summary>
            <remarks>
            This needs to be called within the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.BeforeTemplateExecution"/> method.
            This event can only be published once, publishing it a second time will raise an exception.
            If the <c>launchsettings.json</c> file already exists, it will not be updated.
            </remarks>
            <param name="template">
            An instance of a type derived from <see cref="T:Intent.Modules.Common.Templates.IntentTemplateBase"/> with an accessible
            instance of <see cref="T:Intent.Eventing.IApplicationEventDispatcher"/> which is used to make the request.
            </param>
            <param name="urlPath">
            The Path component to be applied to the <c>launchUrl</c> for the default profiles.
            <example>/swagger/index.html</example>
            </param>
            <param name="forProjectWithRole">
            Optional. Name of the output target 'Role' which must be present in the project within
            the Intent Architect Visual Studio designer.
            <remarks>
            Used for disambiguating which <c>launchsettings.json</c>
            file to apply to when a solution has multiple projects each with their own
            <c>launchsettings.json</c> file.
            </remarks>
            </param>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest">
            <summary>
            A request for the key/value pair to be added to the environment variables of the application's launchSettings.json file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest.#ctor(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates the <see cref="T:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest"/>.
            </summary>
            <param name="key">The key string for the variable.</param>
            <param name="value">The value object for the variable.</param>
            <param name="targetProfiles">The target profiles that should register this environment variable. If null, the variable will be registered with all profiles.</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest.#ctor(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest"/>.
            </summary>
            <param name="key">The key string for the variable.</param>
            <param name="value">The value object for the variable.</param>
            <param name="targetProfiles">The target profiles that should register this environment variable. If null, the variable will be registered with all profiles.</param>
            <param name="forProjectWithRole">The <see cref="P:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest.ForProjectWithRole"/> value.</param>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest.Key">
            <summary>
            The key string for the variable.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest.Value">
            <summary>
            The value object for the variable. 
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest.TargetProfiles">
            <summary>
            The target profiles that should register this environment variable. If null, the variable will be registered with all profiles.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest.ForProjectWithRole">
            <summary>
            Optional. Name of the output target 'Role' which must be present in the project within
            the Intent Architect Visual Studio designer.
            </summary>
            <remarks>
            Used for disambiguating which <c>launchSettings.json</c> file to apply to when a solution has multiple
            projects each with their own <c>launchSettings.json</c> file.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest.WasHandled">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.EnvironmentVariableRegistrationRequest.MarkHandled">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest">
            <summary>
            For adding a section or key to an Azure Functions host.json file. If the file already
            has the provided <see cref="P:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest.Key"/> defined, it is left untouched.
            </summary>
            <remarks>
            Templates for host.json files may listen for these requests and update themselves
            accordingly.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest.#ctor(System.String,System.Object,System.String)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest.Key">
            <summary>
            The key within the JSON file under which the <see cref="P:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest.Value"/> will be applied.
            May be separated with a colon (:) to target nested objects.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest.Value">
            <summary>
            The value to set the <see cref="P:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest.Key"/> to.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest.ForProjectWithRole">
            <summary>
            Optional. Name of the output target 'Role' which must be present in the project within
            the Intent Architect Visual Studio designer.
            </summary>
            <remarks>
            Used for disambiguating which host.json file to apply to when a solution has multiple
            projects each with their own host.json file.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest.WasHandled">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.HostSettingRegistrationRequest.MarkHandled">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Configuration.IForProjectWithRoleRequest">
            <summary>
            Used for requests which should only apply to template instances under a project with a
            particular output target 'Role' present under it within Intent Architect Visual Studio
            designer.
            </summary>
            <remarks>
            Used for disambiguating which file to apply to when a solution has multiple
            projects each with their own file.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.IForProjectWithRoleRequest.ForProjectWithRole">
            <summary>
            Optional. Name of the output target 'Role' which must be present in the project within
            the Intent Architect Visual Studio designer.
            </summary>
            <remarks>
            Used for disambiguating which file to apply to when a solution has multiple
            projects each with their own file.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.IForProjectWithRoleRequest.WasHandled">
            <summary>
            Whether or not <see cref="M:Intent.Modules.Common.CSharp.Configuration.IForProjectWithRoleRequest.MarkHandled"/> has been called.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.IForProjectWithRoleRequest.MarkHandled">
            <summary>
            Sets <see cref="P:Intent.Modules.Common.CSharp.Configuration.IForProjectWithRoleRequest.WasHandled"/> to <see langword="true"/> if it wasn't already.
            </summary>
            <remarks>
            Should be called by handlers so that publishers can query <see cref="P:Intent.Modules.Common.CSharp.Configuration.IForProjectWithRoleRequest.WasHandled"/>
            and potentially show warnings when its value is <see langword="false"/>.
            </remarks>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest">
            <summary>
            For adding a profile to a <c>launchSettings.json</c>.
            </summary>
            <remarks>
            Templates for <c>launchSettings.json</c> files may listen for these
            requests and update themselves accordingly.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.Name">
            <summary>
            The name of the profile to add.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.CommandName">
            <summary>
            The value to populate in the <c>commandName</c> field.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.LaunchBrowser">
            <summary>
            The value to populate in the <c>launchBrowser</c> field.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.LaunchUrl">
            <summary>
            The value to populate in the <c>launchUrl</c> field.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.ApplicationUrl">
            <summary>
            The value to populate in the <c>applicationUrl</c> field.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.PublishAllPorts">
            <summary>
            The value to populate in the <c>publishAllPorts</c> field.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.UseSsl">
            <summary>
            The value to populate in the <c>useSSL</c> field.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.EnvironmentVariables">
            <summary>
            Key/value pairs of environment variables to be added to profile.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.ForProjectWithRole">
            <summary>
            Optional. Name of the output target 'Role' which must be present in the project within
            the Intent Architect Visual Studio designer.
            </summary>
            <remarks>
            Used for disambiguating which <c>launchSettings.json</c> file to apply to when a solution has multiple
            projects each with their own <c>launchSettings.json</c> file.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.WasHandled">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Configuration.LaunchProfileRegistrationRequest.MarkHandled">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest">
            <summary>
            Request that the Hosting application's application builder
            register a given extension method call that will delegate
            certain pipeline setup responsibility to that method. 
            </summary>
            <example>
            This will produce the equivalent of:
            app.UseHttpsRedirection();
            </example>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ExtensionMethodName">
            <summary>
            Get extension method name.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ExtensionMethodParameterList">
            <summary>
            Get list of types used to supply to the extension method as input parameters.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.Priority">
            <summary>
            Get priority that will determine the order in which this request
            will be registered in.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.TemplateDependencies">
            <summary>
            Get additional dependencies.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.RequiredNamespaces">
            <summary>
            Get namespaces to be included in using directives.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ToRegister(System.String,System.String[])">
            <summary>
            Register a given extension method that will configure the application pipeline
            for a given aspect.
            </summary>
            <param name="extensionMethodName">
            The extension method name only.
            <example>UseHttpsRedirection</example>
            </param>
            <param name="extensionMethodParameterList">
            If required, supply a list of expected types that your extension method will require
            as input parameters. See (<see cref="T:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ParameterType"/>) to know what is available.
            <example>
            [ "<see cref="F:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ParameterType.Configuration"/>" ] for inserting the "configuration" variable
            as the first and only parameter for the extension method.
            </example>
            </param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.WithPriority(System.Int32)">
            <summary>
            Supply a priority that will determine the order in which this gets registered.  
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.HasDependency(Intent.Templates.ITemplate)">
            <summary>
            Extension methods may require the template instance that represents the class
            that holds the extension method in question in order to properly import it in the file
            where the application builder is being used. 
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.RequiresUsingNamespaces(System.String[])">
            <summary>
            Supply namespaces that will be used for including using directives. 
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ParameterType">
            <summary>
            Available parameter types to be used for supplying what input your extension method will require.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ParameterType.Configuration">
            <summary>
            Access the .NET Configuration service.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ParameterType.WebHostEnvironment">
            <summary>
            Access the AspNet Core's Web Host Environment variables service.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ParameterType.HostEnvironment">
            <summary>
            Access the Generic Host's Environment variables service.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest">
            <summary>
            Request that the Dependency Injection Container register a given type
            (optionally with a contract or interface) to be resolved at runtime.
            </summary>
            <example>
            This should produce the equivalent of:
            services.AddTransient&lt;IItemRepository, ItemRepository&gt;();
            </example>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.ToRegister(Intent.Modules.Common.Templates.IClassProvider)">
            <summary>
            Register a given concrete type using the Template that represents that type. 
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.ToRegister(System.String)">
            <summary>
            Register a given concrete type using its fully qualified name. 
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.ForInterface(Intent.Modules.Common.Templates.IClassProvider)">
            <summary>
            Associate an interface for the concrete type using the template instance for the interface.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.ForInterface(System.String)">
            <summary>
            Associate an interface for the concrete type using its fully qualified name.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.ForConcern(System.String)">
            <summary>
            Declare optionally a container configuration destination. 
            </summary>
            <example>Application <i>or</i> Infrastructure</example>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.WithLifeTime(System.String)">
            <summary>
            Set the resolved instance lifetime using the options provided in
            <see cref="T:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.LifeTime"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.WithPerServiceCallLifeTime">
            <summary>
            Set the resolved type instance's lifetime to last the duration of a service call. 
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.WithSingletonLifeTime">
            <summary>
            Set the resolved type instance's lifetime to last the duration of the host application.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.WithResolveFromContainer">
            <summary>
            Specify whether the concrete type will be instantiated by invoking
            a service provider or not.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.RequiresUsingNamespaces(System.String[])">
            <summary>
            Supply namespaces that will be used for including using directives. 
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.HasDependency(Intent.Templates.ITemplate)">
            <summary>
            Some resolution type configurations may require additional types
            which can be supplied by making use of the actual template instance that
            represents them. 
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.WithPriority(System.Int32)">
            <summary>
            Supply a priority that will determine the order in which this gets registered.  
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.MarkAsHandled">
            <summary>
            In the event that another Container registration location has handled
            this request, it needs to mark it as handled.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.RequiredNamespaces">
            <summary>
            Given namespaces to be included in using directives.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.Concern">
            <summary>
            Given container configuration destination.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.InterfaceType">
            <summary>
            Given interface type used for resolving a concrete type.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.ConcreteType">
            <summary>
            Given concrete type used for type resolution.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.Lifetime">
            <summary>
            Given resolution object's lifetime configuration.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.Priority">
            <summary>
            Given priority that will determine the order in which this request
            will be registered in.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.ResolveFromContainer">
            <summary>
            Given setting where upon resolving the interface type, that the service provider will be used 
            to resolve the concrete type as the resolution type. 
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.TemplateDependencies">
            <summary>
            Given additional dependencies.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.IsHandled">
            <summary>
            Has a Container handler already handled this registration? If so, ignore it.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.LifeTime">
            <summary>
            Available lifetime options when a type is resolved.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.LifeTime.Transient">
            <summary>
            Created on each type resolution.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.LifeTime.Singleton">
            <summary>
            Created once for the duration of the application host.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest.LifeTime.PerServiceCall">
            <summary>
            Created once per duration of a service call.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest">
            <summary>
            Request that the Dependency Injection Container be used to configure
            more advanced use cases other than the type resolution done by
            <see cref="T:Intent.Modules.Common.CSharp.DependencyInjection.ContainerRegistrationRequest"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.ExtensionMethodName">
            <summary>
            Get extension method name.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.ExtensionMethodParameterList">
            <summary>
            Get list of types used to supply to the extension method as input parameters.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.Priority">
            <summary>
            Get priority that will determine the order in which this request
            will be registered in.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.IsHandled">
            <summary>
            Has a Container handler already handled this registration? If so, ignore it.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.Concern">
            <summary>
            Get container configuration destination.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.TemplateDependencies">
            <summary>
            Get additional dependencies.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.RequiredNamespaces">
            <summary>
            Get namespaces to be included in using directives.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.ToRegister(System.String,System.String[])">
            <summary>
            Register a given extension method that will configure a given aspect.
            </summary>
            <param name="extensionMethodName">
            The extension method name only.
            <example>AddInfrastructure</example>
            </param>
            <param name="extensionMethodParameterList">
            If required, supply a list of expected types that your extension method will require
            as input parameters. See (<see cref="T:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.ParameterType"/>) to know what is available.
            <example>
            [ "<see cref="F:Intent.Modules.Common.CSharp.DependencyInjection.ApplicationBuilderRegistrationRequest.ParameterType.Configuration"/>" ] for inserting the "configuration" variable
            as the first and only parameter for the extension method.
            </example>
            </param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.WithPriority(System.Int32)">
            <summary>
            Supply a priority that will determine the order in which this gets registered.  
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.HasDependency(Intent.Templates.ITemplate)">
            <summary>
            Some resolution type configurations may require additional types
            which can be supplied by making use of the actual template instance that
            represents them. 
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.RequiresUsingNamespaces(System.String[])">
            <summary>
            Supply namespaces that will be used for including using directives. 
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.ForConcern(System.String)">
            <summary>
            Declare optionally a container configuration destination. 
            </summary>
            <example>Application <i>or</i> Infrastructure</example>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.MarkAsHandled">
            <summary>
            In the event that another Container registration location has handled
            this request, it needs to mark it as handled.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.ParameterType">
            <summary>
            Available parameter types to be used for supplying what input your extension method will require.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.DependencyInjection.ServiceConfigurationRequest.ParameterType.Configuration">
            <summary>
            Access the .NET Configuration service.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.FactoryExtensions.KnownCSharpTypesCache">
            <summary>
            Cache of known C# types as determined by all templates which are
            <see cref="T:Intent.Modules.Common.Templates.IClassProvider"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.FactoryExtensions.KnownCSharpTypesCache.Id">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.FactoryExtensions.KnownCSharpTypesCache.OnAfterTemplateRegistrations(Intent.Engine.IApplication)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.FactoryExtensions.KnownCSharpTypesCache.GetKnownTypesByNamespace">
            <summary>
            Returns known types by namespace.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour">
            <summary>
            Controls casing behaviour of <see cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCSharpIdentifier(System.String,Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour)"/>
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour.AsIs">
            <summary>
            Do not change casing.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour.MakeFirstLetterLower">
            <summary>
            Ensures that first letter is lowercase, i.e., the result will be
            <see href="https://en.wikipedia.org/wiki/Camel_case">camelCased</see>.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour.MakeFirstLetterUpper">
            <summary>
            Ensures that first letter is uppercase, i.e., the result will be
            <see href="https://en.wikipedia.org/wiki/Pascal_case">PascalCased</see>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Templates.CSharpCodeExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpCodeExtensions.GetMethodParameters``2(Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns a comma separated list of parameters for a method or constructor based on the <paramref name="parameters"/> argument.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpCodeExtensions.GetParameters``2(Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns a comma separated list of parameters for a method or constructor based on the <paramref name="parameters"/> argument.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpCodeExtensions.GetArguments``2(Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Returns a comma separated list of arguments to be passed into a method or constructor based on the <paramref name="parameters"/> argument.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig">
            <summary>
            Specialization of <see cref="T:Intent.Modules.Common.Templates.TemplateFileConfig"/> for setting
            metadata specific to C# templates.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig.#ctor(System.String,System.String,System.String,Intent.Templates.OverwriteBehaviour,System.String,System.String,System.String)">
            <summary>
            Sets the C# file configuration.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig.AutoFormat">
            <summary>
            Whether or not to automatically apply formatting to C# files.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig.ClassName">
            <summary>
            The primary class name of this file.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig.Namespace">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig.ApplyNamespaceFormatting">
            <summary>
            Whether or not to apply formatting (such as PascalCasing) to namespaces. 
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Templates.CSharpOutputTargetExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Engine.IOutputTarget"/> for use with C# templates.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpOutputTargetExtensions.GetNamespace(Intent.Engine.IOutputTarget)">
            <summary>
            Returns a namespace string based on the full path from the <paramref name="target"/>. This will include folders and C# projects.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase.#ctor(System.String,Intent.Engine.IOutputTarget)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`2">
            <inheritdoc cref="T:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1"/>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`2.#ctor(System.String,Intent.Engine.IOutputTarget,`0)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`2"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`2.GetDecorators">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`2.AddDecorator(`1)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`2.GetDecoratorsOutput(System.Func{`1,System.String})">
            <summary>
            Aggregates the specified <paramref name="propertyFunc"/> property of all decorators.
            </summary>
            <remarks>
            Ignores Decorators where the property returns null.
            </remarks>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1">
            <summary>
            Template base for C# files, which invokes code-management to make updates to existing files.
            <para>
            Learn more about templates in
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common.csharp&amp;additionalData=templates">
            this article</seealso>.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.#ctor(System.String,Intent.Engine.IOutputTarget,`0)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetTypeInfo(Intent.Modules.Common.Templates.IClassProvider)">
            <inheritdoc cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(Intent.Modules.Common.Templates.IClassProvider)"/>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.Project">
            <summary>
            Returns the <see cref="T:Intent.Engine.IOutputTarget"/> for the .csproj file that contains this file.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.Namespace">
            <summary>
            Returns the class' namespace as specified in the <see cref="T:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig"/>.
            Escapes any invalid characters and enforces pascal-case. May be overriden.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.ClassName">
            <summary>
            Returns the class name as specified in the <see cref="T:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig"/>. Escapes
            any invalid characters and enforces pascal-case. May be overriden.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddUsing(System.String)">
            <summary>
            Add the using clause with the specified <paramref name="namespace"/> to this template's file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.UseType(System.String,System.String)">
            <summary>
            Adds the <paramref name="namespace"/> as a dependent using clause and returns the <paramref name="name"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.UseType(System.String)">
            <summary>
            Adds the namespace of the <paramref name="fullName"/> as a dependent namespace and returns the normalized name.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AfterTemplateRegistration">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.BeforeTemplateExecution">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.RunTemplate">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddTypeSource(System.String)">
            <inheritdoc cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(System.String)"/>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddTypeSource(System.String,System.String)">
            <inheritdoc cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(System.String,System.String)"/>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.CreateCollectionFormatter(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.NormalizeTypeName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.NormalizeNamespace(System.String)">
            <summary>
            Converts the namespace of a fully qualified class name to the relative namespace for this class instance.
            </summary>
            <param name="foreignType">The foreign type which is ideally fully qualified</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.ConfigureRoslynMerger">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetTemplateFileConfig">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.UseType(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo)">
            <summary>
            Returns a string representation of the provided <paramref name="resolvedTypeInfo"/>,
            adds any required usings, applicable template dependencies and makes a best effort to
            avoid conflicts between the type name and known other types and namespaces.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.DefineFileConfig">
            <summary>
            Factory method for creating a <see cref="T:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig"/> for a template.
            </summary>
            <remarks>
            <see cref="T:Intent.Modules.Common.CSharp.Templates.CSharpFileConfig"/> is used to specify configuration such as its
            type name, namespace and relative output location.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.DependencyUsings">
            <summary>
            Returns all using statements that are introduced through dependencies.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetNugetDependencies">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddNugetDependency(System.String,System.String)">
            <summary>
            Registers that the specified NuGet package should be installed in the csproj file where this file resides.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddNugetDependency(Intent.Modules.Common.VisualStudio.INugetPackageInfo)">
            <summary>
            Registers that the specified NuGet package should be installed in the .csproj file where this file resides.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddProjectDependency(System.String)">
            <summary>
            Registers that a <c>.csproj</c> containing a Role named <paramref name="roleName"/>
            should be a dependency of the <c>.csproj</c> where this file resides.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddFrameworkDependency(System.String)">
            <summary>
            Registers that the specified <FrameworkReference/> element should be add in the .csproj file where this file resides.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFrameworkDependencies">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetAssemblyDependencies">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddAssemblyReference(Intent.Modules.Common.VisualStudio.IAssemblyReference)">
            <summary>
            Registers that the specified GAC assembly should be installed in the .csproj file where this file resides.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.DeclareUsings">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(Intent.Modules.Common.Templates.IClassProvider)">
            <summary>
            Resolves the fully qualified type name for the provided <paramref name="classProvider"/>
            parameter.
            
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            Resolving type names</seealso> article for more information.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(Intent.Metadata.Models.IElement)">
            <summary>
            Resolves the fully qualified type name for the provided <paramref name="element"/>
            parameter.
            
            Any source added by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> or <see cref="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddTypeSource(System.String,System.String)"/>
            will be searched to resolve the type name.
            
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            Resolving type names</seealso> article for more information.
            </para>
            </summary>
            <param name="element">The <see cref="T:Intent.Metadata.Models.IElement"/> for which to get the type name.</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(Intent.Metadata.Models.IElement,System.String)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(Intent.Metadata.Models.IElement)"/> instead.
            </summary>
            <remarks>
            Even before this method was marked as obsolete, the <paramref name="collectionFormat"/>
            value actually had no effect.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(Intent.Metadata.Models.IHasTypeReference,System.String)">
            <summary>
            Resolves the fully qualified type name for the provided <paramref name="hasTypeReference"/>
            parameter.
            
            Any source added by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> or <see cref="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.AddTypeSource(System.String,System.String)"/>
            will be searched to resolve the type name.
            
            Applies the <paramref name="collectionFormat"/> if the resolved type's <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/>
            is true.
            
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            Resolving type names</seealso> article for more information.
            </para>
            </summary>
            <param name="hasTypeReference">The <see cref="T:Intent.Metadata.Models.IHasTypeReference"/> for which to get the type name.</param>
            <param name="collectionFormat">The collection format to be applied if the resolved type <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true.</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(Intent.Templates.ITemplate,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name for the provided <paramref name="template"/>
            parameter.
            
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            Resolving type names</seealso> article for more information.
            </para>
            </summary>
            <param name="template">The <see cref="T:Intent.Templates.ITemplate"/> for which to get the type name.</param>
            <param name="options"><see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> to use.</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(Intent.Modules.Common.ITemplateDependency,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name for the provided <paramref name="templateDependency"/>
            parameter.
            
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            Resolving type names</seealso> article for more information.
            </para>
            </summary>
            <param name="templateDependency">The <see cref="T:Intent.Modules.Common.ITemplateDependency"/> for which to get the type name.</param>
            <param name="options"><see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> to use.</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(Intent.Metadata.Models.ITypeReference,System.String)">
            <summary>
            Resolves the fully qualified type name for the provided <paramref name="typeReference"/> parameter.
            Any added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> will be
            searched to resolve the type name.
            Applies the <paramref name="collectionFormat"/> if the resolved type's <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            Resolving type names</seealso> article for more information.
            </para>
            </summary>
            <param name="typeReference">The <see cref="T:Intent.Metadata.Models.ITypeReference"/> for which to get the type name.</param>
            <param name="collectionFormat">The collection format to be applied if the resolved type <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(System.String,Intent.Metadata.Models.IMetadataModel,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name for the provided <paramref name="templateId"/>
            and <paramref name="model"/> parameters.
            
            This overload assumes that the Template can have many instances and identifies the target instance
            based on which has the provided <paramref name="model"/>.
            
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            Resolving type names</seealso> article for more information.
            </para>
            </summary>
            <param name="templateId">The unique Template identifier.</param>
            <param name="model">The model instance that the Template must be bound to.</param>
            <param name="options">Optional <see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> to apply.</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(System.String,System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name for the provided <paramref name="templateId"/>
            and <paramref name="modelId"/> parameters.
            
            This overload assumes that the Template can have many instances and identifies the target instance
            based on which has the provided <paramref name="modelId"/>.
            
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            Resolving type names</seealso> article for more information.
            </para>
            </summary>
            <param name="templateId">The unique Template identifier.</param>
            <param name="modelId">The identifier of the model that the Template must be bound to.</param>
            <param name="options">Optional <see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> to apply.</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1.GetFullyQualifiedTypeName(System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name for the provided <paramref name="templateId"/>
            parameter.
            
            This overload assumes that the Template only has a single instance and will throw an
            exception if more than one is found.
            
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            Resolving type names</seealso> article for more information.
            </para>
            </summary>
            <param name="templateId">The unique Template identifier.</param>
            <param name="options">Optional <see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> to apply.</param>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Templates.ModelHasFolderTemplateExtensions">
            <summary>
            C# template extensions.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.ModelHasFolderTemplateExtensions.GetFolderPath``1(Intent.Modules.Common.Templates.IntentTemplateBase{``0},System.String[])">
            <summary>
            Obsolete, use <see cref="M:Intent.Modules.Common.ModelHasFolderTemplateExtensions.GetFolderPath``1(Intent.Modules.Common.Templates.IntentTemplateBase{``0},System.String[])"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.ModelHasFolderTemplateExtensions.GetFolderPath(Intent.Modules.Common.Templates.IntentTemplateBase{System.Object},System.String[])">
            <summary>
            Obsolete, use <see cref="M:Intent.Modules.Common.ModelHasFolderTemplateExtensions.GetFolderPath(Intent.Modules.Common.Templates.IntentTemplateBase{System.Object},System.String[])"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.ModelHasFolderTemplateExtensions.GetFolderPath(Intent.Modules.Common.Templates.IntentTemplateBase,System.String[])">
            <summary>
            Obsolete, use <see cref="M:Intent.Modules.Common.ModelHasFolderTemplateExtensions.GetFolderPath(Intent.Modules.Common.Templates.IntentTemplateBase,System.String[])"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.ModelHasFolderTemplateExtensions.GetNamespace``1(Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase{``0},System.String[])">
            <summary>
            Creates a fully qualified namespace based on the OutputTarget location and the parent folders of this template's model as described in the designer.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.ModelHasFolderTemplateExtensions.GetNamespace(Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase{System.Object},System.String[])">
            <summary>
            Creates a fully qualified namespace based on the OutputTarget location and the <paramref name="additionalFolders"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.ModelHasFolderTemplateExtensions.GetNamespace(Intent.Modules.Common.Templates.IntentTemplateBase,System.String[])">
            <summary>
            Creates a fully qualified namespace based on the OutputTarget location and the <paramref name="additionalFolders"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.Templates.TemplateExtensions">
            <summary>
            Extensions methods for authoring C# templates.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.GetAllNugetDependencies(Intent.Templates.ITemplate)">
            <summary>
            Aggregates all results from <see cref="M:Intent.Modules.Common.VisualStudio.IHasNugetDependencies.GetNugetDependencies"/> for a template, including those specified on decorators.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.GetAllAssemblyDependencies(Intent.Templates.ITemplate)">
            <summary>
            Aggregates all results from <see cref="M:Intent.Modules.Common.VisualStudio.IHasAssemblyDependencies.GetAssemblyDependencies"/> for a template, including those specified on decorators.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.GetAllFrameworkDependencies(Intent.Templates.ITemplate)">
            <summary>
            Aggregates all results from <see cref="M:Intent.Modules.Common.VisualStudio.IHasFrameworkDependencies.GetFrameworkDependencies"/> for a template, including those specified on decorators.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCamelCase(System.String,System.Boolean)">
            <summary>
            Obsolete, use <see cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToLocalVariableName(System.String)"/> or <see cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToParameterName(System.String)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.AsClassName(System.String)">
            <summary>
            Changes the type name from being for an interface to instead be for a class.
            </summary>
            <remarks>
            A leading 'I' is removed so long as the 2nd character is also uppercase.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToPrivateMember(System.String)">
            <summary>
            Obsolete, use <see cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToPrivateMemberName(System.String)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToPrivateMemberName(System.String)">
            <summary>
            Applies <see cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCSharpIdentifier(System.String,Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour)"/> to
            <paramref name="identifier"/> with <see cref="F:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour.MakeFirstLetterLower"/>
            and ensures the result is prefixed with an '_'.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToParameterName(System.String)">
            <summary>
            Applies <see cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCSharpIdentifier(System.String,Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour)"/> to
            <paramref name="identifier"/> with <see cref="F:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour.MakeFirstLetterLower"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToLocalVariableName(System.String)">
            <summary>
            Applies <see cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCSharpIdentifier(System.String,Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour)"/> to
            <paramref name="identifier"/> with <see cref="F:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour.MakeFirstLetterLower"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToTypeName(System.String)">
            <summary>
            Applies <see cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCSharpIdentifier(System.String,Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour)"/> to
            <paramref name="identifier"/> with <see cref="F:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour.MakeFirstLetterUpper"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCSharpNamespace(System.String)">
            <summary>
            Converts <paramref name="string"/> to a valid C# namespace (e.g. removes disallowed characters).
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCSharpIdentifier(System.String)">
            <summary>
            An overload of <see cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCSharpIdentifier(System.String,Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour)"/> where
            <see cref="T:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour"/> is set to <see cref="F:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour.MakeFirstLetterUpper"/>.
            </summary>
            <remarks>
            See also: <seealso cref="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToTypeName(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.Templates.TemplateExtensions.ToCSharpIdentifier(System.String,Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour)">
            <summary>
            Converts <paramref name="identifier"/> to a valid C#
            <see href="https://docs.microsoft.com/dotnet/csharp/fundamentals/coding-style/identifier-names">identifier name</see>.
            </summary>
            <remarks>
            The following rules are applied to the <paramref name="identifier"/> in the following order:
            <list type="bullet">
            <item>If the string is null or whitespace, an empty string is returned.</item>
            <item>Occurrences of '#' are replaced with 'Sharp`.</item>
            <item>Occurrences of '&amp;' are replaced with 'And`.</item>
            <item>Any invalid characters are replaced with a ' ' (these spaces are removed in a subsequent step).</item>
            <item>In the event there are multiple words, each except for the first has its first letter capitalized and are then joined together.</item>
            <item><paramref name="capitalizationBehaviour"/> is applied to first character.</item>
            <item>If the first character is a number, then an '_' prefix is applied.</item>
            <item>If the identifier is a <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/keywords/">C# keyword</see>, then an '@' prefix is applied.</item>
            </list>
            </remarks>
            <param name="identifier">The value to change into a C# identifier.</param>
            <param name="capitalizationBehaviour">The <see cref="T:Intent.Modules.Common.CSharp.Templates.CapitalizationBehaviour"/> to use.</param>
            <returns>A valid C# identifier.</returns>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter">
            <summary>
            C# <see cref="T:Intent.Modules.Common.TypeResolution.ICollectionFormatter"/> which recognizes collection types with generic parameters
            as well as the <c>[]</c> syntax.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.ApplyTo(Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo)">
            <summary>
            Returns a <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo"/> which is the type of collection for this
            instance of the <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> of the provided
            <paramref name="typeInfo"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.Create(Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo)">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> constructed with the
            specified parameters.
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> instances is first checked for an
            already existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            <para>
            If any of the values of <see cref="P:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.GenericTypeParameters"/> is null,
            they will be substituted by the provided <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo"/> in the
            <see cref="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.ApplyTo(Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo)"/> method.
            </para>
            </remarks>
            <param name="typeInfo">The collection type, for example:
            <c>System.Collection.Generic.Dictionary&lt;TKey, TValue&gt;</c>.</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.Create(System.String)">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> based on the provided
            <paramref name="collectionFormat"/>.
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> instances is first checked for an
            already existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            </remarks>
            <param name="collectionFormat">The collection type, for example:
            <c>System.Collection.Generic.List&lt;T&gt;</c>.</param>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.CreateIEnumerable">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> for <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> instances is first checked for an
            already existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.CreateICollection">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> for <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> instances is first checked for an
            already existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.CreateIList">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> for <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> instances is first checked for an
            already existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.CreateList">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> for <see cref="T:System.Collections.Generic.List`1"/>
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter"/> instances is first checked for an
            already existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.Format(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.GetOrCreate(Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo)">
            <summary>
            Obsolete. Please use <see cref="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.Create(Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo)"/>
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.GetOrCreate(System.String)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter.Create(System.String)"/> instead.
            </summary>
            <param name="collectionFormat">The collection type, for example:
            <c>System.Collection.Generic.List&lt;T&gt;</c>.</param>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpJaggedArray">
            <summary>
            An array dimension for <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo"/>.
            </summary>
            <remarks>
            See <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/arrays/multidimensional-arrays">Multidimensional Arrays</see>
            and <see href="https://docs.microsoft.com/dotnet/csharp/programming-guide/arrays/jagged-arrays">Jagged Arrays</see>
            for more information on arrays in C#.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpJaggedArray.#ctor(System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpJaggedArray"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.TypeResolvers.CSharpJaggedArray.Dimensions">
            <summary>
            The number of dimensions of this jagged array.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpJaggedArray.ToString">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpNullableFormatter">
            <summary>
            C# implementation of <see cref="T:Intent.Modules.Common.TypeResolution.INullableFormatter"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpNullableFormatter.Create(Intent.Modules.Common.CSharp.VisualStudio.ICSharpProject)">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpNullableFormatter"/> constructed with the
            specified <paramref name="project"/>.
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpNullableFormatter"/> instances is first checked for an
            already existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpNullableFormatter.GetOrCreate(Intent.Modules.Common.CSharp.VisualStudio.ICSharpProject)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpNullableFormatter.Create(Intent.Modules.Common.CSharp.VisualStudio.ICSharpProject)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpNullableFormatter.AsNullable(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo">
            <summary>
            C# specialization of <see cref="T:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.Create(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo,System.Collections.Generic.IReadOnlyList{Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo})">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo"/> from the provided <paramref name="resolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.Create(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Intent.Metadata.Models.ITypeReference,Intent.Modules.Common.TypeResolution.INullableFormatter,Intent.Templates.ITemplate,System.Collections.Generic.IReadOnlyList{Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo})">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo"/> for a non-array resolved type.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.CreateForArray(Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo,System.Boolean,Intent.Modules.Common.TypeResolution.INullableFormatter,System.Collections.Generic.IReadOnlyList{Intent.Modules.Common.CSharp.TypeResolvers.CSharpJaggedArray})">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.CreateForArray(Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo,System.Boolean,System.Collections.Generic.IReadOnlyList{Intent.Modules.Common.CSharp.TypeResolvers.CSharpJaggedArray},Intent.Modules.Common.TypeResolution.INullableFormatter)"/>
            instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.CreateForArray(Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo,System.Boolean,System.Collections.Generic.IReadOnlyList{Intent.Modules.Common.CSharp.TypeResolvers.CSharpJaggedArray},Intent.Modules.Common.TypeResolution.INullableFormatter)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo"/> for an array resolved type.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.WithIsNullable(System.Boolean)">
            <inheritdoc cref="M:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.WithIsNullable(System.Boolean)" />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.WithIsNullableProtected(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.Namespace">
            <summary>
            The namespace for the type.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.JaggedArrays">
            <summary>
            The <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpJaggedArray"/> of the type, could be empty.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.GenericTypeParameters">
            <inheritdoc cref="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.GenericTypeParameters"/>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.GetNamespaces">
            <summary>
            Returns the namespace for this this type as well as the recursively acquired namespaces
            of this type's <see cref="P:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.GenericTypeParameters"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.GetFullyQualifiedTypeName">
            <summary>
            Gets the fully qualified type name.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpResolvedTypeInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpTypeResolver">
            <summary>
            C# specialization of <see cref="T:Intent.Modules.Common.TypeResolution.TypeResolverBase"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpTypeResolver.#ctor(Intent.Modules.Common.CSharp.TypeResolvers.CSharpCollectionFormatter,Intent.Modules.Common.TypeResolution.INullableFormatter)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.TypeResolvers.CSharpTypeResolver"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.TypeResolvers.CSharpTypeResolver.CreateContext">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.VisualStudio.CopyToOutputDirectory">
            <summary>
            Possible values for <see cref="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithCopyToOutputDirectory``1(``0,Intent.Modules.Common.CSharp.VisualStudio.CopyToOutputDirectory)"/> which correlates with the
            "Copy to Output Directory" file property in Visual Studio.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.CopyToOutputDirectory.DoNotCopy">
            <summary>
            Adds <c>&lt;CopyToOutputDirectory&gt;Never&lt;/CopyToOutputDirectory&gt;</c>
            as per the "Do not copy" option in Visual Studio.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.CopyToOutputDirectory.CopyAlways">
            <summary>
            Adds <c>&lt;CopyToOutputDirectory&gt;Always&lt;/CopyToOutputDirectory&gt;</c>
            as per the "Copy always" option in Visual Studio.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.CopyToOutputDirectory.CopyIfNewer">
            <summary>
            Adds <c>&lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;</c>
            as per the "Copy if newer" option in Visual Studio.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.CSharpProject.GetDefaultLanguageVersion(System.String)">
            <summary>
            Based on data from the below links, returns the default language version for the
            provided <paramref name="frameworkMoniker"/>.
            <br/>
            https://docs.microsoft.com/dotnet/csharp/language-reference/configure-language-version#defaults
            <br/>
            https://docs.microsoft.com/dotnet/standard/frameworks#supported-target-frameworks
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.VisualStudio.CustomMetadataKeys">
            <summary>
            Dictionary keys <see cref="P:Intent.Templates.ITemplateFileConfig.CustomMetadata"/>.
            </summary>
            <remarks>
            All are intentionally <see keyword="static"/> as <see keyword="const"/> embeds the
            value at compile time meaning that if this changes, then referenced modules which were
            compiled with the older value would no longer be in alignment.
            </remarks>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.CustomMetadataKeys.ElementPrefix">
            <summary>
            Prefix for keys for <see cref="P:Intent.Templates.ITemplateFileConfig.CustomMetadata"/> to indicate they
            should be applied as nested elements for the file in the MSBuild file.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.CustomMetadataKeys.AttributePrefix">
            <summary>
            Prefix for keys for <see cref="P:Intent.Templates.ITemplateFileConfig.CustomMetadata"/> to indicate they
            should be applied as attributes for the file in the MSBuild file.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.CustomMetadataKeys.ItemType">
            <summary>
            Key value for <see cref="P:Intent.Templates.ITemplateFileConfig.CustomMetadata"/> to indicate the element
            type for the file in the MSBuild file.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.CustomMetadataKeys.AlwaysGenerateProjectItem">
            <summary>
            Obsolete. Use <see cref="F:Intent.Modules.Common.CSharp.VisualStudio.CustomMetadataKeys.MsBuildFileItemGenerationBehaviour"/> instead.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.CustomMetadataKeys.MsBuildFileItemGenerationBehaviour">
            <summary>
            Key value for <see cref="P:Intent.Templates.ITemplateFileConfig.CustomMetadata"/> to indicate the
            generation behaviour of its entry in the MSBuild file. Accepts <see langword="string"/>
            representations of <see cref="T:Intent.Modules.Common.CSharp.VisualStudio.MsBuildFileItemGenerationBehaviour"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion">
            <summary>
            Represents a C# language version which is composed of a minor and major version and is
            <see cref="T:System.IComparable"/> and <see cref="T:System.IEquatable`1"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.TryParse(System.String,Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion@)">
            <summary>
            Tries to parse the provided <paramref name="version"/> as a <see cref="T:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion"/>.
            </summary>
            <returns><see langword="true"/> if the version could be parsed.</returns>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.Parse(System.String)">
            <summary>
            Parse the provided <paramref name="version"/> as a <see cref="T:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion"/> or
            throw an exception on failure.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.Major">
            <summary>
            The major version.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.Minor">
            <summary>
            The minor version.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.Equals(Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.op_Equality(Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion,Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion)">
            <summary>
            Equal to operator.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.op_Inequality(Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion,Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion)">
            <summary>
            Not equal to operator.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.CompareTo(Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.CompareTo(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.op_LessThan(Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion,Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion)">
            <summary>
            Less than operator.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.op_GreaterThan(Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion,Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion)">
            <summary>
            Greater than operator.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.op_LessThanOrEqual(Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion,Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion)">
            <summary>
            Less than or equal to operator.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.op_GreaterThanOrEqual(Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion,Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion)">
            <summary>
            Greater than or equal to operator.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.MajorMinorVersion.ToString">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.CSharp.VisualStudio.MsBuildFileItemGenerationBehaviour">
            <summary>
            Possible values for <see cref="F:Intent.Modules.Common.CSharp.VisualStudio.CustomMetadataKeys.MsBuildFileItemGenerationBehaviour"/>.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.MsBuildFileItemGenerationBehaviour.Always">
            <summary>
            An entry for the file should always be generated in the MSBuild file.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.CSharp.VisualStudio.MsBuildFileItemGenerationBehaviour.Never">
            <summary>
            An entry for the file should never be generated in the MSBuild file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.OutputTargetExtensions.AddNugetPackages(Intent.Modules.Common.CSharp.VisualStudio.ICSharpProject,System.Collections.Generic.IEnumerable{Intent.Modules.Common.VisualStudio.INugetPackageInfo})">
            <summary>
            Adds a NuGet package dependency to a project.
            <para>
            Example usage:
            <code>
                var project = ExecutionContext.OutputTargets.Single(x => x.HasRole("Role")).GetProject();
                project.AddNugetPackages(nugetPackages);
            </code>
            </para>
            </summary>
            <example>
            Example usage:
            <code>
                var project = ExecutionContext.OutputTargets.Single(x => x.HasRole("Role")).GetProject();
                project.AddNugetPackages(nugetPackages);
            </code>
            </example>
            <param name="csharpProject"></param>
            <param name="packages"></param>
        </member>
        <member name="T:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Templates.ITemplateFileConfig"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithAlwaysGenerateProjectItem``1(``0)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithFileItemGenerationBehaviour``1(``0,Intent.Modules.Common.CSharp.VisualStudio.MsBuildFileItemGenerationBehaviour)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithAttribute``1(``0,System.String,System.String)">
            <summary>
            Adds an attribute to the file item in the MSBuild file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithAutoFormatting``1(``0,System.Boolean)">
            <summary>
            Disables auto formatting of the file after code merging.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithAutoGen``1(``0)">
            <summary>
            Adds a <c>&lt;AutoGen&gt;True&lt;/AutoGen&gt;</c> element to the file item in the MSBuild file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithCopyToOutputDirectory``1(``0,Intent.Modules.Common.CSharp.VisualStudio.CopyToOutputDirectory)">
            <summary>
            Controls the value of the <c>&lt;CopyToOutputDirectory/ &gt;</c> element for a file item in the MSBuild file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithDependsOn``1(``0,Intent.Templates.ITemplate)">
            <summary>
            Adds a <c>&lt;DependentUpon/ &gt;</c> element to the file item in the MSBuild file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithDependsOn``1(``0,System.String)">
            <summary>
            Adds a <c>&lt;DependentUpon/ &gt;</c> element to the file item in the MSBuild file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithDesignTime``1(``0)">
            <summary>
            Adds a <c>&lt;DesignTime&gt;True&lt;/DesignTime&gt;</c> element to the file item in the MSBuild file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithFileItemGenerationBehaviour``1(``0,Intent.Modules.Common.CSharp.VisualStudio.MsBuildFileItemGenerationBehaviour)">
            <summary>
            Controls the behaviour of generation of a template's file item entry in its MSBuild file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithItemType``1(``0,System.String)">
            <summary>
            Indicate that the file in the MSBuild file is never implicitly present in SDK style
            projects.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithNestedProjectElement``1(``0,System.String,System.String,System.Boolean)">
            <summary>
            Adds a nested element to the file item in the MSBuild file.
            </summary>
            <param name="templateFileConfig">The <see cref="T:Intent.Templates.ITemplateFileConfig"/> onto which to apply the configuration.</param>
            <param name="elementName">The name of element nested element.</param>
            <param name="elementValue">The value of the nested element.</param>
            <param name="isPath">Whether or not the value is a path, in which case it should be normalized for MS Build such that all folder separators are backslashes.</param>
            <returns>The <see cref="T:Intent.Templates.ITemplateFileConfig"/> with the configuration applied.</returns>
        </member>
        <member name="M:Intent.Modules.Common.CSharp.VisualStudio.TemplateFileConfigExtensions.WithTextTemplatingFilePreprocessor``1(``0)">
            <summary>
            Adds the necessary elements to the file item in the MSBuild file for a pre-processed
            <c>.tt</c>
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Templates.CSharpTemplateExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Modules.Common.CSharp.Templates.CSharpTemplateBase`1"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ResolveAllUsings(Intent.Templates.ITemplate,Intent.Engine.ISoftwareFactoryExecutionContext,System.String[])">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ResolveAllUsings(Intent.Templates.ITemplate,System.String[])"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ResolveAllUsings(Intent.Templates.ITemplate,System.String[])">
            <summary>
            Resolves all usings for the provided <paramref name="template"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.GetAllDeclareUsing(Intent.Templates.ITemplate)">
            <summary>
            This member will be changed to be only privately accessible or possibly removed
            entirely, please contact Intent Architect support should you have a dependency on it.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ApplyLaunchProfile(Intent.Modules.Common.Templates.IntentTemplateBase,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Adds a profile to <see href="https://docs.microsoft.com/aspnet/core/fundamentals/environments#lsj"/>
            if it does not already exist.
            </summary>
            <remarks>
            This needs to be called within the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.BeforeTemplateExecution"/> method.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ApplyAppSetting(Intent.Modules.Common.Templates.IntentTemplateBase,System.String,System.Object)">
             <summary>
             Adds an item to <see href="https://docs.microsoft.com/aspnet/core/fundamentals/configuration#appsettingsjson"/>
             if it does not already exist.
             </summary>
             <remarks>
             This needs to be called within the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.BeforeTemplateExecution"/> method.
             </remarks>
            
             <param name="template">
             An instance of a type derived from <see cref="T:Intent.Modules.Common.Templates.IntentTemplateBase"/> with an accessible
             instance of <see cref="T:Intent.Eventing.IApplicationEventDispatcher"/> which is used to make the request.
             </param>
            
             <param name="field">
             The top most level field of the json file to add.
             </param>
            
             <param name="value">
             The <paramref name="value"/> to set for the <paramref name="field"/>, the provided value
             (including anonymous objects) will be output as a JSON structure.
             </param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ApplyAppSetting(Intent.Modules.Common.Templates.IntentTemplateBase,System.String,System.Object,System.String,System.String)">
             <summary>
             Adds an item to <see href="https://docs.microsoft.com/aspnet/core/fundamentals/configuration#appsettingsjson"/>
             if it does not already exist.
             </summary>
             <remarks>
             This needs to be called within the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.BeforeTemplateExecution"/> method.
             </remarks>
            
             <param name="template">
             An instance of a type derived from <see cref="T:Intent.Modules.Common.Templates.IntentTemplateBase"/> with an accessible
             instance of <see cref="T:Intent.Eventing.IApplicationEventDispatcher"/> which is used to make the request.
             </param>
            
             <param name="field">
             The top most level field of the json file to add.
             </param>
            
             <param name="value">
             The <paramref name="value"/> to set for the <paramref name="field"/>, the provided value
             (including anonymous objects) will be output as a JSON structure.
             </param>
            
             <param name="runtimeEnvironment">
             Optional. The specific appsettings.&lt;<paramref name="runtimeEnvironment"/>&gt;.json
             file to apply to, when not specified then the default appsettings.json file is applied
             to.
             </param>
            
             <param name="forProjectWithRole">
             Optional. Name of the output target 'Role' which must be present in the project within
             the Intent Architect Visual Studio designer.
             <remarks>
             Used for disambiguating which appsettings[.&lt;<paramref name="runtimeEnvironment"/>&gt;].json
             file to apply to when a solution has multiple projects each with their own
             appsettings[.&lt;<paramref name="runtimeEnvironment"/>&gt;].json file(s).
             </remarks>
             </param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ApplyConnectionString(Intent.Modules.Common.Templates.IntentTemplateBase,System.String,System.String,System.String)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ApplyConnectionString(Intent.Modules.Common.Templates.IntentTemplateBase,System.String,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ApplyConnectionString(Intent.Modules.Common.Templates.IntentTemplateBase,System.String,System.String)">
             <summary>
             Adds an entry to the "connectionStrings" item of <see href="https://docs.microsoft.com/aspnet/core/fundamentals/configuration#appsettingsjson"/>
             if it does not already exist.
             </summary>
             <remarks>
             This needs to be called within the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.BeforeTemplateExecution"/> method.
             </remarks>
            
             <param name="template">
             An instance of a type derived from <see cref="T:Intent.Modules.Common.Templates.IntentTemplateBase"/> with an accessible
             instance of <see cref="T:Intent.Eventing.IApplicationEventDispatcher"/> which is used to make the request.
             </param>
            
             <param name="name">
             The name of the connection string.
             </param>
            
             <param name="connectionString">
             The connection string value.
             </param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.CSharpTemplateExtensions.ApplyConnectionString(Intent.Modules.Common.Templates.IntentTemplateBase,System.String,System.String,System.String,System.String)">
             <summary>
             Adds an entry to the "connectionStrings" item of <see href="https://docs.microsoft.com/aspnet/core/fundamentals/configuration#appsettingsjson"/>
             if it does not already exist.
             </summary>
             <remarks>
             This needs to be called within the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.BeforeTemplateExecution"/> method.
             </remarks>
            
             <param name="template">
             An instance of a type derived from <see cref="T:Intent.Modules.Common.Templates.IntentTemplateBase"/> with an accessible
             instance of <see cref="T:Intent.Eventing.IApplicationEventDispatcher"/> which is used to make the request.
             </param>
            
             <param name="name">
             The name of the connection string.
             </param>
            
             <param name="connectionString">
             The connection string value.
             </param>
            
             <param name="runtimeEnvironment">
             Optional. The specific appsettings.&lt;<paramref name="runtimeEnvironment"/>&gt;.json
             file to apply to, when not specified then the default appsettings.json file is applied
             to.
             </param>
            
             <param name="forProjectWithRole">
             Optional. Name of the output target 'Role' which must be present in the project within
             the Intent Architect Visual Studio designer.
             <remarks>
             Used for disambiguating which appsettings[.&lt;<paramref name="runtimeEnvironment"/>&gt;].json
             file to apply to when a solution has multiple projects each with their own
             appsettings[.&lt;<paramref name="runtimeEnvironment"/>&gt;].json file(s).
             </remarks>
             </param>
        </member>
        <member name="T:Intent.Modules.Common.Templates.CSharp">
            <summary>
            Helpers for C# code.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.Templates.CSharp.ReservedWords">
            <summary>
            List of C# keywords as per <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/keywords/"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.IDeclareUsings">
            <summary>
            Signifies that this Template or Decorator introduces additional using clauses.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IDeclareUsings.DeclareUsings">
            <summary>
            The returned collection of namespaces that should be included in the using clauses
            section of this Template (or Decorator's Template). Do not include the "using"
            or semi-colon, just the namespace (EG: "System.Linq").
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.VisualStudio.IHasFrameworkDependencies">
            <summary>
            Used to specify that has dependencies which require adding &lt;FrameworkReference /&gt; elements to the containing.csproj.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.VisualStudio.IHasFrameworkDependencies.GetFrameworkDependencies">
            <summary>
            Used to specify that has dependencies which require adding &lt;FrameworkReference /&gt; elements to the containing.csproj.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.VisualStudio.INugetPackageInfo.AssemblyRedirects">
            <summary>
            Used for Web.config to set up Assembly Redirects.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.VisualStudio.NugetPackageInfo.BlockAddingOfAllFiles">
            <summary>
            No files can be added.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.VisualStudio.NugetPackageInfo.AllowAddingOfAllFiles">
            <summary>
            All files can be added.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.VisualStudio.NugetPackageInfo.BlockAddingOfAllFilesExcept(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            No files will be added except for the specified <paramref name="files"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.VisualStudio.NugetPackageInfo.AllowAddingOfAllFilesExcept(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            All files will be added except for the specified <paramref name="files"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.VisualStudio.NugetPackageInfo.Equals(Intent.Modules.Common.VisualStudio.NugetPackageInfo)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.VisualStudio.NugetPackageInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.VisualStudio.NugetPackageInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.VisualStudio.VisualStudioProjectExtensions.AddNugetPackages(Intent.Engine.IOutputTarget,System.Collections.Generic.IEnumerable{Intent.Modules.Common.VisualStudio.INugetPackageInfo})">
            <summary>
            Obsolete. Use <see cref="!:AddNugetPackages(ICSharpProject,IEnumerable&lt;INugetPackageInfo&gt;)"/> instead.
            </summary>
        </member>
    </members>
</doc>
