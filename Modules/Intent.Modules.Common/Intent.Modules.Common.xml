<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Intent.Modules.Common</name>
    </assembly>
    <members>
        <member name="T:Intent.Modules.Common.Configuration.HostingSettingsCreatedEvent">
            <summary>
            Subscribe to this event to be notified of hosting settings published by a Module in this application.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Configuration.HostingSettingsCreatedEvent.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Configuration.HostingSettingsCreatedEvent"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Configuration.HostingSettingsCreatedEvent.ApplicationUrl">
            <summary>
            Application URL
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Configuration.HostingSettingsCreatedEvent.Port">
            <summary>
            Port
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Configuration.HostingSettingsCreatedEvent.SslPort">
            <summary>
            SSL port
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.IHasTemplateDependencies">
            <summary>
            Has dependencies on other <see cref="T:Intent.Templates.ITemplate"/> instances.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IHasTemplateDependencies.GetTemplateDependencies">
            <summary>
            Gets all the <see cref="T:Intent.Modules.Common.ITemplateDependency"/> items for this template..
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.IApplicationExtensions">
            <summary>
            Obsolete. Use <see cref="T:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IApplicationExtensions.FindTemplateInstance(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,System.Object)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Engine.ISoftwareFactoryExecutionContext.FindTemplateInstance(System.String,System.Object)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IApplicationExtensions.FindTemplateInstance(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IApplicationExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,System.String)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IApplicationExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,System.Object)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,System.Object)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IApplicationExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,System.String)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IApplicationExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IApplicationExtensions.FindOutputTargetWithTemplate(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,Intent.Metadata.Models.IMetadataModel)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindOutputTargetWithTemplate(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,Intent.Metadata.Models.IMetadataModel)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IApplicationExtensions.FindOutputTargetWithTemplate(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindOutputTargetWithTemplate(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)"/> instead.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.IOutputTargetExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Engine.IOutputTarget"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.IOutputTargetExtensions.FindTemplateInstances``1(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstances``1(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)"/> instead.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Engine.ISoftwareFactoryExecutionContext"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindOutputTargetWithTemplate(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)">
            <summary>
            Finds the <see cref="T:Intent.Engine.IOutputTarget"/> that is targeted by the provided <paramref name="templateDependency"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindOutputTargetWithTemplate(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,Intent.Metadata.Models.IMetadataModel)">
            <summary>
            Finds the <see cref="T:Intent.Engine.IOutputTarget" /> that is targeted by the template with the provided
            <paramref name="templateId" /> which is also a <see cref="T:Intent.Templates.ITemplateWithModel" /> and whose
            <see cref="P:Intent.Templates.ITemplateWithModel.Model" /> is a <see cref="T:Intent.Metadata.Models.IMetadataModel" /> whose
            <see cref="P:Intent.Metadata.Models.IMetadataModel.Id" /> matches that of the provided <paramref name="hasModel" />.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)">
            <summary>
            Finds a template instance which matches the provided <paramref name="templateDependency"/>.<br/>
            <br/>
            If more than once instance is found an exception is thrown.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)">
            <summary>
            Finds a template instance which matches the provided <paramref name="templateDependency"/>
            and casts the result to the specified <typeparamref name="TTemplate"/>.<br/>
            <br/>
            If more than once instance is found an exception is thrown.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,System.String)">
            <summary>
            Finds the template with <see cref="P:Intent.Templates.ITemplate.Id" /> of <paramref name="templateId" />
            and casts the result to the specified <typeparamref name="TTemplate"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,System.Object)">
            <summary>
            Finds the template with <see cref="P:Intent.Templates.ITemplate.Id" /> of <paramref name="templateId" />
            which is also a <see cref="T:Intent.Templates.ITemplateWithModel" /> whose
            <see cref="P:Intent.Templates.ITemplateWithModel.Model" />'s reference matches that of the provided
            <paramref name="model" /> and casts the result to the specified <typeparamref name="TTemplate"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstance``1(Intent.Engine.ISoftwareFactoryExecutionContext,System.String,System.String)">
            <summary>
            Finds a template instance which has the provided <paramref name="templateId"/> and
            <paramref name="className"/> and casts the result to the specified <typeparamref name="TTemplate"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.SoftwareFactoryExecutionContextExtensions.FindTemplateInstances``1(Intent.Engine.ISoftwareFactoryExecutionContext,Intent.Modules.Common.ITemplateDependency)">
            <summary>
            Finds all template instances which match the provided <paramref name="templateDependency"/>
            and casts the results to the specified <typeparamref name="TTemplate"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.StereotypeExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Metadata.Models.IStereotype"/> and <see cref="T:Intent.Metadata.Models.IHasStereotypes"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.StereotypeExtensions.GetPropertyValue``1(Intent.Metadata.Models.IHasStereotypes,System.String,System.String,``0)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.StereotypeExtensions.GetStereotypeProperty``1(Intent.Metadata.Models.IHasStereotypes,System.String,System.String,``0)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.StereotypeExtensions.GetStereotypeProperty``1(Intent.Metadata.Models.IHasStereotypes,System.String,System.String,``0)">
            <summary>
            Retrieve the value of the property with the provided <paramref name="propertyName"/>
            on the provided <paramref name="stereotypeName"/> on the provided <paramref name="model"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.StereotypeExtensions.GetStereotype(Intent.Metadata.Models.IHasStereotypes,System.String)">
            <summary>
            Lookup only one stereotype with a given name. If more than one is found with the same name an exception is thrown.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.StereotypeExtensions.GetStereotypes(Intent.Metadata.Models.IHasStereotypes,System.String)">
            <summary>
            Look up multiple stereotypes by the same name.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.StereotypeExtensions.GetProperty``1(Intent.Metadata.Models.IStereotype,System.String,``0)">
            <summary>
            Retrieve the value of the property with the provided <paramref name="propertyName"/>
            on the provided <paramref name="stereotype"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.StereotypeExtensions.HasStereotype(Intent.Metadata.Models.IHasStereotypes,System.String)">
            <summary>
            Used to query whether or not a stereotype with a particular name is present.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.PathHelper.NormalizePath(System.String)">
            <summary>
            Windows accepts "\" as path seperators, but other platforms do not, so we always convert everything to "/".
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Plugins.FactoryExtensionBase">
            <summary>
            Use implementations of this to extend the Software Factory execution process by overriding
            one or more of the following:
            <list type="bullet">
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnStep(Intent.Engine.IApplication,System.String)"/></description></item>
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnStart(Intent.Engine.IApplication)"/></description></item>
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnBeforeMetadataLoad(Intent.Engine.IApplication)"/></description></item>
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnAfterMetadataLoad(Intent.Engine.IApplication)"/></description></item>
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnBeforeTemplateRegistrations(Intent.Engine.IApplication)"/></description></item>
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnAfterTemplateRegistrations(Intent.Engine.IApplication)"/></description></item>
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnBeforeTemplateExecution(Intent.Engine.IApplication)"/></description></item>
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnAfterTemplateExecution(Intent.Engine.IApplication)"/></description></item>
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnBeforeCommitChanges(Intent.Engine.IApplication)"/></description></item>
            <item><description><see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnAfterCommitChanges(Intent.Engine.IApplication)"/></description></item>
            </list>
            <example>
            For example, to override <see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnStart(Intent.Engine.IApplication)"/>, add a member to your implementation as follows:
            <code>
            <![CDATA[
            protected override void OnStart(IApplication application)
            {
                base.OnStart(application);
            }
            ]]>
            </code>
            </example>
            </summary>
            <remarks>
            The Software Factory uses assembly scanning and reflection to automatically instantiate and
            register implementations of this class.
            </remarks>
        </member>
        <member name="P:Intent.Modules.Common.Plugins.FactoryExtensionBase.Id">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.Plugins.FactoryExtensionBase.Order">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.Configure(System.Collections.Generic.IDictionary{System.String,System.String})">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnStep(Intent.Engine.IApplication,System.String)">
            <summary>
            Called for each phase of the Software Factory execution. The
            <paramref name="step"/> parameter will be populated with the current phase/step of the
            Software Factory. See <see cref="T:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps"/> for possible values.
            </summary>
            <remarks>
            After <see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnStep(Intent.Engine.IApplication,System.String)"/>, has been called, then the step specific virtual method
            (for example <see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnBeforeTemplateExecution(Intent.Engine.IApplication)"/>) is also always called.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnStart(Intent.Engine.IApplication)">
            <summary>
            Called during the <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.Start"/> phase of the Software
            Factory execution.
            </summary>
            <remarks>
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.Start"/> is the first phase of the Software Factory
            execution process and precedes the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeMetadataLoad"/> phase.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnBeforeMetadataLoad(Intent.Engine.IApplication)">
            <summary>
            Called during the <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeMetadataLoad"/> phase of the Software
            Factory execution.
            </summary>
            <remarks>
            The <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeMetadataLoad"/> phase proceeds the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.Start"/> phase and precedes the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterMetadataLoad"/> phase.
            </remarks>
            <remarks>
            Called after <see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnStart(Intent.Engine.IApplication)"/> and before <see cref="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnAfterMetadataLoad(Intent.Engine.IApplication)"/>.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnAfterMetadataLoad(Intent.Engine.IApplication)">
            <summary>
            Called during the <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterMetadataLoad"/> phase of the Software
            Factory execution.
            </summary>
            <remarks>
            The <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterMetadataLoad"/> phase proceeds the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeMetadataLoad"/> phase and precedes the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeTemplateRegistrations"/> phase.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnBeforeTemplateRegistrations(Intent.Engine.IApplication)">
            <summary>
            Called during the <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeTemplateRegistrations"/> phase of the Software
            Factory execution.
            </summary>
            <remarks>
            The <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeTemplateRegistrations"/> phase proceeds the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterMetadataLoad"/> phase and precedes the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterTemplateRegistrations"/> phase.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnAfterTemplateRegistrations(Intent.Engine.IApplication)">
            <summary>
            Called during the <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterTemplateRegistrations"/> phase of the Software
            Factory execution.
            </summary>
            <remarks>
            The <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterTemplateRegistrations"/> phase proceeds the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeTemplateRegistrations"/> phase and precedes the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeTemplateExecution"/> phase.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnBeforeTemplateExecution(Intent.Engine.IApplication)">
            <summary>
            Called during the <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeTemplateExecution"/> phase of the Software
            Factory execution.
            </summary>
            <remarks>
            The <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeTemplateExecution"/> phase proceeds the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterTemplateRegistrations"/> phase and precedes the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterTemplateExecution"/> phase.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnAfterTemplateExecution(Intent.Engine.IApplication)">
            <summary>
            Called during the <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterTemplateExecution"/> phase of the Software
            Factory execution.
            </summary>
            <remarks>
            The <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterTemplateExecution"/> phase proceeds the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeTemplateExecution"/> phase and precedes the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeCommitChanges"/> phase.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnBeforeCommitChanges(Intent.Engine.IApplication)">
            <summary>
            Called during the <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeCommitChanges"/> phase of the Software
            Factory execution.
            </summary>
            <remarks>
            The <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeCommitChanges"/> phase proceeds the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterTemplateExecution"/> phase and precedes the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterCommitChanges"/> phase.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Plugins.FactoryExtensionBase.OnAfterCommitChanges(Intent.Engine.IApplication)">
            <summary>
            Called during the <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterCommitChanges"/> phase of the Software
            Factory execution.
            </summary>
            <remarks>
            The <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.AfterCommitChanges"/> phase proceeds the
            <see cref="F:Intent.Plugins.FactoryExtensions.ExecutionLifeCycleSteps.BeforeCommitChanges"/> phase and is the last phase of the Software
            Factory execution process.
            </remarks>
        </member>
        <member name="T:Intent.Modules.Common.Registrations.FilePerModelTemplateRegistration`1">
            <summary>
            Template Registration that produces a file per module that is returned by the <see cref="M:Intent.Modules.Common.Registrations.FilePerModelTemplateRegistration`1.GetModels(Intent.Engine.IApplication)"/> method.
            <para>
            Learn more about template registrations in
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=templateRegistrations">
            this article</seealso>.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Registrations.FilePerModelTemplateRegistration`1.CreateTemplateInstance(Intent.Engine.IOutputTarget,`0)">
            <summary>
            Returns the template instance. This method is run for each <typeparamref name="TModel"/> <paramref name="model"/> that is
            returned from the <see cref="M:Intent.Modules.Common.Registrations.FilePerModelTemplateRegistration`1.GetModels(Intent.Engine.IApplication)"/> method.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Registrations.FilePerModelTemplateRegistration`1.GetModels(Intent.Engine.IApplication)">
            <summary>
            Implement to determine which instances of <typeparamref name="TModel"/> must create a file based on the template.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Registrations.ModelTemplateRegistrationBase`1">
            <summary>
            Obsolete. Use <see cref="T:Intent.Modules.Common.Registrations.FilePerModelTemplateRegistration`1"/> instead.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Registrations.SingleFileListModelTemplateRegistration`1">
            <summary>
            Template Registration that produces as single file. Passes in a list of models into the template.
            <para>
            Learn more about template registrations in
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=templateRegistrations">
            this article</seealso>.
            </para>
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Registrations.SingleFileTemplateRegistration">
            <summary>
            Template Registration that produces as single file.
            <para>
            Learn more about template registrations in
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=templateRegistrations">
            this article</seealso>.
            </para>
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Registrations.TemplateRegistrationBase">
            <summary>
            A generic base implementation of <seealso cref="T:Intent.Registrations.ITemplateRegistration"/>.
            <para>
            The <see cref="M:Intent.Modules.Common.Registrations.TemplateRegistrationBase.Register(Intent.Registrations.ITemplateInstanceRegistry,Intent.Engine.IApplication)"/> method will be called once by the Software Factory Execution.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Registrations.TemplateRegistrationBase.Register(Intent.Registrations.ITemplateInstanceRegistry,Intent.Engine.IApplication)">
            <summary>
            This method is called once by the Software Factory Execution.
            <para>
            Registration of template instances can be done by invoking
            the <see cref="M:Intent.Registrations.ITemplateInstanceRegistry.RegisterTemplate(System.String,System.Func{Intent.Engine.IOutputTarget,Intent.Templates.ITemplate})"/>
            on the provided <paramref name="registry"/> parameter.
            </para>
            </summary>
            <param name="registry"></param>
            <param name="application"></param>
        </member>
        <member name="M:Intent.Modules.Common.Registrations.TemplateRegistrationBase.AbortRegistration">
            <summary>
            This method indicates that the registration process must not occur for this template.
            <para>
            Note that this must be called BEFORE the registration process has begun.
            </para>
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Templates.IClassProvider">
            <summary>
            Template that provides a OOP class type - Class name and namespace (package).
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.IClassProvider.Namespace">
            <summary>
            Namespace
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.IClassProvider.ClassName">
            <summary>
            Class name
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Templates.IClassProviderExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Modules.Common.Templates.IClassProvider"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IClassProviderExtensions.FullTypeName(Intent.Modules.Common.Templates.IClassProvider)">
            <summary>
            Returns the fully qualified class name.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Templates.IntentTemplateBase`2">
            <summary>
            A base class for templates which use both models and decorators.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase`2.#ctor(System.String,Intent.Engine.IOutputTarget,`0)">
            <summary>
            Constructor for <see cref="T:Intent.Modules.Common.Templates.IntentTemplateBase`2"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase`2.GetDecorators">
            <summary>
            Returns all decorators that have been added to this template.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase`2.AddDecorator(`1)">
            <summary>
            Adds a decorator to this template. This is called automatically by the Intent Architect software factory when a decorator is resolved for this template.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase`2.GetDecoratorsOutput(System.Func{`1,System.String})">
            <summary>
            Aggregates decorator outputs for the property specified by <paramref name="propertyFunc"/>
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Templates.IntentTemplateBase`1">
            <summary>
            A base class for templates which use models.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase`1.#ctor(System.String,Intent.Engine.IOutputTarget,`0)">
            <summary>
            Constructor for <see cref="T:Intent.Modules.Common.Templates.IntentTemplateBase`1"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.IntentTemplateBase`1.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase`1.GetCorrelationId">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.Templates.IntentTemplateBase">
            <summary>
            Base class for templates.
            </summary>
        </member>
        <member name="F:Intent.Modules.Common.Templates.IntentTemplateBase.DetectedDependencies">
            <summary>
            Returns the known template dependencies added for this template.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.#ctor(System.String,Intent.Engine.IOutputTarget)">
            <summary>
            Constructor for <see cref="T:Intent.Modules.Common.Templates.IntentTemplateBase"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.IntentTemplateBase.Id">
            <summary>
            Unique identifier for this template. Must be unique in the application in which this template is installed.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.IntentTemplateBase.ExecutionContext">
            <summary>
            Software Factory Execution context. Gives access to application-wide services.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.IntentTemplateBase.OutputTarget">
            <summary>
            The OutputTarget of this template. This is determined by a designer with Output Targeting capabilities (e.g. Visual Studio, Folder Structure, etc.)
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.IntentTemplateBase.BindingContext">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.Templates.IntentTemplateBase.FileMetadata">
            <summary>
            Metadata of the template.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.ConfigureFileMetadata(Intent.Templates.IFileMetadata)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.CreateCollectionFormatter(System.String)">
            <summary>
            Creates an instance of <see cref="T:Intent.Modules.Common.TypeResolution.ICollectionFormatter"/>. Override this method to return
            a different implementation of <see cref="T:Intent.Modules.Common.TypeResolution.ICollectionFormatter"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplateFileConfig">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetExistingFilePath">
            <summary>
            Returns the file path of the existing file for this template, if it exists. If it doesn't exist, or can't be found, will return null.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.CanRunTemplate">
            <summary>
            Override this method to control whether the template runs and the creates the output file.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.RunTemplate">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetCorrelationId">
            <summary>
            Used to identify template outputs between software factory executions.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetMetadata">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTemplateDependency(Intent.Modules.Common.ITemplateDependency)">
            <summary>
            Adds the <see cref="T:Intent.Modules.Common.ITemplateDependency"/> <paramref name="templateDependency"/> as a dependency of this template.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTemplateDependency(System.String)">
            <summary>
            Adds the Template with <paramref name="templateId"/> as a dependency of this template.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTemplateDependency(System.String,Intent.Metadata.Models.IMetadataModel)">
            <summary>
            Adds the Template with <paramref name="templateId"/> and <paramref name="model"/> as a dependency of this template.
            </summary>
            <param name="templateId">The id of the template to be dependent upon.</param>
            <param name="model">The metadata module instance that the Template must be bound to.</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplateDependencies">
            <summary>
            Returns all template dependencies detected for this template.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.OnConfigured">
            <summary>
            Called after all templates have been configured.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.OnCreated">
            <summary>
            Called after all templates have been created.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.BeforeTemplateExecution">
            <summary>
            Executed before the Template's <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.RunTemplate"/> runs.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.SetDefaultTypeCollectionFormat(System.String)">
            <summary>
            Sets the default collection format to be applied to types that are resolved using the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference)"/> method.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.SetDefaultCollectionFormatter(Intent.Modules.Common.TypeResolution.ICollectionFormatter)">
            <summary>
            Sets the default collection formatter to be applied to types that are resolved using the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference)"/> method.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)">
            <summary>
            Adds the <paramref name="typeSource"/> as a source to find fully qualified types when using the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference)"/> method.
            If found, the Template will be added as a dependency.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(System.String,System.String)">
            <summary>
            Adds a Template source (template instances) that will be search when resolving <see cref="T:Intent.Metadata.Models.ITypeReference"/> types through the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference)"/>.
            If found, the Template will be added as a dependency.
            Set the desired <see cref="T:Intent.Modules.Common.TypeResolution.CollectionFormatter"/> for when the type is resolved from this type-source by calling .WithCollectionFormatter(...).
            </summary>
            <param name="templateId">The identifier of the template instances to be searched when calling <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference)"/></param>
            <param name="collectionFormat">Sets the collection format to be applied if a type is found.</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(System.String)">
            <summary>
            Adds a Template source that will be searched when resolving <see cref="T:Intent.Metadata.Models.ITypeReference"/> types through the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference)"/>.
            If found, the Template will be added as a dependency.
            Set the desired <see cref="T:Intent.Modules.Common.TypeResolution.CollectionFormatter"/> for when the type is resolved from this type-source by calling .WithCollectionFormatter(...).
            </summary>
            <param name="templateId">The identifier of the template instances to be searched when calling <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference)"/>.</param>
            <returns>Returns the <see cref="T:Intent.Modules.Common.TypeResolution.ClassTypeSource"/> for use as a fluent api.</returns>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">
            <summary>
            Called once a type has been resolved in the <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference)"/>.
            Override to alter the resulting string.
            <param name="name">The type name to normalize</param>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.FulfillsRole(System.String)">
            <summary>
            Signifies that this template fulfills the specified <paramref name="role"/> in the architecture. Other templates can search for templates that
            fulfill roles and thereby find them in a decoupled way. This method is deprecated since registering templates against their
            roles will be done automatically by the Software Factory execution in future releases.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(Intent.Modules.Common.Templates.IClassProvider)">
            <summary>
            Resolves the fully qualified type name for the <paramref name="classProvider"/> parameter.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(Intent.Metadata.Models.ITypeReference)">
            <summary>
            Resolves the <see cref="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo"/> for the resolved <paramref name="typeReference"/>.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(Intent.Metadata.Models.IElement,System.String)">
            <summary>
            Resolves the fully qualified type name for the <paramref name="element"/> parameter.
            Any added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> will be searched to resolve the type name.
            Applies the <paramref name="collectionFormat"/> if the resolved type's <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="element">The <see cref="T:Intent.Metadata.Models.IElement"/> for which to get the type name.</param>
            <param name="collectionFormat">The collection format to be applied if the resolved type <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(Intent.Metadata.Models.IHasTypeReference,System.String)">
            <summary>
            Resolves the fully qualified type name for the <paramref name="hasTypeReference"/> parameter.
            Any added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> will be searched to resolve the type name.
            Applies the <paramref name="collectionFormat"/> if the resolved type's <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="hasTypeReference">The <see cref="T:Intent.Metadata.Models.IHasTypeReference"/> for which to get the type name.</param>
            <param name="collectionFormat">The collection format to be applied if the resolved type <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(Intent.Templates.ITemplate,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name for the <paramref name="template"/> parameter.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(Intent.Modules.Common.ITemplateDependency,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name for the <paramref name="templateDependency"/> parameter.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(Intent.Metadata.Models.ITypeReference,System.String)">
            <summary>
            Resolves the fully qualified type name for the <paramref name="typeReference"/> parameter.
            Any added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> will be searched to resolve the type name.
            Applies the <paramref name="collectionFormat"/> if the resolved type's <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="typeReference">The <see cref="T:Intent.Metadata.Models.ITypeReference"/> for which to get the type name.</param>
            <param name="collectionFormat">The collection format to be applied if the resolved type <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(System.String,Intent.Metadata.Models.IMetadataModel,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name of the Template with <paramref name="templateId"/> as a string.
            This overload assumes that the Template can have many instances and identifies the target instance
            based on which has the <paramref name="model"/>.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="templateId">The unique Template identifier.</param>
            <param name="model">The model instance that the Template must be bound to.</param>
            <param name="options">Optional <see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> to apply.</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(System.String,System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name of the Template with <paramref name="templateId"/> as a string.
            This overload assumes that the Template can have many instances and identifies the target instance
            based on which has the <paramref name="modelId"/>.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="templateId">The unique Template identifier.</param>
            <param name="modelId">The identifier of the model that the Template must be bound to.</param>
            <param name="options">Optional <see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> to apply.</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeInfo(System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the fully qualified type name of the Template with <paramref name="templateId"/> as a string.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            Will throw an exception if more than one template instance exists.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Modules.Common.Templates.IClassProvider)">
            <summary>
            Resolves the type name for the provided <see cref="!:classProvider"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.IElement,System.String)">
            <summary>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name for the <paramref name="element"/> parameter.
            Any added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> will be searched to resolve the type name.
            Applies the <paramref name="collectionFormat"/> if the resolved type's <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="element">The <see cref="T:Intent.Metadata.Models.IElement"/> for which to get the type name.</param>
            <param name="collectionFormat">The collection format to be applied if the resolved type <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.IHasTypeReference)">
            <summary>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name for the <paramref name="hasTypeReference"/> parameter.
            Any added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> will be searched to resolve the type name.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="hasTypeReference">The <see cref="T:Intent.Metadata.Models.IHasTypeReference"/> for which to get the type name.</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.IHasTypeReference,System.String)">
            <summary>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name for the <paramref name="hasTypeReference"/> parameter.
            Any added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> will be searched to resolve the type name.
            Applies the <paramref name="collectionFormat"/> if the resolved type's <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="hasTypeReference">The <see cref="T:Intent.Metadata.Models.IHasTypeReference"/> for which to get the type name.</param>
            <param name="collectionFormat">The collection format to be applied if the resolved type <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Templates.ITemplate,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name for the <paramref name="template"/> parameter.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Modules.Common.ITemplateDependency,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name for the <paramref name="templateDependency"/> parameter.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference)">
            <summary>
            <para>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name for the <paramref name="typeReference"/> parameter.
            Any added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> will be searched to resolve the type name.
            </para>
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="typeReference">The <see cref="T:Intent.Metadata.Models.ITypeReference"/> for which to get the type name.</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(Intent.Metadata.Models.ITypeReference,System.String)">
            <summary>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name for the <paramref name="typeReference"/> parameter.
            Any added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> by <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> will be searched to resolve the type name.
            Applies the <paramref name="collectionFormat"/> if the resolved type's <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="typeReference">The <see cref="T:Intent.Metadata.Models.ITypeReference"/> for which to get the type name.</param>
            <param name="collectionFormat">The collection format to be applied if the resolved type <see cref="P:Intent.Metadata.Models.ITypeReference.IsCollection"/> is true</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(System.String,Intent.Metadata.Models.IMetadataModel,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the type name of the Template with <paramref name="templateId"/> as a string.
            This overload assumes that the Template can have many instances and identifies the target instance
            based on which has the <paramref name="model"/>.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="templateId">The unique Template identifier.</param>
            <param name="model">The model instance that the Template must be bound to.</param>
            <param name="options">Optional <see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> to apply.</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(System.String,System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the type name of the Template with <paramref name="templateId"/> as a string.
            This overload assumes that the Template can have many instances and identifies the target instance
            based on which has the <paramref name="modelId"/>.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="templateId">The unique Template identifier.</param>
            <param name="modelId">The identifier of the model that the Template must be bound to.</param>
            <param name="options">Optional <see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> to apply.</param>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTypeName(System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Resolves the type name of the Template with <paramref name="templateId"/> as a string.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            Will throw an exception if more than one template instance exists.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetExistingFileContent(System.String@)">
            <summary>
            Tries to get existing file content of this template's output.
            </summary>
            <remarks>
            This method takes into account that the output path may have changed since the previous
            Software Factory execution.
            </remarks>
            <param name="content">The contents of the file if it exists.</param>
            <returns>Whether or not there was an existing file for this template's output.</returns>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetTypeName(System.String)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetTypeName(System.String,System.String@)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetTypeName(System.String,System.String@)">
            <summary>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name of the Template with <paramref name="templateId"/> as a string.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <returns><see langword="true"/> if the type name could be resolved.</returns>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetTypeName(System.String,Intent.Metadata.Models.IMetadataModel)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetTypeName(System.String,Intent.Metadata.Models.IMetadataModel,System.String@)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetTypeName(System.String,Intent.Metadata.Models.IMetadataModel,System.String@)">
            <summary>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name of the Template with <paramref name="templateId"/> as a string.
            This overload assumes that the Template can have many instances and identifies the target instance
            based on which has the <paramref name="model"/>.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="templateId">The unique Template identifier.</param>
            <param name="model">The model instance that the Template must be bound to.</param>
            <param name="typeName">The resolved type name.</param>
            <returns><see langword="true"/> if the type name could be resolved.</returns>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetTypeName(System.String,System.String)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetTypeName(System.String,System.String,System.String@)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.TryGetTypeName(System.String,System.String,System.String@)">
            <summary>
            Resolves and <see cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.NormalizeTypeName(System.String)">normalizes</see> the type name of the Template with <paramref name="templateId"/> as a string.
            This overload assumes that the Template can have many instances and identifies the target instance
            based on which has the <paramref name="modelId"/>.
            <para>
            See the
            <seealso href="https://intentarchitect.com/#/redirect/?category=xmlDocComment&amp;subCategory=intent.modules.common&amp;additionalData=getTypeName">
            GetTypeName article</seealso> for more information.
            </para>
            </summary>
            <param name="templateId">The unique Template identifier.</param>
            <param name="modelId">The identifier of the model that the Template must be bound to.</param>
            <param name="typeName">The resolved type name.</param>
            <returns><see langword="true"/> if the type name could be resolved.</returns>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplate``1(System.Func{``0},System.Func{System.String},Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <remarks>
            For 4.0.0 we want to add a generic type parameter constraint where <typeparamref name="TTemplate"/>
            must be of type <see cref="T:Intent.Templates.ITemplate"/>.<br/>
            <br/>
            By implication, all the public overloads of this will need the same constraint applied.<br/>
            <br/>
            A blocker for this is that some code in other modules is as follows:
            <code>
            <![CDATA[
            GetTemplate<IModuleBuilderTemplate>
            ]]>
            </code>
            Which means that we will probably need to make IModuleBuilderTemplate derive from
            <see cref="T:Intent.Templates.ITemplate"/>.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplate``1(Intent.Modules.Common.ITemplateDependency,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <inheritdoc cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplate``1(System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)"/>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplate``1(System.String,Intent.Metadata.Models.IMetadataModel,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <inheritdoc cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplate``1(System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)"/>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplate``1(System.String,System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <inheritdoc cref="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplate``1(System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)"/>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.GetTemplate``1(System.String,Intent.Modules.Common.Templates.TemplateDiscoveryOptions)">
            <summary>
            Retrieve an instance of an <see cref="T:Intent.Templates.ITemplate"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.UseType(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo)">
            <summary>
            Returns a string representation of the provided <paramref name="resolvedTypeInfo"/> and
            adds any applicable template dependencies.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.IntentTemplateBase.ToString">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplate">
            <summary>
            Outputs the contents of the file as per the path provided in 'sourcePath' constructor
            parameter.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplate.#ctor(System.String,System.String,System.String,Intent.Engine.IOutputTarget,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String})">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplate"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplate.TransformText">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplate.GetTemplateFileConfig">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplate.GetCorrelationId">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplateRegistration">
            <summary>
            Inherit from this class to generate static content for each file in a folder and it's sub-folders
            in your module.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplateRegistration.#ctor(System.String)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplateRegistration"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplateRegistration.TemplateId">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplateRegistration.ContentSubFolder">
            <summary>
            <para>
            Location of source in the "content" folder.
            </para>
            <para>
            Allows to sub-divide the "content" folder, in the event of other Template Registrations
            of type <see cref="T:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplateRegistration"/>
            having to scan for files, by specifying the sub-folder path where the relevant content is located.
            Specify only the sub-folder name (or sub-path, using '/' as path delimiter).
            </para>
            </summary>
            <remarks>
            By default it will scan all files inside the "content" folder.
            </remarks>
            <example>
            In your project's root folder you have the "content" folder. Inside of that folder there
            is "SolutionItems". "ContentSubFolder" should then just be "SolutionItems".
            </example>
        </member>
        <member name="P:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplateRegistration.Replacements">
            <summary>
            Will look for entries strings with <code>&lt;#= {element.Key} #&gt;</code> and replace them with <code>{element.Value}</code>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.StaticContent.StaticContentTemplateRegistration.Register(Intent.Registrations.ITemplateInstanceRegistry,Intent.Engine.IApplication)">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.Templates.T4TemplateBase.GenerationEnvironment">
            <summary>
            The string builder that generation-time code is using to assemble generated output
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.T4TemplateBase.indentLengths">
            <summary>
            A list of the lengths of each indent that was added with PushIndent
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.T4TemplateBase.CurrentIndent">
            <summary>
            Gets the current indent we use when adding lines to the output
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.T4TemplateBase.Session">
            <summary>
            Current transformation session
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.T4TemplateBase.Write(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.T4TemplateBase.WriteLine(System.String)">
            <summary>
            Write text directly into the generated output
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.T4TemplateBase.Write(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.T4TemplateBase.WriteLine(System.String,System.Object[])">
            <summary>
            Write formatted text directly into the generated output
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.T4TemplateBase.PushIndent(System.String)">
            <summary>
            Increase the indent
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.T4TemplateBase.PopIndent">
            <summary>
            Remove the last indent that was added with PushIndent
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.T4TemplateBase.ClearIndent">
            <summary>
            Remove any indentation
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Templates.T4TemplateBase.ToStringInstanceHelper">
            <summary>
            Utility class to produce culture-oriented representation of an object as a string.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.T4TemplateBase.ToStringInstanceHelper.FormatProvider">
            <summary>
            Gets or sets format provider to be used by ToStringWithCulture method.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.T4TemplateBase.ToStringInstanceHelper.ToStringWithCulture(System.Object)">
            <summary>
            This is called from the compile/run appdomain to convert objects within an expression block to a string
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.T4TemplateBase.ToStringHelper">
            <summary>
            Helper to produce culture-oriented representation of an object as a string
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Templates.TemplateDependency">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.Templates.TemplateDependency.TemplateId">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.Templates.TemplateDependency.Context">
            <summary>
            This will be changed to a private member, please contact support@intentarchitect.com if you have a need for this.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateDependency.ToString">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateDependency.OnTemplate(System.String)">
            <summary>
            Returns a <see cref="T:Intent.Modules.Common.ITemplateDependency"/> which finds templates which have the
            provided <paramref name="templateIdOrName"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateDependency.OnTemplate(Intent.Templates.ITemplate)">
            <summary>
            Returns a <see cref="T:Intent.Modules.Common.ITemplateDependency"/> which finds a template whose reference
            matches the provided <see cref="T:Intent.Templates.ITemplate"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateDependency.OnModel(System.String,System.Object)">
            <summary>
            Returns a <see cref="T:Intent.Modules.Common.ITemplateDependency"/> which finds templates which have the
            provided <paramref name="templateIdOrName"/> and which are a <see cref="T:Intent.Templates.ITemplateWithModel"/>
            whose <see cref="P:Intent.Templates.ITemplateWithModel.Model"/>'s reference matches that of the provided
            <paramref name="metadataModel"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateDependency.OnModel(System.String,Intent.Metadata.Models.IMetadataModel)">
            <summary>
            Returns a <see cref="T:Intent.Modules.Common.ITemplateDependency"/> which finds templates which have the
            provided <paramref name="templateIdOrName"/> and which are a
            <see cref="T:Intent.Templates.ITemplateWithModel"/> whose <see cref="P:Intent.Templates.ITemplateWithModel.Model"/> is a
            <see cref="T:Intent.Metadata.Models.IMetadataModel"/> with its <see cref="P:Intent.Metadata.Models.IMetadataModel.Id"/> matching that
            the provided <paramref name="metadataModel"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateDependency.IsMatch(Intent.Templates.ITemplate)">
            <inheritdoc />
        </member>
        <member name="F:Intent.Modules.Common.Templates.TemplateDependency.FastLookupTemplateDependency`2.InstanceCache">
            <summary>
            Avoids additional memory allocations and also improves effectiveness of <see cref="F:Intent.Modules.Common.Templates.TemplateDependency.FastLookupTemplateDependency`2._cachedLookupTemplateInstance"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions">
            <summary>
            Template discovery options.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.TemplateDiscoveryOptions.ThrowIfNotFound">
            <summary>
            Throw an exception if the template is not found. Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.TemplateDiscoveryOptions.TrackDependency">
            <summary>
            Whether or not to automatically track the template as a dependency. Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.Templates.TemplateDiscoveryOptions.DoNotThrow">
            <summary>
            An instance of <see cref="T:Intent.Modules.Common.Templates.TemplateDiscoveryOptions"/> where <see cref="P:Intent.Modules.Common.Templates.TemplateDiscoveryOptions.ThrowIfNotFound"/> is set to false.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateExtensions.ToSentenceCase(System.String)">
            <summary>
            Converts the input to sense casing (e.g. SomeString -> Some string).
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateRoleRegistry.FindTemplateInstancesForRole(System.String)">
            <summary>
            Finds all templates with id of <paramref name="role"/>
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateRoleRegistry.FindTemplateInstancesForRole(System.String,System.String)">
            <summary>
            Finds all templates with <see cref="P:Intent.Templates.ITemplate.Id"/> of <paramref name="role"/>
            which is also a <see cref="T:Intent.Templates.ITemplateWithModel"/> whose
            <see cref="P:Intent.Templates.ITemplateWithModel.Model"/> is a <see cref="T:Intent.Metadata.Models.IMetadataModel"/> whose
            <see cref="P:Intent.Metadata.Models.IMetadataModel.Id"/> matches the provided
            <paramref name="metadataModelId"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateRoleRegistry.FindTemplateInstancesForRole(System.String,System.Object)">
            <summary>
            Finds all templates with <see cref="P:Intent.Templates.ITemplate.Id"/> of <paramref name="role"/>
            which is also a <see cref="T:Intent.Templates.ITemplateWithModel"/> whose
            <see cref="P:Intent.Templates.ITemplateWithModel.Model"/>'s reference matches that of the provided
            <paramref name="model"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateRoleRegistry.FindTemplateInstanceForRole(System.String)">
            <summary>
            Finds the template with id of <paramref name="role"/> and that meets the <paramref name="predicate"/> filter.
            If more than one template is found then an exception will be thrown.
            </summary>
            <param name="role"></param>
            <returns></returns>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateRoleRegistry.FindTemplateInstanceForRole(System.String,System.String)">
            <summary>
            Finds the template with <see cref="P:Intent.Templates.ITemplate.Id"/> of <paramref name="role"/>
            which is also a <see cref="T:Intent.Templates.ITemplateWithModel"/> whose
            <see cref="P:Intent.Templates.ITemplateWithModel.Model"/> is a <see cref="T:Intent.Metadata.Models.IMetadataModel"/> whose
            <see cref="P:Intent.Metadata.Models.IMetadataModel.Id"/> matches the provided
            <paramref name="metadataModelId"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.Templates.TemplateRoleRegistry.FindTemplateInstanceForRole(System.String,System.Object)">
            <summary>
            Finds the template with <see cref="P:Intent.Templates.ITemplate.Id"/> of <paramref name="role"/>
            which is also a <see cref="T:Intent.Templates.ITemplateWithModel"/> whose
            <see cref="P:Intent.Templates.ITemplateWithModel.Model"/>'s reference matches that of the provided
            <paramref name="model"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.CollectionFormatter">
            <summary>
            Generic collection formatter implementation which accepts the collection formatter as a string or function.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.CollectionFormatter.#ctor(System.Func{System.String,System.String})">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.TypeResolution.CollectionFormatter"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.CollectionFormatter.Create(System.String)">
            <summary>
            Returns an instance of <see cref="T:Intent.Modules.Common.TypeResolution.CollectionFormatter"/> with the specified
            <paramref name="collectionFormat"/>.
            </summary>
            <remarks>
            A cache of <see cref="T:Intent.Modules.Common.TypeResolution.CollectionFormatter"/> instances is first checked for an already
            existing instance, if an instance is found then that is returned, otherwise a new
            instance is created, placed in the cache and returned.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.CollectionFormatter.Format(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.CollectionFormatter.ApplyTo(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo)">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.DefaultNullableFormatter">
            <summary>
            Does not alter the name of the resolved type.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.DefaultNullableFormatter.#ctor">
            <summary>
            Obsolete. Use <see cref="P:Intent.Modules.Common.TypeResolution.DefaultNullableFormatter.Instance"/> instead.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.DefaultNullableFormatter.Instance">
            <summary>
            Singleton instance of <see cref="T:Intent.Modules.Common.TypeResolution.DefaultNullableFormatter"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.DefaultNullableFormatter.AsNullable(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo">
            <summary>
            Information about the resolved type.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.Name">
            <summary>
            The resolved name of the type.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.IsPrimitive">
            <summary>
            Whether this type is a primitive type.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.IsNullable">
            <summary>
            Whether this type is nullable
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.IsCollection">
            <summary>
            Whether this type is a collection
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.Template">
            <summary>
            The template that was used to resolve this type, if any.
            <para>
            See <see cref="M:Intent.Modules.Common.TypeResolution.TypeResolverBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> for adding Type Sources for resolving these types.
            </para>
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.TypeReference">
            <summary>
            The original <see cref="T:Intent.Metadata.Models.ITypeReference"/> that was provided to resolve this type.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.GenericTypeParameters">
            <summary>
            Resolved generic types for this <see cref="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.NullableFormatter">
            <summary>
            Nullable formatter to apply to the type.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo.GetTemplateDependencies">
            <summary>
            Finds all templates this resolved type is dependent on by checking itself as well as
            recursively checking generic type parameters as well.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.ICollectionFormatter">
            <summary>
            Used with <see cref="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo"/> to format collections.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ICollectionFormatter.Format(System.String)">
            <summary>
            Returns the provided <paramref name="type"/> formatted as collection.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ICollectionFormatter.ApplyTo(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo)">
            <summary>
            Returns a new <see cref="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo"/> with the original
            <paramref name="typeInfo"/> embedded within it.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.INullableFormatter">
            <summary>
            Used with <see cref="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo"/> to format nullable types.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.INullableFormatter.AsNullable(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo,System.String)">
            <summary>
            Return the provided <paramref name="type"/> formatted as a nullable type while taking
            into account information in the provided <paramref name="typeInfo"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.ITypeResolver">
            <summary>
            Abstraction for resolving types.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ITypeResolver.DefaultCollectionFormatter">
            <summary>
            The current default <see cref="T:Intent.Modules.Common.TypeResolution.ICollectionFormatter"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ITypeResolver.DefaultNullableFormatter">
            <summary>
            The current default <see cref="T:Intent.Modules.Common.TypeResolution.INullableFormatter"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.SetDefaultCollectionFormatter(Intent.Modules.Common.TypeResolution.ICollectionFormatter)">
            <summary>
            Sets the default <see cref="T:Intent.Modules.Common.TypeResolution.ICollectionFormatter"/> which is used for methods which
            receive a <see langword="null"/> <see cref="T:Intent.Modules.Common.TypeResolution.ICollectionFormatter"/> value.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.SetDefaultNullableFormatter(Intent.Modules.Common.TypeResolution.INullableFormatter)">
            <summary>
            Sets the default <see cref="T:Intent.Modules.Common.TypeResolution.INullableFormatter"/> which is used for methods which
            receive a <see langword="null"/> <see cref="T:Intent.Modules.Common.TypeResolution.INullableFormatter"/> value.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)">
            <summary>
            Adds a default <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> that is used when resolving type names of classes.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.AddClassTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.TypeResolution.ITypeResolver.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource,System.String)">
            <summary>
            Adds an <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> that is only used to resolve type names when <see cref="M:Intent.Modules.Common.TypeResolution.ITypeResolver.InContext(System.String)"/> is called for the specific <see cref="!:contextName"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.AddClassTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource,System.String)">
            <summary>
            Obsolete. Use <see cref="M:Intent.Modules.Common.TypeResolution.ITypeResolver.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource,System.String)"/> instead.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.Get(Intent.Modules.Common.Templates.IClassProvider)">
            <summary>
            Resolves the type information for the specified <paramref name="classProvider"/>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.Get(Intent.Metadata.Models.ITypeReference)">
            <summary>
            Resolves the type information for the specified <paramref name="typeInfo"/>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.Get(Intent.Metadata.Models.ITypeReference,System.String)">
            <summary>
            Resolves the type information for the specified <paramref name="typeInfo"/>
            </summary>
            <param name="typeInfo">The type for which to resolve.</param>
            <param name="collectionFormat">The collection format provided if the typeInfo.IsCollection is true</param>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.Get(Intent.Metadata.Models.ICanBeReferencedType)">
            <summary>
            Resolves the type information for the specified <paramref name="element"/>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.Get(Intent.Metadata.Models.ICanBeReferencedType,System.String)">
            <summary>
            Resolves the type information for the specified <paramref name="element"/>
            </summary>
            <param name="element">The type for which to resolve.</param>
            <param name="collectionFormat">The collection format provided if the typeInfo.IsCollection is true</param>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.InContext(System.String)">
            <summary>
            Returns a <see cref="T:Intent.Modules.Common.TypeResolution.ITypeResolverContext"/> that resolves the type using the
            <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> added to the specified "<paramref name="contextName"/>"
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolver.GetTemplateDependencies">
            <summary>
            Returns a collection of template dependencies discovered while discovering type names from templates.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolverContext.Get(Intent.Modules.Common.Templates.IClassProvider)">
            <summary>
            Resolves the type information for the specified <paramref name="classProvider"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolverContext.Get(Intent.Metadata.Models.ITypeReference)">
            <summary>
            Resolves the type name for the specified <paramref name="typeInfo"/>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolverContext.Get(Intent.Metadata.Models.ITypeReference,System.String)">
            <summary>
            Resolves the type name for the specified <paramref name="typeInfo"/>
            </summary>
            <param name="collectionFormat">The collection format to be applied if the typeInfo.IsCollection is true</param>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolverContext.Get(Intent.Metadata.Models.ITypeReference,Intent.Modules.Common.TypeResolution.ICollectionFormatter)">
            <summary>
            Resolves the type name for the specified <paramref name="typeInfo"/>
            </summary>
            <param name="collectionFormatter">The collection formatter to be applied if the typeInfo.IsCollection is true</param>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolverContext.Get(Intent.Metadata.Models.ITypeReference,Intent.Modules.Common.TypeResolution.ITypeSource)">
            <summary>
            Resolves the type name for the specified <paramref name="typeInfo"/>
            </summary>
            <param name="typeSource">The <paramref name="typeSource"/> to search for the <paramref name="typeInfo"/>. If not found, will then search added <see cref="P:Intent.Modules.Common.TypeResolution.ITypeResolverContext.TypeSources"/>.</param>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolverContext.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)">
            <summary>
            Adds a <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/> that is used when resolving information about types provided by other templates.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolverContext.SetCollectionFormatter(Intent.Modules.Common.TypeResolution.ICollectionFormatter)">
            <summary>
            Default collection formatter to use when the typeInfo.IsCollection is true;
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeResolverContext.SetNullableFormatter(Intent.Modules.Common.TypeResolution.INullableFormatter)">
            <summary>
            Default collection formatter to use when the typeInfo.IsCollection is true;
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ITypeResolverContext.TypeSources">
            <summary>
            Returns the list of added <see cref="T:Intent.Modules.Common.TypeResolution.ITypeSource"/>s
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ITypeResolverContext.DefaultCollectionFormatter">
            <summary>
            The default <see cref="T:Intent.Modules.Common.TypeResolution.ICollectionFormatter"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ITypeResolverContext.DefaultNullableFormatter">
            <summary>
            The default <see cref="T:Intent.Modules.Common.TypeResolution.INullableFormatter"/>.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.ITypeSource">
            <summary>
            Provides a source to resolve types.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeSource.GetType(Intent.Metadata.Models.ITypeReference)">
            <summary>
            Returns a <see cref="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo"/> type if this type source resolves a type. If not, this method should return null.
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ITypeSource.GetTemplateDependencies">
            <summary>
            Returns any template dependencies that were found when the <see cref="M:Intent.Modules.Common.TypeResolution.ITypeSource.GetType(Intent.Metadata.Models.ITypeReference)"/> method was called.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ITypeSource.CollectionFormatter">
            <summary>
            A formatter for if the <see cref="T:Intent.Metadata.Models.ITypeReference"/> provided to the <see cref="M:Intent.Modules.Common.TypeResolution.ITypeSource.GetType(Intent.Metadata.Models.ITypeReference)"/> method is marked as a collection.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ITypeSource.NullableFormatter">
            <summary>
            A formatter for if the <see cref="T:Intent.Metadata.Models.ITypeReference"/> provided to the <see cref="M:Intent.Modules.Common.TypeResolution.ITypeSource.GetType(Intent.Metadata.Models.ITypeReference)"/> method is marked as nullable.
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo">
            <summary>
            Implementation of <see cref="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean,Intent.Metadata.Models.ITypeReference,Intent.Templates.ITemplate,Intent.Modules.Common.TypeResolution.INullableFormatter,System.Collections.Generic.IReadOnlyList{Intent.Modules.Common.TypeResolution.IResolvedTypeInfo})">
            <summary>
            Creates an instance of <see cref="T:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.#ctor(System.String,System.Boolean,Intent.Metadata.Models.ITypeReference,Intent.Templates.ITemplate,Intent.Modules.Common.TypeResolution.INullableFormatter)">
            <summary>
            Creates an instance of <see cref="T:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.#ctor(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo)">
            <summary>
            Creates an instance of <see cref="T:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.Name">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.IsPrimitive">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.IsNullable">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.IsCollection">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.Template">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.TypeReference">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.GenericTypeParameters">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.NullableFormatter">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.GetTemplateDependencies">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo.ToString">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.TypeResolverBase.DefaultCollectionFormatter">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.TypeResolverBase.DefaultNullableFormatter">
            <inheritdoc />
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.CanBeReferencedTypeExtensions">
            <summary>
            Extension methods for <see cref="T:Intent.Metadata.Models.ICanBeReferencedType"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.CanBeReferencedTypeExtensions.AsTypeReference(Intent.Metadata.Models.ICanBeReferencedType)">
            <summary>
            Converts <see cref="T:Intent.Metadata.Models.ICanBeReferencedType"/> to type of <see cref="T:Intent.Metadata.Models.ITypeReference"/>
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.CanBeReferencedTypeExtensions.AsTypeReference(Intent.Metadata.Models.ICanBeReferencedType,System.Boolean,System.Boolean)">
            <summary>
            Converts <see cref="T:Intent.Metadata.Models.ICanBeReferencedType"/> to type of <see cref="T:Intent.Metadata.Models.ITypeReference"/>
            </summary>
        </member>
        <member name="T:Intent.Modules.Common.TypeResolution.TypeResolverContextBase">
            <summary>
            Base abstract implementation of <see cref="T:Intent.Modules.Common.TypeResolution.ITypeResolverContext"/>.
            </summary>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.#ctor(Intent.Modules.Common.TypeResolution.ICollectionFormatter,Intent.Modules.Common.TypeResolution.INullableFormatter)">
            <summary>
            Creates a new instance of <see cref="T:Intent.Modules.Common.TypeResolution.TypeResolverContextBase"/>.
            </summary>
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.DefaultCollectionFormatter">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.DefaultNullableFormatter">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.AddTypeSource(Intent.Modules.Common.TypeResolution.ITypeSource)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.SetCollectionFormatter(Intent.Modules.Common.TypeResolution.ICollectionFormatter)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.SetNullableFormatter(Intent.Modules.Common.TypeResolution.INullableFormatter)">
            <inheritdoc />
        </member>
        <member name="P:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.TypeSources">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.Get(Intent.Modules.Common.Templates.IClassProvider)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.Get(Intent.Metadata.Models.ITypeReference)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.Get(Intent.Metadata.Models.ITypeReference,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.Get(Intent.Metadata.Models.ITypeReference,Intent.Modules.Common.TypeResolution.ICollectionFormatter)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.Get(Intent.Metadata.Models.ITypeReference,Intent.Modules.Common.TypeResolution.ITypeSource)">
            <inheritdoc />
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.Get(Intent.Modules.Common.TypeResolution.IResolvedTypeInfo)">
            <summary>
            Resolve a <see cref="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo"/> from the provided <paramref name="resolvedTypeInfo"/>.
            </summary>
            <remarks>
            Override this method to return a different specialized implementation of <see cref="T:Intent.Modules.Common.TypeResolution.IResolvedTypeInfo"/>.
            </remarks>
        </member>
        <member name="M:Intent.Modules.Common.TypeResolution.TypeResolverContextBase.ResolveType(Intent.Metadata.Models.ITypeReference,Intent.Modules.Common.TypeResolution.INullableFormatter)">
            <summary>
            Resolve a <see cref="T:Intent.Modules.Common.TypeResolution.ResolvedTypeInfo"/> for the provided <paramref name="typeReference"/>.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.AssemblyBuilderFactory.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
            <summary>
            Defines a dynamic assembly that has the specified name and access rights.
            </summary>
            <param name="name">The name of the assembly.</param>
            <param name="access">The access rights of the assembly.</param>
            <returns>An object that represents the new assembly.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider">
            <summary>
            The abstract DynamicLinqCustomTypeProvider which is used by the DefaultDynamicLinqCustomTypeProvider and can be used by a custom TypeProvider like in .NET Core.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.FindTypesMarkedWithDynamicLinqTypeAttribute(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds the unique types marked with DynamicLinqTypeAttribute.
            </summary>
            <param name="assemblies">The assemblies to process.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.ResolveType(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String)">
            <summary>
            Resolve any type which is registered in the current application domain.
            </summary>
            <param name="assemblies">The assemblies to inspect.</param>
            <param name="typeName">The typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.ResolveTypeBySimpleName(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.String)">
            <summary>
            Resolve a type by the simple name which is registered in the current application domain.
            </summary>
            <param name="assemblies">The assemblies to inspect.</param>
            <param name="simpleTypeName">The simple typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.AbstractDynamicLinqCustomTypeProvider.GetAssemblyTypesWithDynamicLinqTypeAttribute(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Gets the assembly types annotated with <see cref="T:System.Linq.Dynamic.Core.CustomTypeProviders.DynamicLinqTypeAttribute"/> in an Exception friendly way.
            </summary>
            <param name="assemblies">The assemblies to process.</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /></returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider">
             <summary>
             The default implementation for <see cref="T:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider"/>.
             
             Scans the current AppDomain for all types marked with <see cref="T:System.Linq.Dynamic.Core.CustomTypeProviders.DynamicLinqTypeAttribute"/>, and adds them as custom Dynamic Link types.
            
             Also provides functionality to resolve a Type in the current Application Domain.
            
             This class is used as default for full .NET Framework, so not for .NET Core
             </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider"/> class.
            </summary>
            <param name="cacheCustomTypes">Defines whether to cache the CustomTypes which are found in the Application Domain. Default set to 'true'.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.GetCustomTypes">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider.GetCustomTypes"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.ResolveType(System.String)">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider.ResolveType(System.String)"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.DefaultDynamicLinqCustomTypeProvider.ResolveTypeBySimpleName(System.String)">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider.ResolveTypeBySimpleName(System.String)"/>
        </member>
        <member name="T:System.Linq.Dynamic.Core.CustomTypeProviders.DynamicLinqTypeAttribute">
            <summary>
            Indicates to Dynamic Linq to consider the Type as a valid dynamic linq type.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider">
            <summary>
            Interface for providing functionality to find custom types for or resolve any type.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider.GetCustomTypes">
            <summary>
            Returns a list of custom types that System.Linq.Dynamic.Core will understand.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1" /> list of custom types.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider.ResolveType(System.String)">
            <summary>
            Resolve any type by fullname which is registered in the current application domain.
            </summary>
            <param name="typeName">The typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider.ResolveTypeBySimpleName(System.String)">
            <summary>
            Resolve any type by the simple name which is registered in the current application domain.
            </summary>
            <param name="simpleTypeName">The typename to resolve.</param>
            <returns>A resolved <see cref="T:System.Type"/> or null when not found.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DefaultQueryableAnalyzer">
            <summary>
            Default implementation.
            </summary>
            <seealso cref="T:System.Linq.Dynamic.Core.IQueryableAnalyzer" />
        </member>
        <member name="M:System.Linq.Dynamic.Core.DefaultQueryableAnalyzer.SupportsLinqToObjects(System.Linq.IQueryable,System.Linq.IQueryProvider)">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.IQueryableAnalyzer.SupportsLinqToObjects(System.Linq.IQueryable,System.Linq.IQueryProvider)"/>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicClass">
            <summary>
            Provides a base class for dynamic objects.
            
            In addition to the methods defined here, the following items are added using reflection:
            - default constructor
            - constructor with all the properties as parameters (if not linq-to-entities)
            - all properties (also with getter and setters)
            - ToString() method
            - Equals() method
            - GetHashCode() method
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.GetDynamicPropertyValue``1(System.String)">
            <summary>
            Gets the dynamic property by name.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <returns>T</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.GetDynamicPropertyValue(System.String)">
            <summary>
            Gets the dynamic property value by name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>value</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.SetDynamicPropertyValue``1(System.String,``0)">
            <summary>
            Sets the dynamic property value by name.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.SetDynamicPropertyValue(System.String,System.Object)">
            <summary>
            Sets the dynamic property value by name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:System.Linq.Dynamic.Core.DynamicClass.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <value>The <see cref="T:System.Object"/>.</value>
            <param name="name">The name.</param>
            <returns>Value from the property.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>
            A sequence that contains dynamic member names.
            </returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClass.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
            <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
            <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicClassFactory">
            <summary>
            A factory to create dynamic classes, based on <see href="http://stackoverflow.com/questions/29413942/c-sharp-anonymous-object-with-properties-from-dictionary" />.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClassFactory.#cctor">
            <summary>
            Initializes the <see cref="T:System.Linq.Dynamic.Core.DynamicClassFactory"/> class.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClassFactory.CreateType(System.Collections.Generic.IList{System.Linq.Dynamic.Core.DynamicProperty},System.Boolean)">
            <summary>
            The CreateType method creates a new data class with a given set of public properties and returns the System.Type object for the newly created class. If a data class with an identical sequence of properties has already been created, the System.Type object for this class is returned.        
            Data classes implement private instance variables and read/write property accessors for the specified properties.Data classes also override the Equals and GetHashCode members to implement by-value equality.
            Data classes are created in an in-memory assembly in the current application domain. All data classes inherit from <see cref="T:System.Linq.Dynamic.Core.DynamicClass"/> and are given automatically generated names that should be considered private (the names will be unique within the application domain but not across multiple invocations of the application). Note that once created, a data class stays in memory for the lifetime of the current application domain. There is currently no way to unload a dynamically created data class.
            The dynamic expression parser uses the CreateClass methods to generate classes from data object initializers. This feature in turn is often used with the dynamic Select method to create projections.
            </summary>
            <param name="properties">The DynamicProperties</param>
            <param name="createParameterCtor">Create a constructor with parameters. Default set to true. Note that for Linq-to-Database objects, this needs to be set to false.</param>
            <returns>Type</returns>
            <example>
            <code>
            <![CDATA[
            DynamicProperty[] props = new DynamicProperty[] { new DynamicProperty("Name", typeof(string)), new DynamicProperty("Birthday", typeof(DateTime)) };
            Type type = DynamicClassFactory.CreateType(props);
            DynamicClass dynamicClass = Activator.CreateInstance(type) as DynamicClass;
            dynamicClass.SetDynamicProperty("Name", "Albert");
            dynamicClass.SetDynamicProperty("Birthday", new DateTime(1879, 3, 14));
            Console.WriteLine(dynamicClass);
            ]]>
            </code>
            </example>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicClassFactory.GenerateKey(System.Collections.Generic.IEnumerable{System.Linq.Dynamic.Core.DynamicProperty},System.Boolean)">
            <summary>
            Generates the key.
            Anonymous classes are generics based. The generic classes are distinguished by number of parameters and name of parameters. The specific types of the parameters are the generic arguments.
            </summary>
            <param name="dynamicProperties">The dynamic propertys.</param>
            <param name="createParameterCtor">if set to <c>true</c> [create parameter ctor].</param>
            <returns></returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicExpressionParser">
            <summary>
            Helper class to convert an expression into an LambdaExpression
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda``1(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda``1(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Linq.Expressions.ParameterExpression[],System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Boolean,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda``2(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.String,System.Object[])">
            <summary>
            Parses an expression into a Typed Expression.
            </summary>
            <typeparam name="T">The `it`-Type.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Boolean,System.Type,System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="itType">The main type from the dynamic class expression.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Linq.Dynamic.Core.ParsingConfig,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression. (Also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.)
            </summary>
            <param name="parsingConfig">The Configuration for the parsing.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicExpressionParser.ParseLambda(System.Boolean,System.Linq.Expressions.ParameterExpression[],System.Type,System.String,System.Object[])">
            <summary>
            Parses an expression into a LambdaExpression.
            </summary>
            <param name="createParameterCtor">if set to <c>true</c> then also create a constructor for all the parameters. Note that this doesn't work for Linq-to-Database entities.</param>
            <param name="parameters">A array from ParameterExpressions.</param>
            <param name="resultType">Type of the result. If not specified, it will be generated dynamically.</param>
            <param name="expression">The expression.</param>
            <param name="values">An object array that contains zero or more objects which are used as replacement values.</param>
            <returns>The generated <see cref="T:System.Linq.Expressions.LambdaExpression"/></returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicGetMemberBinder">
            <summary>
            Based on From SqlLinq by dkackman. https://github.com/dkackman/SqlLinq/blob/210b594e37f14061424397368ed750ce547c21e7/License.md
            </summary>
            <seealso cref="T:System.Dynamic.GetMemberBinder" />
        </member>
        <member name="T:System.Linq.Dynamic.Core.DynamicProperty">
            <summary>
            DynamicProperty
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.DynamicProperty.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.DynamicProperty"/> class.
            </summary>
            <param name="name">The name from the property.</param>
            <param name="type">The type from the property.</param>
        </member>
        <member name="P:System.Linq.Dynamic.Core.DynamicProperty.Name">
            <summary>
            Gets the name from the property.
            </summary>
            <value>
            The name from the property.
            </value>
        </member>
        <member name="P:System.Linq.Dynamic.Core.DynamicProperty.Type">
            <summary>
            Gets the type from the property.
            </summary>
            <value>
            The type from the property.
            </value>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Exceptions.ParseException">
            <summary>
            Represents errors that occur while parsing dynamic linq string expressions.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Exceptions.ParseException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Exceptions.ParseException"/> class with a specified error message and position.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="position">The location in the parsed string that produced the <see cref="T:System.Linq.Dynamic.Core.Exceptions.ParseException"/></param>
        </member>
        <member name="P:System.Linq.Dynamic.Core.Exceptions.ParseException.Position">
            <summary>
            The location in the parsed string that produced the <see cref="T:System.Linq.Dynamic.Core.Exceptions.ParseException"/>.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Exceptions.ParseException.ToString">
            <summary>
            Creates and returns a string representation of the current exception.
            </summary>
            <returns>A string representation of the current exception.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Exceptions.ParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*" />
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter" />
            </PermissionSet>
        </member>
        <member name="T:System.Linq.Dynamic.Core.IAssemblyHelper">
            <summary>
            IAssemblyHelper interface which is used to retrieve assemblies that have been loaded into the execution context of this application domain.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.IAssemblyHelper.GetAssemblies">
            <summary>
            Gets the assemblies that have been loaded into the execution context of this application domain.
            </summary>
            
            <returns>
            An array of assemblies in this application domain.
            </returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.IQueryableAnalyzer">
            <summary>
            Interface for QueryableAnalyzer.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.IQueryableAnalyzer.SupportsLinqToObjects(System.Linq.IQueryable,System.Linq.IQueryProvider)">
            <summary>
            Determines whether the specified query (and provider) supports LinqToObjects.
            </summary>
            <param name="query">The query to check.</param>
            <param name="provider">The provider to check (can be null).</param>
            <returns>true/false</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Parser.ConstantExpressionWrapper">
            <summary>
            Based on gblog by graeme-hill. https://github.com/graeme-hill/gblog/blob/master/source_content/articles/2014.139_entity-framework-dynamic-queries-and-parameterization.mkd
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Parser.ExpressionParser">
            <summary>
            ExpressionParser
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.Parser.ExpressionParser.ItName">
            <summary>
            Gets name for the `it` field. By default this is set to the KeyWord value "it".
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.ExpressionParser.#ctor(System.Linq.Expressions.ParameterExpression[],System.String,System.Object[],System.Linq.Dynamic.Core.ParsingConfig)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Parser.ExpressionParser"/> class.
            </summary>
            <param name="parameters">The parameters.</param>
            <param name="expression">The expression.</param>
            <param name="values">The values.</param>
            <param name="parsingConfig">The parsing configuration.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.ExpressionParser.Parse(System.Type,System.Boolean)">
            <summary>
            Uses the TextParser to parse the string into the specified result type.
            </summary>
            <param name="resultType">Type of the result.</param>
            <param name="createParameterCtor">if set to <c>true</c> [create parameter ctor].</param>
            <returns>Expression</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.ExpressionPromoter.Promote(System.Linq.Expressions.Expression,System.Type,System.Boolean,System.Boolean)">
            <inheritdoc cref="M:System.Linq.Dynamic.Core.Parser.IExpressionPromoter.Promote(System.Linq.Expressions.Expression,System.Type,System.Boolean,System.Boolean)"/>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Parser.IExpressionPromoter">
            <summary>
            Expression promoter is used to promote object or value types
            to their destination type when an automatic promotion is available
            such as: int to int?
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.IExpressionPromoter.Promote(System.Linq.Expressions.Expression,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Promote an expression
            </summary>
            <param name="expr">Source expression</param>
            <param name="type">Destionation data type to promote</param>
            <param name="exact">If the match must be exact</param>
            <param name="convertExpr">Convert expression</param>
            <returns>The promoted <see cref="T:System.Linq.Expressions.Expression"/></returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Parser.SupportedMethods.MethodFinder.#ctor(System.Linq.Dynamic.Core.ParsingConfig)">
            <summary>
            Get an instance
            </summary>
            <param name="parsingConfig"></param>
        </member>
        <member name="T:System.Linq.Dynamic.Core.ParsingConfig">
            <summary>
            Configuration class for System.Linq.Dynamic.Core.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.Default">
            <summary>
            Default ParsingConfig
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.DefaultEFCore21">
            <summary>
            Default ParsingConfig for EntityFramework Core 2.1 and higher
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.CustomTypeProvider">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Dynamic.Core.CustomTypeProviders.IDynamicLinkCustomTypeProvider"/>.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.ExpressionPromoter">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Dynamic.Core.Parser.IExpressionPromoter"/>.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.QueryableAnalyzer">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Dynamic.Core.IQueryableAnalyzer"/>.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.AreContextKeywordsEnabled">
            <summary>
            Determines if the context keywords (it, parent, and root) are valid and usable inside a Dynamic Linq string expression.  
            Does not affect the usability of the equivalent context symbols ($, ^ and ~).
            Default value is true.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.UseDynamicObjectClassForAnonymousTypes">
            <summary>
            Gets or sets a value indicating whether to use dynamic object class for anonymous types. Default value is false.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.EvaluateGroupByAtDatabase">
            <summary>
            Gets or sets a value indicating whether the EntityFramework version supports evaluating GroupBy at database level. Default value is false.
            See https://docs.microsoft.com/en-us/ef/core/what-is-new/ef-core-2.1#linq-groupby-translation
            
            Remark: when this setting is set to 'true', make sure to supply this ParsingConfig as first parameter on the extension methods.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.UseParameterizedNamesInDynamicQuery">
            <summary>
            Use Parameterized Names in generated dynamic SQL query. Default set to false.
            See https://github.com/graeme-hill/gblog/blob/master/source_content/articles/2014.139_entity-framework-dynamic-queries-and-parameterization.mkd
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.AllowNewToEvaluateAnyType">
            <summary>
            Allows the New() keyword to evaluate any available Type. Default value is false.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.RenameParameterExpression">
            <summary>
            Renames the (Typed)ParameterExpression empty Name to a the correct supplied name from `it`. Default value is false.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.DisableMemberAccessToIndexAccessorFallback">
            <summary>
            By default when a member is not found in a type and the type has a string based index accessor it will be parsed as an index accessor. Use
            this flag to disable this behaviour and have parsing fail when parsing an expression
            where a member access on a non existing member happens. Default value is false.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Core.ParsingConfig.ResolveTypesBySimpleName">
            <summary>
            By default finding types by a simple name is not suported.
            Use this flag to use the CustomTypeProvider to resolve types by a simple name like "Employee" instead of "MyDatabase.Entities.Employee".
            Note that a first matching type is returned and this functionality needs to scan all types from all assemblies, so use with caution.
            Default value is false.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.TypeConverterFactory.GetConverter(System.Type)">
            <summary>
            Returns a type converter for the specified type.
            </summary>
            <param name="type">The System.Type of the target component.</param>
            <returns>A System.ComponentModel.TypeConverter for the specified type.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer">
            <summary>
            Renames a single (Typed)ParameterExpression in an Expression.
            </summary>
            <seealso cref="T:System.Linq.Expressions.ExpressionVisitor" />
        </member>
        <member name="M:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer"/> class.
            </summary>
            <param name="newName">The new name (the oldName is assumed to be "").</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer"/> class.
            </summary>
            <param name="oldName">The old name.</param>
            <param name="newName">The new name.</param>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer.Rename(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression@)">
            <summary>
            Renames a single (Typed)ParameterExpression from specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="parameterExpression">The new generated (Typed)ParameterExpression.</param>
            <returns>Renamed Expression</returns>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Util.ParameterExpressionRenamer.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc cref="M:System.Linq.Expressions.ExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)"/>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.ArgumentPropertyNull(System.String,System.String)">
            <summary>
            The property '{property}' of the argument '{argument}' cannot be null.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.ArgumentIsEmpty(System.String)">
            <summary>
            The string argument '{argumentName}' cannot be empty.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.InvalidEntityType(System.Type,System.String)">
            <summary>
            The entity type '{type}' provided for the argument '{argumentName}' must be a reference type.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.Core.Validation.CoreStrings.CollectionArgumentIsEmpty(System.String)">
            <summary>
            The collection argument '{argumentName}' must contain at least one element.
            </summary>
        </member>
        <member name="T:System.Reflection.CustomIntrospectionExtensions">
            <summary>
            https://github.com/castleproject/Core/blob/netcore/src/Castle.Core/Compatibility/IntrospectionExtensions.cs
            </summary>
        </member>
        <member name="T:Humanizer.CasingExtensions">
            <summary>
            ApplyCase method to allow changing the case of a sentence easily
            </summary>
        </member>
        <member name="M:Humanizer.CasingExtensions.ApplyCase(System.String,Humanizer.LetterCasing)">
            <summary>
            Changes the casing of the provided input
            </summary>
            <param name="input"></param>
            <param name="casing"></param>
            <returns></returns>
        </member>
        <member name="T:Humanizer.Inflections.Vocabularies">
            <summary>
            Container for registered Vocabularies.  At present, only a single vocabulary is supported: Default.
            </summary>
        </member>
        <member name="P:Humanizer.Inflections.Vocabularies.Default">
            <summary>
            The default vocabulary used for singular/plural irregularities.
            Rules can be added to this vocabulary and will be picked up by called to Singularize() and Pluralize().
            At this time, multiple vocabularies and removing existing rules are not supported.
            </summary>
        </member>
        <member name="T:Humanizer.Inflections.Vocabulary">
            <summary>
            A container for exceptions to simple pluralization/singularization rules.
            Vocabularies.Default contains an extensive list of rules for US English.
            At this time, multiple vocabularies and removing existing rules are not supported.
            </summary>
        </member>
        <member name="M:Humanizer.Inflections.Vocabulary.AddIrregular(System.String,System.String,System.Boolean)">
            <summary>
            Adds a word to the vocabulary which cannot easily be pluralized/singularized by RegEx, e.g. "person" and "people".
            </summary>
            <param name="singular">The singular form of the irregular word, e.g. "person".</param>
            <param name="plural">The plural form of the irregular word, e.g. "people".</param>
            <param name="matchEnding">True to match these words on their own as well as at the end of longer words. False, otherwise.</param>
        </member>
        <member name="M:Humanizer.Inflections.Vocabulary.AddUncountable(System.String)">
            <summary>
            Adds an uncountable word to the vocabulary, e.g. "fish".  Will be ignored when plurality is changed.
            </summary>
            <param name="word">Word to be added to the list of uncountables.</param>
        </member>
        <member name="M:Humanizer.Inflections.Vocabulary.AddPlural(System.String,System.String)">
            <summary>
            Adds a rule to the vocabulary that does not follow trivial rules for pluralization, e.g. "bus" -> "buses"
            </summary>
            <param name="rule">RegEx to be matched, case insensitive, e.g. "(bus)es$"</param>
            <param name="replacement">RegEx replacement  e.g. "$1"</param>
        </member>
        <member name="M:Humanizer.Inflections.Vocabulary.AddSingular(System.String,System.String)">
            <summary>
            Adds a rule to the vocabulary that does not follow trivial rules for singularization, e.g. "vertices/indices -> "vertex/index"
            </summary>
            <param name="rule">RegEx to be matched, case insensitive, e.g. ""(vert|ind)ices$""</param>
            <param name="replacement">RegEx replacement  e.g. "$1ex"</param>
        </member>
        <member name="M:Humanizer.Inflections.Vocabulary.Pluralize(System.String,System.Boolean)">
            <summary>
            Pluralizes the provided input considering irregular words
            </summary>
            <param name="word">Word to be pluralized</param>
            <param name="inputIsKnownToBeSingular">Normally you call Pluralize on singular words; but if you're unsure call it with false</param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.Inflections.Vocabulary.Singularize(System.String,System.Boolean,System.Boolean)">
            <summary>
            Singularizes the provided input considering irregular words
            </summary>
            <param name="word">Word to be singularized</param>
            <param name="inputIsKnownToBePlural">Normally you call Singularize on plural words; but if you're unsure call it with false</param>
            <param name="skipSimpleWords">Skip singularizing single words that have an 's' on the end</param>
            <returns></returns>
        </member>
        <member name="T:Humanizer.InflectorExtensions">
            <summary>
            Inflector extensions
            </summary>
        </member>
        <member name="M:Humanizer.InflectorExtensions.Pluralize(System.String,System.Boolean)">
            <summary>
            Pluralizes the provided input considering irregular words
            </summary>
            <param name="word">Word to be pluralized</param>
            <param name="inputIsKnownToBeSingular">Normally you call Pluralize on singular words; but if you're unsure call it with false</param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.InflectorExtensions.Singularize(System.String,System.Boolean,System.Boolean)">
            <summary>
            Singularizes the provided input considering irregular words
            </summary>
            <param name="word">Word to be singularized</param>
            <param name="inputIsKnownToBePlural">Normally you call Singularize on plural words; but if you're unsure call it with false</param>
            <param name="skipSimpleWords">Skip singularizing single words that have an 's' on the end</param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.InflectorExtensions.Titleize(System.String)">
            <summary>
            Humanizes the input with Title casing
            </summary>
            <param name="input">The string to be titleized</param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.InflectorExtensions.Pascalize(System.String)">
            <summary>
            By default, pascalize converts strings to UpperCamelCase also removing underscores
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.InflectorExtensions.Camelize(System.String)">
            <summary>
            Same as Pascalize except that the first character is lower case
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.InflectorExtensions.Underscore(System.String)">
            <summary>
            Separates the input words with underscore
            </summary>
            <param name="input">The string to be underscored</param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.InflectorExtensions.Dasherize(System.String)">
            <summary>
            Replaces underscores with dashes in the string
            </summary>
            <param name="underscoredWord"></param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.InflectorExtensions.Hyphenate(System.String)">
            <summary>
            Replaces underscores with hyphens in the string
            </summary>
            <param name="underscoredWord"></param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.InflectorExtensions.Kebaberize(System.String)">
            <summary>
            Separates the input words with hyphens and all the words are converted to lowercase
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Humanizer.LetterCasing">
            <summary>
            Options for specifying the desired letter casing for the output string 
            </summary>
        </member>
        <member name="F:Humanizer.LetterCasing.Title">
            <summary>
            SomeString -> Some String
            </summary>
        </member>
        <member name="F:Humanizer.LetterCasing.AllCaps">
            <summary>
            SomeString -> SOME STRING
            </summary>
        </member>
        <member name="F:Humanizer.LetterCasing.LowerCase">
            <summary>
            SomeString -> some string
            </summary>
        </member>
        <member name="F:Humanizer.LetterCasing.Sentence">
            <summary>
            SomeString -> Some string
            </summary>
        </member>
        <member name="T:Humanizer.StringHumanizeExtensions">
            <summary>
            Contains extension methods for humanizing string values.
            </summary>
        </member>
        <member name="M:Humanizer.StringHumanizeExtensions.Humanize(System.String)">
            <summary>
            Humanizes the input string; e.g. Underscored_input_String_is_turned_INTO_sentence -> 'Underscored input String is turned INTO sentence'
            </summary>
            <param name="input">The string to be humanized</param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.StringHumanizeExtensions.Humanize(System.String,Humanizer.LetterCasing)">
            <summary>
            Humanized the input string based on the provided casing
            </summary>
            <param name="input">The string to be humanized</param>
            <param name="casing">The desired casing for the output</param>
            <returns></returns>
        </member>
        <member name="T:Humanizer.ICulturedStringTransformer">
            <summary>
            Can transform a string with the given culture
            </summary>
        </member>
        <member name="M:Humanizer.ICulturedStringTransformer.Transform(System.String,System.Globalization.CultureInfo)">
            <summary>
            Transform the input
            </summary>
            <param name="input">String to be transformed</param>
            <param name="culture">The culture</param>
            <returns></returns>
        </member>
        <member name="T:Humanizer.IStringTransformer">
            <summary>
            Can transform a string
            </summary>
        </member>
        <member name="M:Humanizer.IStringTransformer.Transform(System.String)">
            <summary>
            Transform the input
            </summary>
            <param name="input">String to be transformed</param>
            <returns></returns>
        </member>
        <member name="T:Humanizer.To">
            <summary>
            A portal to string transformation using IStringTransformer
            </summary>
        </member>
        <member name="M:Humanizer.To.Transform(System.String,Humanizer.IStringTransformer[])">
            <summary>
            Transforms a string using the provided transformers. Transformations are applied in the provided order.
            </summary>
            <param name="input"></param>
            <param name="transformers"></param>
            <returns></returns>
        </member>
        <member name="M:Humanizer.To.Transform(System.String,System.Globalization.CultureInfo,Humanizer.ICulturedStringTransformer[])">
            <summary>
            Transforms a string using the provided transformers. Transformations are applied in the provided order.
            </summary>
            <param name="input"></param>
            <param name="culture"></param>
            <param name="transformers"></param>
            <returns></returns>
        </member>
        <member name="P:Humanizer.To.TitleCase">
            <summary>
            Changes string to title case
            </summary>
            <example>
            "INvalid caSEs arE corrected" -> "Invalid Cases Are Corrected"
            </example>
        </member>
        <member name="P:Humanizer.To.LowerCase">
            <summary>
            Changes the string to lower case
            </summary>
            <example>
            "Sentence casing" -> "sentence casing"
            </example>
        </member>
        <member name="P:Humanizer.To.UpperCase">
            <summary>
            Changes the string to upper case
            </summary>
            <example>
            "lower case statement" -> "LOWER CASE STATEMENT"
            </example>
        </member>
        <member name="P:Humanizer.To.SentenceCase">
            <summary>
            Changes the string to sentence case
            </summary>
            <example>
            "lower case statement" -> "Lower case statement"
            </example>
        </member>
    </members>
</doc>
