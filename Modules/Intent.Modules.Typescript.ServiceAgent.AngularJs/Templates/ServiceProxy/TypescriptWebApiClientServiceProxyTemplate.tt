<#@ template  debug="true"  inherits="IntentTypescriptProjectItemTemplateBase<IServiceModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.MetaModel.Service" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="Intent.Modules.Typescript.ServiceAgent.Contracts"#>
namespace <#= Namespace #> {
    export class <#=ClassName#> {
        private readonly baseUrl: string;

        static $inject = ['$http', 'Config'];
        constructor(
            private readonly $http: ng.IHttpService,
            config: any
        ) {
            this.baseUrl = config["<#= ApiBasePathConfigKey #>"];
        }
<#        
    foreach (var o in Model.Operations)
    {
#>

        <#= o.Name.ToCamelCase() #>(<#= GetMethodDefinitionParameters(o) #>): ng.IPromise<<#= GetReturnType(o) #>>
        {
            const url = `${this.baseUrl}/api/<#= Model.Name.ToLower().Replace("service","") #>/<#= o.Name.ToLower() #>`;
<#
        if (o.UsesBodyContent())
        {
            switch (o.GetHttpVerb())
            {
                case HttpVerb.POST:
#>
            return this.$http.post<<#= GetReturnType(o) #>>(url, <#= GetMethodCallParameters(o, forcePayloadObject: false) #>).then(<#= o.ReturnType != null ? "result => result.data" : "() => null" #>);
<#
                    break;
                default:
                    throw new NotSupportedException();
            } // switch (o.GetHttpVerb())
        } // if (o.UsesBodyContent())
        else
        {
            switch (o.GetHttpVerb())
            {
                case HttpVerb.POST:
#>
            return this.$http.post<<#= GetReturnType(o) #>>(url, <#= GetMethodCallParameters(o, forcePayloadObject: false) #>).then(<#= o.ReturnType != null ? "result => result.data" : "() => null" #>);
<#
                    break;
                case HttpVerb.GET:
#>
            return this.$http.get<<#= GetReturnType(o) #>>(url, { params: <#= GetMethodCallParameters(o, forcePayloadObject: true) #> }).then(<#= o.ReturnType != null ? "result => result.data" : "() => null" #>);
<#
                    break;
                default:
                    throw new NotSupportedException();
            } // switch (o.GetHttpVerb())
        } // !if (o.UsesBodyContent())
#>
        }
<#
    } // foreach (var o in Model.Operations)
#>
    }

    angular.module("<#= AngularModule #>").service("<#=Model.Name#>Proxy", <#=Model.Name#>Proxy);
}
