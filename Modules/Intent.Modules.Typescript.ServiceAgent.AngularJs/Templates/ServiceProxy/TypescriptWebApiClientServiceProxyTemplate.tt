<#@ template  debug="true"  inherits="TypeScriptTemplateBase<ServiceModel>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.Modelers.Services.Api" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic"#>
<#@ import namespace="Intent.Modules.Typescript.ServiceAgent.Contracts"#>

namespace <#= Namespace #> {
    export class <#=ClassName#> {
        private readonly baseUrl: string;

        static $inject = ['$http', 'Config'];
        constructor(
            private readonly $http: ng.IHttpService,
            config: any
        ) {
            this.baseUrl = config["<#= ApiBasePathConfigKey #>"];
        }
<#        foreach (var o in Model.Operations)
        {
            if (o.ReturnType != null)
            {

#>

        <#= o.Name.ToCamelCase() #>(<#= GetMethodDefinitionParameters(o) #>): ng.IPromise<<#= GetTypeName(o.ReturnType) #>>
        {
            const url = `${this.baseUrl}/api/<#= Model.Name.ToLower().Replace("service","") #>/<#= o.Name.ToLower() #>`;
<#              if (GetHttpVerb(o) == HttpVerb.GET) { #>
            return this.$http.get<<#= GetTypeName(o.ReturnType) #>>(url, { params: { <#= GetMethodCallParametersForGet(o) #> } }).then(result => result.data);
<#              } else {#>
            return this.$http.post<<#= GetTypeName(o.ReturnType) #>>(url, <#= GetMethodCallParametersForPost(o) #>).then(result => result.data);
<#              }#>
        }
<#
            }
            else
            {
#>

        <#= o.Name.ToCamelCase() #>(<#= GetMethodDefinitionParameters(o) #>): ng.IPromise<void>
        {
            const url = `${this.baseUrl}/api/<#= Model.Name.ToLower().Replace("service","") #>/<#= o.Name.ToLower() #>`;
            return this.$http.post<void>(url, <#= GetMethodCallParametersForPost(o) #>).then(() => null);
        }
<#            }
        }
#>
    }

    angular.module("<#= AngularModule #>").service("<#=Model.Name#>Proxy", <#=Model.Name#>Proxy);
}
