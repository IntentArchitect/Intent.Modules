<?xml version="1.0" encoding="utf-8"?>
<settings version="3.1.1">
  <id>78de7c54-66ee-41af-a93a-007da1576209</id>
  <name>CRUD Enhancements</name>
  <designerReferences />
  <packageSettings />
  <packageExtensions>
    <packageExtension type="Services Package" typeId="df45eaf6-9202-4c25-8dd5-677e9ba1e906">
      <requiredPackages />
      <creationOptions />
      <scriptOptions>
        <option>
          <text>Create CRUD Operations</text>
          <shortcut>ctrl + shift + u</shortcut>
          <icon type="FontAwesome" source="code" />
          <script>// This script is generalized such that you only need to copy and paste its contents to the
// following Modules' Create CRUD Operation scripts and adjust only the `currentCrudModule` variable accordingly:
// - `Intent.AzureFunctions`
// - `Modelers.Services.CRUD.ServiceDispatch`

const CrudModuleStandard = "Standard";
const CrudModuleAzureFunction = "Azure Function";

const currentCrudModule = CrudModuleStandard;

// Detect if we're running from the "Execution Script dialogue", in which case we want to manually
// set the element to something:
let defaultDomainClassName = null;
if (element?.id == null) {
    // For testing as if a package was right clicked, substitute with package id:
    // element = { id: "7339add6-c32e-4d95-8e1b-1bbe86ca7f1c" }; // Azure
    // element = { id: "ef5c352b-fc74-4f13-b61b-a970f8360b08" }; // NestJS
    element = { id: "a7ab362f-e8a8-4490-90d5-484b0371d949" };

    // For element, substitute with service's element id:
    // element = lookup("677c6801-e654-45c5-924e-886713db1f5e");

    // When set, the dialog asking to select the class from the domain is skipped:
    defaultDomainClassName = "NewClass";
}

let entity = await preselectOrPromptEntity(defaultDomainClassName);
if (!entity) { return; }
let service = getServiceFromCurrentContext(entity, element);

let dtoFolder = getDtoFolder(service, entity);
let resultStdTypeDto = createStandardResultTypeDTO(entity, dtoFolder);
createStandardCreateOperation(entity, dtoFolder, service, currentCrudModule);
createStandardFindByIdOperation(entity, service, resultStdTypeDto);
createStandardFindAllOperation(entity, service, resultStdTypeDto);
createStandardUpdateOperation(entity, service, dtoFolder);
createStandardDeleteOperation(entity, service);

// === FUNCTIONS ===

async function showObject(object) {
    await dialogService.info(JSON.stringify(object, null, "  "));
}

function setHttpStereotype(element, stereotypeName, props) {
    let stereotype = element.getStereotype(stereotypeName);
    for (let key of Object.keys(props)) {
        stereotype.getProperty(key).setValue(props[key]);
    }
}

function getSurrogateKeyType() {
    const typeNameToIdMap = new Map();
    typeNameToIdMap.set("guid", "6b649125-18ea-48fd-a6ba-0bfff0d8f488");
    typeNameToIdMap.set("int", "fb0a362d-e9e2-40de-b6ff-5ce8167cbe74");
    typeNameToIdMap.set("long", "33013006-E404-48C2-AC46-24EF5A5774FD");

    let typeName = application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Type")?.value ?? "int";
    if (typeNameToIdMap.has(typeName)) {
        return typeNameToIdMap.get(typeName);
    }

    return typeNameToIdMap.get("guid");
}

function isAggregateRoot(element) {
    return !element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function isUserMutable(attributeName) {
    const userImmutableFieldNames = new Set(["created", "createdBy", "id", "updated", "updatedBy"]);
    return !userImmutableFieldNames.has(attributeName.toLowerCase());
}

async function preselectOrPromptEntity(preselectedDomainClassName) {
    let classes = lookupTypesOf("Class").filter(x =&gt; isAggregateRoot(x) || x.hasStereotype("Repository"));
    if (classes.length == 0) {
        await dialogService.info("No Domain types could be found. Please ensure that you have a reference to the Domain package and that at least one class exists in it.");
        return;
    }

    let classId = preselectedDomainClassName != null
        ? classes.find(x =&gt; x.getName() === preselectedDomainClassName)?.id
        : await dialogService.lookupFromOptions(classes);
    if (classId == null) {
        await dialogService.error(`No class found with id "${classId}".`);
        return null;
    }

    let foundEntity = lookup(classId);
    return foundEntity;
}

function getServiceFromCurrentContext(entity, packageOrServiceElement) {
    // Auto detect if we're running in the context of a service or package:
    const service = packageOrServiceElement.specialization === "Service"
        ? packageOrServiceElement
        : createElement("Service", `${pluralize(toPascalCase(entity.name))}Service`, packageOrServiceElement.id);
    return service;
}

function getDtoFolder(service, entity) {
    // Get or create folder in which to place DTOs:
    let folder = service.getParent().getChildren("Folder").find(x =&gt; x.name == pluralize(entity.name));
    if (folder == null) {
        folder = createElement("Folder", pluralize(entity.name), service.getParent().id);
    }
    return folder;
}

function getPrimaryKeyTypeId(entity) {
    let pks = entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"));
    let pkTypeId;
    switch (true) {
        case pks.length == 0:
            pkTypeId = getSurrogateKeyType();
            break;
        case pks.length == 1:
            pkTypeId = pks[0].typeReference?.typeId ?? getSurrogateKeyType();
            break;
        case pks.length &gt; 1:
            pkTypeId = null;
            break;
    }
    return pkTypeId;
}

function getReturnTypeMediatypeProperty(element) {
    return element.getStereotype("Azure Function").getProperty("Return Type Mediatype");
}

function createStandardResultTypeDTO(entity, dtoFolder) {
    // Result DTO (used by "FindById" and "FindAll"):
    const resultDto = createElement("DTO", `${entity.name}DTO`, dtoFolder.id);
    resultDto.setMapping(entity.id);
    return resultDto;
}

async function createStandardCreateOperation(entity, dtoFolder, service, currentCrudModule) {
    const dto = createElement("DTO", `${entity.name}CreateDTO`, dtoFolder.id);
    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
        let field = createElement("DTO-Field", attribute.name, dto.id);
        field.typeReference.setType(attribute.typeReference.typeId);
        field.typeReference.setIsNullable(attribute.typeReference.isNullable);
        field.typeReference.setIsCollection(attribute.typeReference.isCollection);
    }

    const operation = createElement("Operation", "Create", service.id);
    const operationParameter = createElement("Parameter", "dto", operation.id);
    operationParameter.typeReference.setType(dto.id);

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "POST", "Route": ""});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "POST", "Route": `${entity.getName().toLowerCase()}`});
    }

    let pkTypeId = getPrimaryKeyTypeId(entity, operation, currentCrudModule);
    if (pkTypeId) {
        getReturnTypeMediatypeProperty(operation).setValue("application/json");
    }
    operation.typeReference.setType(pkTypeId);

    operation.collapse();
}

function createStandardFindByIdOperation(entity, service, resultTypeDto) {
    const operation = createElement("Operation", "FindById", service.id);

    operation.typeReference.setType(resultTypeDto.id);
    if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
        const idField = createElement("DTO-Field", "Id", resultTypeDto.id);
        idField.typeReference.setType(getSurrogateKeyType())

        const idParam = createElement("Parameter", "id", operation.id);
        idParam.typeReference.setType(getSurrogateKeyType());
    } else {
        for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
            const field = createElement("DTO-Field", attribute.getName(), resultTypeDto.id);
            field.typeReference.setType(attribute.typeReference.typeId)
            field.setMapping(attribute.id);

            const param = createElement("Parameter", toCamelCase(field.getName()), operation.id);
            param.typeReference.setType(attribute.typeReference.typeId);
        }
    }

    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
        const field = createElement("DTO-Field", attribute.getName(), resultTypeDto.id);
        field.typeReference.setType(attribute.typeReference.typeId);
        field.typeReference.setIsNullable(attribute.typeReference.isNullable);
        field.typeReference.setIsCollection(attribute.typeReference.isCollection);
        field.setMapping(attribute.id);
    }

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "GET", "Route": "{id}"});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "GET", "Route": `${entity.getName().toLowerCase()}/{id}`});
    }

    operation.collapse();
}

function createStandardFindAllOperation(entity, service, resultTypeDto) {
    const operation = createElement("Operation", "FindAll", service.id);
    operation.typeReference.setType(resultTypeDto.id);
    operation.typeReference.setIsCollection(true);

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "GET", "Route": ""});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "GET", "Route": `${entity.getName().toLowerCase()}`});
    }

    operation.collapse();
}

function createStandardUpdateOperation(entity, service, dtoFolder) {
    const operation = createElement("Operation", "Update", service.id);
    const updateDTO = createElement("DTO", `${entity.name}UpdateDTO`, dtoFolder.id);

    if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
        let idParam = createElement("Parameter", "id", operation.id);
        idParam.typeReference.setType(getSurrogateKeyType());
    } else {
        for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
            let field = createElement("DTO-Field", attribute.getName(), updateDTO.id);
            field.typeReference.setType(attribute.typeReference.typeId)

            let param = createElement("Parameter", toCamelCase(field.getName()), operation.id);
            param.typeReference.setType(attribute.typeReference.typeId);
        }
    }

    const updateOperationDtoParam = createElement("Parameter", "dto", operation.id);
    updateOperationDtoParam.typeReference.setType(updateDTO.id);

    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
        const field = createElement("DTO-Field", attribute.getName(), updateDTO.id);
        field.typeReference.setType(attribute.typeReference.typeId);
        field.typeReference.setIsNullable(attribute.typeReference.isNullable);
        field.typeReference.setIsCollection(attribute.typeReference.isCollection);
    }

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "PUT", "Route": "{id}"});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "PUT", "Route": `${entity.getName().toLowerCase()}/{id}`});
    }

    operation.collapse();
}

function createStandardDeleteOperation(entity, service) {
    const operation = createElement("Operation", "Delete", service.id);

    if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
        const idParam = createElement("Parameter", "id", operation.id);
        idParam.typeReference.setType(getSurrogateKeyType());
    } else {
        for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
            const param = createElement("Parameter", toCamelCase(attribute.getName()), operation.id);
            param.typeReference.setType(attribute.typeReference.typeId);
        }
    }

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "DELETE", "Route": "{id}"});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "DELETE", "Route": `${entity.getName().toLowerCase()}/{id}`});
    }

    operation.collapse();
}</script>
        </option>
      </scriptOptions>
      <typeOrder />
    </packageExtension>
  </packageExtensions>
  <elementSettings />
  <elementExtensions>
    <elementExtension type="Service" typeId="b16578a5-27b1-4047-a8df-f0b783d706bd">
      <creationOptions />
      <scriptOptions>
        <option>
          <text>Create CRUD Operations</text>
          <shortcut>ctrl + shift + u</shortcut>
          <icon type="FontAwesome" source="code" />
          <script>// This script is generalized such that you only need to copy and paste its contents to the
// following Modules' Create CRUD Operation scripts and adjust only the `currentCrudModule` variable accordingly:
// - `Intent.AzureFunctions`
// - `Modelers.Services.CRUD.ServiceDispatch`

const CrudModuleStandard = "Standard";
const CrudModuleAzureFunction = "Azure Function";

const currentCrudModule = CrudModuleStandard;

// Detect if we're running from the "Execution Script dialogue", in which case we want to manually
// set the element to something:
let defaultDomainClassName = null;
if (element?.id == null) {
    // For testing as if a package was right clicked, substitute with package id:
    // element = { id: "7339add6-c32e-4d95-8e1b-1bbe86ca7f1c" }; // Azure
    // element = { id: "ef5c352b-fc74-4f13-b61b-a970f8360b08" }; // NestJS
    element = { id: "a7ab362f-e8a8-4490-90d5-484b0371d949" };

    // For element, substitute with service's element id:
    // element = lookup("677c6801-e654-45c5-924e-886713db1f5e");

    // When set, the dialog asking to select the class from the domain is skipped:
    defaultDomainClassName = "NewClass";
}

let entity = await preselectOrPromptEntity(defaultDomainClassName);
if (!entity) { return; }
let service = getServiceFromCurrentContext(entity, element);

let dtoFolder = getDtoFolder(service, entity);
let resultStdTypeDto = createStandardResultTypeDTO(entity, dtoFolder);
createStandardCreateOperation(entity, dtoFolder, service, currentCrudModule);
createStandardFindByIdOperation(entity, service, resultStdTypeDto);
createStandardFindAllOperation(entity, service, resultStdTypeDto);
createStandardUpdateOperation(entity, service, dtoFolder);
createStandardDeleteOperation(entity, service);

// === FUNCTIONS ===

async function showObject(object) {
    await dialogService.info(JSON.stringify(object, null, "  "));
}

function setHttpStereotype(element, stereotypeName, props) {
    let stereotype = element.getStereotype(stereotypeName);
    for (let key of Object.keys(props)) {
        stereotype.getProperty(key).setValue(props[key]);
    }
}

function getSurrogateKeyType() {
    const typeNameToIdMap = new Map();
    typeNameToIdMap.set("guid", "6b649125-18ea-48fd-a6ba-0bfff0d8f488");
    typeNameToIdMap.set("int", "fb0a362d-e9e2-40de-b6ff-5ce8167cbe74");
    typeNameToIdMap.set("long", "33013006-E404-48C2-AC46-24EF5A5774FD");

    let typeName = application.getSettings("ac0a788e-d8b3-4eea-b56d-538608f1ded9")?.getField("Key Type")?.value ?? "int";
    if (typeNameToIdMap.has(typeName)) {
        return typeNameToIdMap.get(typeName);
    }

    return typeNameToIdMap.get("guid");
}

function isAggregateRoot(element) {
    return !element.getAssociations("Association")
        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);
}

function isUserMutable(attributeName) {
    const userImmutableFieldNames = new Set(["created", "createdBy", "id", "updated", "updatedBy"]);
    return !userImmutableFieldNames.has(attributeName.toLowerCase());
}

async function preselectOrPromptEntity(preselectedDomainClassName) {
    let classes = lookupTypesOf("Class").filter(x =&gt; isAggregateRoot(x) || x.hasStereotype("Repository"));
    if (classes.length == 0) {
        await dialogService.info("No Domain types could be found. Please ensure that you have a reference to the Domain package and that at least one class exists in it.");
        return;
    }

    let classId = preselectedDomainClassName != null
        ? classes.find(x =&gt; x.getName() === preselectedDomainClassName)?.id
        : await dialogService.lookupFromOptions(classes);
    if (classId == null) {
        await dialogService.error(`No class found with id "${classId}".`);
        return null;
    }

    let foundEntity = lookup(classId);
    return foundEntity;
}

function getServiceFromCurrentContext(entity, packageOrServiceElement) {
    // Auto detect if we're running in the context of a service or package:
    const service = packageOrServiceElement.specialization === "Service"
        ? packageOrServiceElement
        : createElement("Service", `${pluralize(toPascalCase(entity.name))}Service`, packageOrServiceElement.id);
    return service;
}

function getDtoFolder(service, entity) {
    // Get or create folder in which to place DTOs:
    let folder = service.getParent().getChildren("Folder").find(x =&gt; x.name == pluralize(entity.name));
    if (folder == null) {
        folder = createElement("Folder", pluralize(entity.name), service.getParent().id);
    }
    return folder;
}

function getPrimaryKeyTypeId(entity) {
    let pks = entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"));
    let pkTypeId;
    switch (true) {
        case pks.length == 0:
            pkTypeId = getSurrogateKeyType();
            break;
        case pks.length == 1:
            pkTypeId = pks[0].typeReference?.typeId ?? getSurrogateKeyType();
            break;
        case pks.length &gt; 1:
            pkTypeId = null;
            break;
    }
    return pkTypeId;
}

function getReturnTypeMediatypeProperty(element) {
    return element.getStereotype("Azure Function").getProperty("Return Type Mediatype");
}

function createStandardResultTypeDTO(entity, dtoFolder) {
    // Result DTO (used by "FindById" and "FindAll"):
    const resultDto = createElement("DTO", `${entity.name}DTO`, dtoFolder.id);
    resultDto.setMapping(entity.id);
    return resultDto;
}

async function createStandardCreateOperation(entity, dtoFolder, service, currentCrudModule) {
    const dto = createElement("DTO", `${entity.name}CreateDTO`, dtoFolder.id);
    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
        let field = createElement("DTO-Field", attribute.name, dto.id);
        field.typeReference.setType(attribute.typeReference.typeId);
        field.typeReference.setIsNullable(attribute.typeReference.isNullable);
        field.typeReference.setIsCollection(attribute.typeReference.isCollection);
    }

    const operation = createElement("Operation", "Create", service.id);
    const operationParameter = createElement("Parameter", "dto", operation.id);
    operationParameter.typeReference.setType(dto.id);

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "POST", "Route": ""});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "POST", "Route": `${entity.getName().toLowerCase()}`});
    }

    let pkTypeId = getPrimaryKeyTypeId(entity, operation, currentCrudModule);
    if (pkTypeId) {
        getReturnTypeMediatypeProperty(operation).setValue("application/json");
    }
    operation.typeReference.setType(pkTypeId);

    operation.collapse();
}

function createStandardFindByIdOperation(entity, service, resultTypeDto) {
    const operation = createElement("Operation", "FindById", service.id);

    operation.typeReference.setType(resultTypeDto.id);
    if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
        const idField = createElement("DTO-Field", "Id", resultTypeDto.id);
        idField.typeReference.setType(getSurrogateKeyType())

        const idParam = createElement("Parameter", "id", operation.id);
        idParam.typeReference.setType(getSurrogateKeyType());
    } else {
        for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
            const field = createElement("DTO-Field", attribute.getName(), resultTypeDto.id);
            field.typeReference.setType(attribute.typeReference.typeId)
            field.setMapping(attribute.id);

            const param = createElement("Parameter", toCamelCase(field.getName()), operation.id);
            param.typeReference.setType(attribute.typeReference.typeId);
        }
    }

    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
        const field = createElement("DTO-Field", attribute.getName(), resultTypeDto.id);
        field.typeReference.setType(attribute.typeReference.typeId);
        field.typeReference.setIsNullable(attribute.typeReference.isNullable);
        field.typeReference.setIsCollection(attribute.typeReference.isCollection);
        field.setMapping(attribute.id);
    }

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "GET", "Route": "{id}"});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "GET", "Route": `${entity.getName().toLowerCase()}/{id}`});
    }

    operation.collapse();
}

function createStandardFindAllOperation(entity, service, resultTypeDto) {
    const operation = createElement("Operation", "FindAll", service.id);
    operation.typeReference.setType(resultTypeDto.id);
    operation.typeReference.setIsCollection(true);

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "GET", "Route": ""});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "GET", "Route": `${entity.getName().toLowerCase()}`});
    }

    operation.collapse();
}

function createStandardUpdateOperation(entity, service, dtoFolder) {
    const operation = createElement("Operation", "Update", service.id);
    const updateDTO = createElement("DTO", `${entity.name}UpdateDTO`, dtoFolder.id);

    if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
        let idParam = createElement("Parameter", "id", operation.id);
        idParam.typeReference.setType(getSurrogateKeyType());
    } else {
        for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
            let field = createElement("DTO-Field", attribute.getName(), updateDTO.id);
            field.typeReference.setType(attribute.typeReference.typeId)

            let param = createElement("Parameter", toCamelCase(field.getName()), operation.id);
            param.typeReference.setType(attribute.typeReference.typeId);
        }
    }

    const updateOperationDtoParam = createElement("Parameter", "dto", operation.id);
    updateOperationDtoParam.typeReference.setType(updateDTO.id);

    for (let attribute of entity.getChildren("Attribute").filter(x =&gt; !x.hasStereotype("Primary Key"))) {
        const field = createElement("DTO-Field", attribute.getName(), updateDTO.id);
        field.typeReference.setType(attribute.typeReference.typeId);
        field.typeReference.setIsNullable(attribute.typeReference.isNullable);
        field.typeReference.setIsCollection(attribute.typeReference.isCollection);
    }

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "PUT", "Route": "{id}"});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "PUT", "Route": `${entity.getName().toLowerCase()}/{id}`});
    }

    operation.collapse();
}

function createStandardDeleteOperation(entity, service) {
    const operation = createElement("Operation", "Delete", service.id);

    if (entity.getChildren("Attribute").every(x =&gt; !x.hasStereotype("Primary Key"))) {
        const idParam = createElement("Parameter", "id", operation.id);
        idParam.typeReference.setType(getSurrogateKeyType());
    } else {
        for (let attribute of entity.getChildren("Attribute").filter(x =&gt; x.hasStereotype("Primary Key"))) {
            const param = createElement("Parameter", toCamelCase(attribute.getName()), operation.id);
            param.typeReference.setType(attribute.typeReference.typeId);
        }
    }

    if (currentCrudModule === CrudModuleStandard) {
        setHttpStereotype(operation, "Http Settings", {"Verb": "DELETE", "Route": "{id}"});
    } else if (currentCrudModule === CrudModuleAzureFunction) {
        setHttpStereotype(operation, "Azure Function", {"Type": "Http Trigger", "Method": "DELETE", "Route": `${entity.getName().toLowerCase()}/{id}`});
    }

    operation.collapse();
}</script>
        </option>
      </scriptOptions>
      <typeOrder />
      <mappingSettings />
    </elementExtension>
  </elementExtensions>
  <associationSettings />
  <associationExtensions />
</settings>