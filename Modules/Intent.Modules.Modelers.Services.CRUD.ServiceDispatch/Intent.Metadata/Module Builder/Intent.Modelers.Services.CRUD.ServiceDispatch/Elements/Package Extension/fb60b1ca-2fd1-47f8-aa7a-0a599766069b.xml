<?xml version="1.0" encoding="utf-8"?>
<class id="fb60b1ca-2fd1-47f8-aa7a-0a599766069b" type="Package Extension" typeId="ab4152df-3add-4a08-81b6-0fefc7cbb204">
  <name>Services Package Extension</name>
  <display>Services Package Extension: Services Package</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-by-name</sort-children>
  <genericTypes />
  <typeReference id="cd6845c7-63a9-4fea-8845-46f140247592">
    <typeId>df45eaf6-9202-4c25-8dd5-677e9ba1e906</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Services</typePackageName>
    <typePackageId>4ba53041-59f9-4446-a207-6da4fbdf86fe</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>78de7c54-66ee-41af-a93a-007da1576209</parentFolderId>
  <packageId>61f7cdaa-2c36-4f72-adfa-565c84889a48</packageId>
  <packageName>Intent.Modelers.Services.CRUD.ServiceDispatch</packageName>
  <stereotypes />
  <metadata />
  <childElements>
    <childElement id="94c0087c-d389-4095-bef3-2516177433ef" type="Context Menu" typeId="d45e383d-90ba-4b64-aca7-34ca100cea21">
      <name>[context menu]</name>
      <display>[context menu]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-manually</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>fb60b1ca-2fd1-47f8-aa7a-0a599766069b</parentFolderId>
      <packageId>61f7cdaa-2c36-4f72-adfa-565c84889a48</packageId>
      <packageName>Intent.Modelers.Services.CRUD.ServiceDispatch</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="682e222a-d4cf-486c-95a9-e404284ec02b" type="Run Script Option" typeId="345d46fb-c500-409a-88c7-26720572c9af">
          <name>Create CRUD Operations</name>
          <display>Create CRUD Operations: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="f5541a2e-1df2-4b41-9549-e83ed60abafd">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>94c0087c-d389-4095-bef3-2516177433ef</parentFolderId>
          <packageId>61f7cdaa-2c36-4f72-adfa-565c84889a48</packageId>
          <packageName>Intent.Modelers.Services.CRUD.ServiceDispatch</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="// This script is generalized such that you only need to copy and paste its contents to the&#xD;&#xA;// following Modules' Create CRUD Operation scripts and adjust only the `currentCrudModule` variable accordingly:&#xD;&#xA;// - `Intent.AzureFunctions`&#xD;&#xA;// - `Modelers.Services.CRUD.ServiceDispatch`&#xD;&#xA;&#xD;&#xA;const CrudModuleStandard = &quot;Standard&quot;;&#xD;&#xA;const CrudModuleAzureFunction = &quot;Azure Function&quot;;&#xD;&#xA;&#xD;&#xA;const currentCrudModule = CrudModuleStandard;&#xD;&#xA;&#xD;&#xA;// Detect if we're running from the &quot;Execution Script dialogue&quot;, in which case we want to manually&#xD;&#xA;// set the element to something:&#xD;&#xA;let defaultDomainClassName = null;&#xD;&#xA;if (element?.id == null) {&#xD;&#xA;    // For testing as if a package was right clicked, substitute with package id:&#xD;&#xA;    // element = { id: &quot;7339add6-c32e-4d95-8e1b-1bbe86ca7f1c&quot; }; // Azure&#xD;&#xA;    // element = { id: &quot;ef5c352b-fc74-4f13-b61b-a970f8360b08&quot; }; // NestJS&#xD;&#xA;    element = { id: &quot;a7ab362f-e8a8-4490-90d5-484b0371d949&quot; };&#xD;&#xA;&#xD;&#xA;    // For element, substitute with service's element id:&#xD;&#xA;    // element = lookup(&quot;677c6801-e654-45c5-924e-886713db1f5e&quot;);&#xD;&#xA;&#xD;&#xA;    // When set, the dialog asking to select the class from the domain is skipped:&#xD;&#xA;    defaultDomainClassName = &quot;NewClass&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let entity = await preselectOrPromptEntity(defaultDomainClassName);&#xD;&#xA;if (!entity) { return; }&#xD;&#xA;let service = getServiceFromCurrentContext(entity, element);&#xD;&#xA;&#xD;&#xA;let dtoFolder = getDtoFolder(service, entity);&#xD;&#xA;let resultStdTypeDto = createStandardResultTypeDTO(entity, dtoFolder);&#xD;&#xA;createStandardCreateOperation(entity, dtoFolder, service, currentCrudModule);&#xD;&#xA;createStandardFindByIdOperation(entity, service, resultStdTypeDto);&#xD;&#xA;createStandardFindAllOperation(entity, service, resultStdTypeDto);&#xD;&#xA;createStandardUpdateOperation(entity, service, dtoFolder);&#xD;&#xA;createStandardDeleteOperation(entity, service);&#xD;&#xA;&#xD;&#xA;// === FUNCTIONS ===&#xD;&#xA;&#xD;&#xA;async function showObject(object) {&#xD;&#xA;    await dialogService.info(JSON.stringify(object, null, &quot;  &quot;));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function setHttpStereotype(element, stereotypeName, props) {&#xD;&#xA;    let stereotype = element.getStereotype(stereotypeName);&#xD;&#xA;    for (let key of Object.keys(props)) {&#xD;&#xA;        stereotype.getProperty(key).setValue(props[key]);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;);&#xD;&#xA;&#xD;&#xA;    let typeName = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)?.getField(&quot;Key Type&quot;)?.value ?? &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isUserMutable(attributeName) {&#xD;&#xA;    const userImmutableFieldNames = new Set([&quot;created&quot;, &quot;createdBy&quot;, &quot;id&quot;, &quot;updated&quot;, &quot;updatedBy&quot;]);&#xD;&#xA;    return !userImmutableFieldNames.has(attributeName.toLowerCase());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;async function preselectOrPromptEntity(preselectedDomainClassName) {&#xD;&#xA;    let classes = lookupTypesOf(&quot;Class&quot;).filter(x =&gt; isAggregateRoot(x) || x.hasStereotype(&quot;Repository&quot;));&#xD;&#xA;    if (classes.length == 0) {&#xD;&#xA;        await dialogService.info(&quot;No Domain types could be found. Please ensure that you have a reference to the Domain package and that at least one class exists in it.&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let classId = preselectedDomainClassName != null&#xD;&#xA;        ? classes.find(x =&gt; x.getName() === preselectedDomainClassName)?.id&#xD;&#xA;        : await dialogService.lookupFromOptions(classes);&#xD;&#xA;    if (classId == null) {&#xD;&#xA;        await dialogService.error(`No class found with id &quot;${classId}&quot;.`);&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let foundEntity = lookup(classId);&#xD;&#xA;    return foundEntity;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getServiceFromCurrentContext(entity, packageOrServiceElement) {&#xD;&#xA;    // Auto detect if we're running in the context of a service or package:&#xD;&#xA;    const service = packageOrServiceElement.specialization === &quot;Service&quot;&#xD;&#xA;        ? packageOrServiceElement&#xD;&#xA;        : createElement(&quot;Service&quot;, `${pluralize(toPascalCase(entity.name))}Service`, packageOrServiceElement.id);&#xD;&#xA;    return service;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getDtoFolder(service, entity) {&#xD;&#xA;    // Get or create folder in which to place DTOs:&#xD;&#xA;    let folder = service.getParent().getChildren(&quot;Folder&quot;).find(x =&gt; x.name == pluralize(entity.name));&#xD;&#xA;    if (folder == null) {&#xD;&#xA;        folder = createElement(&quot;Folder&quot;, pluralize(entity.name), service.getParent().id);&#xD;&#xA;    }&#xD;&#xA;    return folder;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getPrimaryKeyTypeId(entity) {&#xD;&#xA;    let pks = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;    let pkTypeId;&#xD;&#xA;    switch (true) {&#xD;&#xA;        case pks.length == 0:&#xD;&#xA;            pkTypeId = getSurrogateKeyType();&#xD;&#xA;            break;&#xD;&#xA;        case pks.length == 1:&#xD;&#xA;            pkTypeId = pks[0].typeReference?.typeId ?? getSurrogateKeyType();&#xD;&#xA;            break;&#xD;&#xA;        case pks.length &gt; 1:&#xD;&#xA;            pkTypeId = null;&#xD;&#xA;            break;&#xD;&#xA;    }&#xD;&#xA;    return pkTypeId;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function getReturnTypeMediatypeProperty(element) {&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        return element.getStereotype(&quot;Http Settings&quot;).getProperty(&quot;Return Type Mediatype&quot;);&#xD;&#xA;    } else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        return element.getStereotype(&quot;Azure Function&quot;).getProperty(&quot;Return Type Mediatype&quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    throw new Error(&quot;Unknown type.&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createStandardResultTypeDTO(entity, dtoFolder) {&#xD;&#xA;    // Result DTO (used by &quot;FindById&quot; and &quot;FindAll&quot;):&#xD;&#xA;    const resultDto = createElement(&quot;DTO&quot;, `${entity.name}DTO`, dtoFolder.id);&#xD;&#xA;    resultDto.setMapping(entity.id);&#xD;&#xA;    return resultDto;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createStandardCreateOperation(entity, dtoFolder, service, currentCrudModule) {&#xD;&#xA;    const dto = createElement(&quot;DTO&quot;, `${entity.name}CreateDTO`, dtoFolder.id);&#xD;&#xA;    for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        let field = createElement(&quot;DTO-Field&quot;, attribute.name, dto.id);&#xD;&#xA;        field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;Create&quot;, service.id);&#xD;&#xA;    const operationParameter = createElement(&quot;Parameter&quot;, &quot;dto&quot;, operation.id);&#xD;&#xA;    operationParameter.typeReference.setType(dto.id);&#xD;&#xA;&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;POST&quot;, &quot;Route&quot;: &quot;&quot;});&#xD;&#xA;    } else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, {&quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;POST&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}`});&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    let pkTypeId = getPrimaryKeyTypeId(entity, operation, currentCrudModule);&#xD;&#xA;    if (pkTypeId) {&#xD;&#xA;        getReturnTypeMediatypeProperty(operation).setValue(&quot;application/json&quot;);&#xD;&#xA;    }&#xD;&#xA;    operation.typeReference.setType(pkTypeId);&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createStandardFindByIdOperation(entity, service, resultTypeDto) {&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;FindById&quot;, service.id);&#xD;&#xA;&#xD;&#xA;    operation.typeReference.setType(resultTypeDto.id);&#xD;&#xA;    if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        const idField = createElement(&quot;DTO-Field&quot;, &quot;Id&quot;, resultTypeDto.id);&#xD;&#xA;        idField.typeReference.setType(getSurrogateKeyType())&#xD;&#xA;&#xD;&#xA;        const idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;        idParam.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;    } else {&#xD;&#xA;        for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;            const field = createElement(&quot;DTO-Field&quot;, attribute.getName(), resultTypeDto.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;            field.setMapping(attribute.id);&#xD;&#xA;&#xD;&#xA;            const param = createElement(&quot;Parameter&quot;, toCamelCase(field.getName()), operation.id);&#xD;&#xA;            param.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        const field = createElement(&quot;DTO-Field&quot;, attribute.getName(), resultTypeDto.id);&#xD;&#xA;        field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;        field.setMapping(attribute.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;GET&quot;, &quot;Route&quot;: &quot;{id}&quot;});&#xD;&#xA;    } else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, {&quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;GET&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}/{id}`});&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createStandardFindAllOperation(entity, service, resultTypeDto) {&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;FindAll&quot;, service.id);&#xD;&#xA;    operation.typeReference.setType(resultTypeDto.id);&#xD;&#xA;    operation.typeReference.setIsCollection(true);&#xD;&#xA;&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;GET&quot;, &quot;Route&quot;: &quot;&quot;});&#xD;&#xA;    } else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, {&quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;GET&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}`});&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createStandardUpdateOperation(entity, service, dtoFolder) {&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;Update&quot;, service.id);&#xD;&#xA;    const updateDTO = createElement(&quot;DTO&quot;, `${entity.name}UpdateDTO`, dtoFolder.id);&#xD;&#xA;&#xD;&#xA;    if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        let idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;        idParam.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;    } else {&#xD;&#xA;        for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;            let field = createElement(&quot;DTO-Field&quot;, attribute.getName(), updateDTO.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;&#xD;&#xA;            let param = createElement(&quot;Parameter&quot;, toCamelCase(field.getName()), operation.id);&#xD;&#xA;            param.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    const updateOperationDtoParam = createElement(&quot;Parameter&quot;, &quot;dto&quot;, operation.id);&#xD;&#xA;    updateOperationDtoParam.typeReference.setType(updateDTO.id);&#xD;&#xA;&#xD;&#xA;    for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        const field = createElement(&quot;DTO-Field&quot;, attribute.getName(), updateDTO.id);&#xD;&#xA;        field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;PUT&quot;, &quot;Route&quot;: &quot;{id}&quot;});&#xD;&#xA;    } else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, {&quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;PUT&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}/{id}`});&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function createStandardDeleteOperation(entity, service) {&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;Delete&quot;, service.id);&#xD;&#xA;&#xD;&#xA;    if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        const idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;        idParam.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;    } else {&#xD;&#xA;        for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;            const param = createElement(&quot;Parameter&quot;, toCamelCase(attribute.getName()), operation.id);&#xD;&#xA;            param.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, {&quot;Verb&quot;: &quot;DELETE&quot;, &quot;Route&quot;: &quot;{id}&quot;});&#xD;&#xA;    } else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, {&quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;DELETE&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}/{id}`});&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
            <stereotype stereotypeDefinitionId="cbe77364-d1d0-400b-a8c4-646a4c869612" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="b2c3a117-23d3-47e5-8b83-5b902c55a226" display="Icon" isActive="true" />
                <property name="0abff08a-3986-40b1-a28f-4cc03c4fc1ec" display="Shortcut" value="ctrl + shift + u" isActive="true" />
                <property name="79f6973f-5e3a-4618-9d4c-d7cc604bffe0" display="Shortcut (macOS)" isActive="true" />
                <property name="e034a0ca-0101-4594-8384-43048b714578" display="Type Order" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>