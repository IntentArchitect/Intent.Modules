<?xml version="1.0" encoding="utf-8"?>
<class id="09f89a6e-f13e-44d5-b26c-83eed3114c8d" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Service Extensions</name>
  <display>Service Extensions: Service</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="445c0318-c04a-4f2b-8e46-28dc00f35f29">
    <typeId>b16578a5-27b1-4047-a8df-f0b783d706bd</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Services</typePackageName>
    <typePackageId>4ba53041-59f9-4446-a207-6da4fbdf86fe</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>78de7c54-66ee-41af-a93a-007da1576209</parentFolderId>
  <packageId>61f7cdaa-2c36-4f72-adfa-565c84889a48</packageId>
  <packageName>Intent.Modelers.Services.CRUD.ServiceDispatch</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" isActive="false" />
        <property name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
    <stereotype stereotypeDefinitionId="312eab00-f6db-492e-bbb4-e41383c8d3d8" name="Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="8c964307-9d03-4a14-9fd3-40ea2607955a" display="Display Text Function" value="" isActive="true" />
        <property name="996ed45f-2318-4587-9618-73db3d7cfed0" display="Validate Function" value="" isActive="true" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="139a0532-8a3a-41bb-85c2-de1dbbd9a3a2" type="Context Menu" typeId="d45e383d-90ba-4b64-aca7-34ca100cea21">
      <name>[context menu]</name>
      <display>[context menu]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-manually</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>09f89a6e-f13e-44d5-b26c-83eed3114c8d</parentFolderId>
      <packageId>61f7cdaa-2c36-4f72-adfa-565c84889a48</packageId>
      <packageName>Intent.Modelers.Services.CRUD.ServiceDispatch</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="6036a47e-07d6-46a3-8dbd-3805f8135f72" type="Run Script Option" typeId="345d46fb-c500-409a-88c7-26720572c9af">
          <name>Create CRUD Operations</name>
          <display>Create CRUD Operations: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="ab9ad5a0-2f39-4db5-8f82-9a722834d1a4">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>139a0532-8a3a-41bb-85c2-de1dbbd9a3a2</parentFolderId>
          <packageId>61f7cdaa-2c36-4f72-adfa-565c84889a48</packageId>
          <packageName>Intent.Modelers.Services.CRUD.ServiceDispatch</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="// This script is generalized such that you only need to copy and paste its contents to the&#xD;&#xA;// following Modules' Create CRUD Operation scripts and adjust only the `currentCrudModule` variable accordingly:&#xD;&#xA;// - `Intent.AzureFunctions`&#xD;&#xA;// - `Modelers.Services.CRUD.ServiceDispatch`&#xD;&#xA;const CrudModuleStandard = &quot;Standard&quot;;&#xD;&#xA;const CrudModuleAzureFunction = &quot;Azure Function&quot;;&#xD;&#xA;const currentCrudModule = CrudModuleStandard;&#xD;&#xA;initGlobals();&#xD;&#xA;// Detect if we're running from the &quot;Execution Script dialogue&quot;, in which case we want to manually&#xD;&#xA;// set the element to something:&#xD;&#xA;let defaultDomainClassName = null;&#xD;&#xA;if (element?.id == null) {&#xD;&#xA;    // For testing as if a package was right clicked, substitute with package id:&#xD;&#xA;    // element = { id: &quot;7339add6-c32e-4d95-8e1b-1bbe86ca7f1c&quot; }; // Azure&#xD;&#xA;    // element = { id: &quot;ef5c352b-fc74-4f13-b61b-a970f8360b08&quot; }; // NestJS&#xD;&#xA;    //element = { id: &quot;a7ab362f-e8a8-4490-90d5-484b0371d949&quot; };&#xD;&#xA;    // For element, substitute with service's element id:&#xD;&#xA;    // element = lookup(&quot;677c6801-e654-45c5-924e-886713db1f5e&quot;);&#xD;&#xA;    // When set, the dialog asking to select the class from the domain is skipped:&#xD;&#xA;    //defaultDomainClassName = &quot;NewClass&quot;;&#xD;&#xA;}&#xD;&#xA;let entity = await preselectOrPromptEntity(defaultDomainClassName);&#xD;&#xA;if (!entity) {&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;let service = getServiceFromCurrentContext(entity, element);&#xD;&#xA;let entityFolder = getEntityFolder(service, entity);&#xD;&#xA;let resultStdTypeDto = createStandardResultTypeDTO(entity, entityFolder);&#xD;&#xA;createStandardCreateOperation(service, entity, entityFolder, currentCrudModule);&#xD;&#xA;createStandardFindByIdOperation(service, entity, entityFolder, currentCrudModule, resultStdTypeDto);&#xD;&#xA;createStandardFindAllOperation(service, entity, entityFolder, currentCrudModule, resultStdTypeDto);&#xD;&#xA;createStandardUpdateOperation(service, entity, entityFolder, currentCrudModule);&#xD;&#xA;createStandardDeleteOperation(service, entity, entityFolder, currentCrudModule);&#xD;&#xA;/*&#xD;&#xA;========================&#xD;&#xA;    HOOK-IN FUNCTIONS&#xD;&#xA;========================&#xD;&#xA;Easier to alter the behavior of certain key operations.&#xD;&#xA;Could make certain things configurable in the future.&#xD;&#xA;*/&#xD;&#xA;function getParameterFormat(str) {&#xD;&#xA;    return toCamelCase(str);&#xD;&#xA;}&#xD;&#xA;function getRoutingFormat(str) {&#xD;&#xA;    return str;&#xD;&#xA;}&#xD;&#xA;function getFieldFormat(str) {&#xD;&#xA;    return toPascalCase(str);&#xD;&#xA;}&#xD;&#xA;function getDomainAttributeNameFormat(str) {&#xD;&#xA;    let convention = getDomainAttributeNamingConvention();&#xD;&#xA;    switch (convention) {&#xD;&#xA;        case &quot;pascal-case&quot;:&#xD;&#xA;            return toPascalCase(str);&#xD;&#xA;        case &quot;camel-case&quot;:&#xD;&#xA;            return toCamelCase(str);&#xD;&#xA;    }&#xD;&#xA;    return str;&#xD;&#xA;}&#xD;&#xA;function getFolderName(nestedCompOwner, entity) {&#xD;&#xA;    return nestedCompOwner ? pluralize(nestedCompOwner.name) : pluralize(entity.name);&#xD;&#xA;}&#xD;&#xA;function getBaseNameForElement(nestedCompOwner, entity, entityIsMany) {&#xD;&#xA;    let entityName = entityIsMany ? toPascalCase(pluralize(entity.name)) : toPascalCase(entity.name);&#xD;&#xA;    return nestedCompOwner ? `${toPascalCase(nestedCompOwner.name)}${entityName}` : entityName;&#xD;&#xA;}&#xD;&#xA;function getServiceName(nestedCompOwner, entity) {&#xD;&#xA;    return nestedCompOwner&#xD;&#xA;        ? `${toPascalCase(nestedCompOwner.name)}Service`&#xD;&#xA;        : `${toPascalCase(entity.name)}Service`;&#xD;&#xA;}&#xD;&#xA;function getOperationFormat(baseName, nestedCompOwner, entity, entityIsMany = false) {&#xD;&#xA;    let entityName = entityIsMany ? pluralize(entity.name) : entity.name;&#xD;&#xA;    return `${baseName}${nestedCompOwner ? entityName : &quot;&quot;}`;&#xD;&#xA;}&#xD;&#xA;/*&#xD;&#xA;========================&#xD;&#xA;    CREATION FUNCTIONS&#xD;&#xA;========================&#xD;&#xA;*/&#xD;&#xA;function createStandardResultTypeDTO(entity, entityFolder) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let baseName = getBaseNameForElement(nestedCompOwner, entity, false);&#xD;&#xA;    let expectedDtoName = `${baseName}DTO`;&#xD;&#xA;    if (hasElementInFolder(entityFolder, expectedDtoName)) {&#xD;&#xA;        return entityFolder.getChildren().filter(x =&gt; x.name == expectedDtoName)[0];&#xD;&#xA;    }&#xD;&#xA;    let dto = createElement(&quot;DTO&quot;, expectedDtoName, entityFolder.id);&#xD;&#xA;    dto.setMapping(entity.id);&#xD;&#xA;    dto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;        if (!nestedCompOwnerFkDescr || nestedCompOwnerFkDescr.specialization == globals.FKSpecialization.Implicit) {&#xD;&#xA;            let nestedCompOwnerIdDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(nestedCompOwnerFkDescr.name), dto.id);&#xD;&#xA;            nestedCompOwnerIdDtoField.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    if (entityPkDescr.specialization == globals.PKSpecialization.Implicit) {&#xD;&#xA;        let idField = createElement(&quot;DTO-Field&quot;, getFieldFormat(entityPkDescr.name), dto.id);&#xD;&#xA;        idField.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;    }&#xD;&#xA;    let attributesWithMapPaths = getAttributesWithMapPath(entity);&#xD;&#xA;    for (var keyName of Object.keys(attributesWithMapPaths)) {&#xD;&#xA;        let entry = attributesWithMapPaths[keyName];&#xD;&#xA;        let field = createElement(&quot;DTO-Field&quot;, getFieldFormat(entry.name), dto.id);&#xD;&#xA;        field.typeReference.setType(entry.typeId);&#xD;&#xA;        field.setMapping(entry.mapPath);&#xD;&#xA;    }&#xD;&#xA;    dto.collapse();&#xD;&#xA;    return dto;&#xD;&#xA;}&#xD;&#xA;function createStandardCreateOperation(service, entity, entityFolder, currentCrudModule) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let baseName = getBaseNameForElement(nestedCompOwner, entity, false);&#xD;&#xA;    let expectedCreateDtoName = `${baseName}CreateDTO`;&#xD;&#xA;    if (hasElementInFolder(entityFolder, expectedCreateDtoName)) {&#xD;&#xA;        let command = entityFolder.getChildren().filter(x =&gt; x.name == expectedCreateDtoName)[0];&#xD;&#xA;        let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;        command.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    let createDto = createElement(&quot;DTO&quot;, expectedCreateDtoName, entityFolder.id);&#xD;&#xA;    createDto.setMapping(entity.id, globals.projectMappingSettingId);&#xD;&#xA;    createDto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;    createDto.setMetadata(&quot;originalVerb&quot;, &quot;Create&quot;);&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;Create&quot;, nestedCompOwner, entity), service.id);&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;        let nestedCompOwnerIdDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(nestedCompOwnerFkDescr.name), createDto.id);&#xD;&#xA;        nestedCompOwnerIdDtoField.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        if (nestedCompOwnerFkDescr.specialization == globals.FKSpecialization.Explicit) {&#xD;&#xA;            nestedCompOwnerIdDtoField.setMapping(nestedCompOwnerFkDescr.id);&#xD;&#xA;        }&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, null);&#xD;&#xA;    }&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, { &quot;Verb&quot;: &quot;POST&quot;, &quot;Route&quot;: routePath });&#xD;&#xA;    }&#xD;&#xA;    else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, { &quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;POST&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}/${routePath}` });&#xD;&#xA;    }&#xD;&#xA;    let operationParamCreateDto = createElement(&quot;Parameter&quot;, getParameterFormat(&quot;dto&quot;), operation.id);&#xD;&#xA;    operationParamCreateDto.typeReference.setType(createDto.id);&#xD;&#xA;    if (entityPkDescr.typeId) {&#xD;&#xA;        operation.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;        getReturnTypeMediatypeProperty(operation).setValue(&quot;application/json&quot;);&#xD;&#xA;    }&#xD;&#xA;    let attributesWithMapPaths = getAttributesWithMapPath(entity);&#xD;&#xA;    for (var keyName of Object.keys(attributesWithMapPaths)) {&#xD;&#xA;        let entry = attributesWithMapPaths[keyName];&#xD;&#xA;        let field = createElement(&quot;DTO-Field&quot;, getFieldFormat(entry.name), createDto.id);&#xD;&#xA;        field.typeReference.setType(entry.typeId);&#xD;&#xA;        field.setMapping(entry.mapPath);&#xD;&#xA;    }&#xD;&#xA;    createDto.collapse();&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;function createStandardFindByIdOperation(service, entity, entityFolder, currentCrudModule, resultTypeDto) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;FindById&quot;, nestedCompOwner, entity), service.id);&#xD;&#xA;    operation.typeReference.setType(resultTypeDto.id);&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        routePath = getRoutePath(null, null, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, { &quot;Verb&quot;: &quot;GET&quot;, &quot;Route&quot;: routePath });&#xD;&#xA;    }&#xD;&#xA;    else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, { &quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;GET&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}/${routePath}` });&#xD;&#xA;    }&#xD;&#xA;    addPrimaryKeys(null, operation, entityPkDescr);&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;function createStandardFindAllOperation(service, entity, entityFolder, currentCrudModule, resultTypeDto) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;FindAll&quot;, nestedCompOwner, entity, true), service.id);&#xD;&#xA;    operation.typeReference.setIsCollection(true);&#xD;&#xA;    operation.typeReference.setType(resultTypeDto.id);&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, null);&#xD;&#xA;    }&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, { &quot;Verb&quot;: &quot;GET&quot;, &quot;Route&quot;: routePath });&#xD;&#xA;    }&#xD;&#xA;    else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, { &quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;GET&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}/${routePath}` });&#xD;&#xA;    }&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;function createStandardUpdateOperation(service, entity, entityFolder, currentCrudModule) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let baseName = getBaseNameForElement(nestedCompOwner, entity, false);&#xD;&#xA;    let expectedUpdateDtoName = `${baseName}UpdateDTO`;&#xD;&#xA;    if (hasElementInFolder(entityFolder, expectedUpdateDtoName)) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    let updateDto = createElement(&quot;DTO&quot;, expectedUpdateDtoName, entityFolder.id);&#xD;&#xA;    updateDto.setMapping(entity.id, globals.projectMappingSettingId);&#xD;&#xA;    updateDto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;    updateDto.setMetadata(&quot;originalVerb&quot;, &quot;Update&quot;);&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;Put&quot;, nestedCompOwner, entity), service.id);&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;        let nestedCompOwnerIdDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(nestedCompOwnerFkDescr.name), updateDto.id);&#xD;&#xA;        nestedCompOwnerIdDtoField.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        if (nestedCompOwnerFkDescr.specialization == globals.FKSpecialization.Explicit) {&#xD;&#xA;            nestedCompOwnerIdDtoField.setMapping(nestedCompOwnerFkDescr.id);&#xD;&#xA;        }&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        routePath = getRoutePath(null, null, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, { &quot;Verb&quot;: &quot;PUT&quot;, &quot;Route&quot;: routePath });&#xD;&#xA;    }&#xD;&#xA;    else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, { &quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;PUT&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}/${routePath}` });&#xD;&#xA;    }&#xD;&#xA;    addPrimaryKeys(updateDto, operation, entityPkDescr);&#xD;&#xA;    let dtoParam = createElement(&quot;Parameter&quot;, getParameterFormat(&quot;dto&quot;), operation.id);&#xD;&#xA;    dtoParam.typeReference.setType(updateDto.id);&#xD;&#xA;    let attributesWithMapPaths = getAttributesWithMapPath(entity);&#xD;&#xA;    for (var keyName of Object.keys(attributesWithMapPaths)) {&#xD;&#xA;        let entry = attributesWithMapPaths[keyName];&#xD;&#xA;        let field = createElement(&quot;DTO-Field&quot;, getFieldFormat(entry.name), updateDto.id);&#xD;&#xA;        field.typeReference.setType(entry.typeId);&#xD;&#xA;        field.setMapping(entry.mapPath);&#xD;&#xA;    }&#xD;&#xA;    updateDto.collapse();&#xD;&#xA;    operation.collapse();&#xD;&#xA;    function hasAttributeInCommand(command, attribute) {&#xD;&#xA;        return command.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.name == attribute.name);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function createStandardDeleteOperation(service, entity, entityFolder, currentCrudModule) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let operation = createElement(&quot;Operation&quot;, getOperationFormat(&quot;Delete&quot;, nestedCompOwner, entity), service.id);&#xD;&#xA;    let entityPkDescr = getPrimaryKeyDescriptor(entity);&#xD;&#xA;    let routePath = &quot;&quot;;&#xD;&#xA;    if (nestedCompOwner) {&#xD;&#xA;        let nestedCompOwnerFkDescr = getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner);&#xD;&#xA;        let param = createElement(&quot;Parameter&quot;, getParameterFormat(nestedCompOwnerFkDescr.name), operation.id);&#xD;&#xA;        param.typeReference.setType(nestedCompOwnerFkDescr.typeId);&#xD;&#xA;        routePath = getRoutePath(nestedCompOwnerFkDescr, entity, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;    else {&#xD;&#xA;        routePath = getRoutePath(null, null, entityPkDescr);&#xD;&#xA;    }&#xD;&#xA;    if (currentCrudModule === CrudModuleStandard) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Http Settings&quot;, { &quot;Verb&quot;: &quot;DELETE&quot;, &quot;Route&quot;: routePath });&#xD;&#xA;    }&#xD;&#xA;    else if (currentCrudModule === CrudModuleAzureFunction) {&#xD;&#xA;        setHttpStereotype(operation, &quot;Azure Function&quot;, { &quot;Type&quot;: &quot;Http Trigger&quot;, &quot;Method&quot;: &quot;DELETE&quot;, &quot;Route&quot;: `${entity.getName().toLowerCase()}/${routePath}` });&#xD;&#xA;    }&#xD;&#xA;    addPrimaryKeys(null, operation, entityPkDescr);&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;/*&#xD;&#xA;========================&#xD;&#xA;    UTILITY FUNCTIONS&#xD;&#xA;========================&#xD;&#xA;*/&#xD;&#xA;var globals;&#xD;&#xA;function initGlobals() {&#xD;&#xA;    globals = {&#xD;&#xA;        aggregateRootCache: Object.create(null),&#xD;&#xA;        nestedCompositionalOwnerCache: Object.create(null),&#xD;&#xA;        projectMappingSettingId: &quot;01d74d4f-e478-4fde-a2f0-9ea92255f3c5&quot;,&#xD;&#xA;        PKSpecialization: {&#xD;&#xA;            Implicit: &quot;implicit&quot;,&#xD;&#xA;            Explicit: &quot;explicit&quot;,&#xD;&#xA;            ExplicitComposite: &quot;explicit_composite&quot;,&#xD;&#xA;            Unknown: &quot;unknown&quot;&#xD;&#xA;        },&#xD;&#xA;        FKSpecialization: {&#xD;&#xA;            Implicit: &quot;implicit&quot;,&#xD;&#xA;            Explicit: &quot;explicit&quot;,&#xD;&#xA;        }&#xD;&#xA;    };&#xD;&#xA;}&#xD;&#xA;async function showObject(object) {&#xD;&#xA;    await dialogService.info(JSON.stringify(object, null, &quot;  &quot;));&#xD;&#xA;}&#xD;&#xA;async function preselectOrPromptEntity(preselectedDomainClassName) {&#xD;&#xA;    let classes = lookupTypesOf(&quot;Class&quot;).filter(x =&gt; isAggregateRoot(x) || x.hasStereotype(&quot;Repository&quot;) || ownerIsAggregateRoot(x));&#xD;&#xA;    if (classes.length == 0) {&#xD;&#xA;        await dialogService.info(&quot;No Domain types could be found. Please ensure that you have a reference to the Domain package and that at least one class exists in it.&quot;);&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    let classId = preselectedDomainClassName != null&#xD;&#xA;        ? classes.find(x =&gt; x.getName() === preselectedDomainClassName)?.id&#xD;&#xA;        : await dialogService.lookupFromOptions(classes.map((x) =&gt; ({&#xD;&#xA;            id: x.id,&#xD;&#xA;            name: getFriendlyDisplayNameForClassSelection(x)&#xD;&#xA;        })));&#xD;&#xA;    if (classId == null) {&#xD;&#xA;        await dialogService.error(`No class found with id &quot;${classId}&quot;.`);&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    let foundEntity = lookup(classId);&#xD;&#xA;    return foundEntity;&#xD;&#xA;}&#xD;&#xA;function getFriendlyDisplayNameForClassSelection(element) {&#xD;&#xA;    let found = element.getAssociations(&quot;Association&quot;).filter(x =&gt; x.isSourceEnd() &amp;&amp;&#xD;&#xA;        !x.typeReference.isNullable &amp;&amp;&#xD;&#xA;        !x.typeReference.isCollection &amp;&amp;&#xD;&#xA;        isAggregateRoot(x.typeReference.getType()))[0]?.typeReference?.getType();&#xD;&#xA;    return !found ? element.getName() : `${element.getName()} (${found.getName()})`;&#xD;&#xA;}&#xD;&#xA;function getServiceFromCurrentContext(entity, packageOrServiceElement) {&#xD;&#xA;    // Auto detect if we're running in the context of a service or package.&#xD;&#xA;    if (packageOrServiceElement.specialization === &quot;Service&quot;) {&#xD;&#xA;        return packageOrServiceElement;&#xD;&#xA;    }&#xD;&#xA;    // Must be a package. See if we can find an existing service with the name we expect.&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let expectedServiceName = getServiceName(nestedCompOwner, entity);&#xD;&#xA;    let services = packageOrServiceElement.getChildren(&quot;Service&quot;).filter(x =&gt; x.name === expectedServiceName);&#xD;&#xA;    if (services.length &gt; 0) {&#xD;&#xA;        return services[0];&#xD;&#xA;    }&#xD;&#xA;    return createElement(&quot;Service&quot;, expectedServiceName, packageOrServiceElement.id);&#xD;&#xA;}&#xD;&#xA;function getReturnTypeMediatypeProperty(element) {&#xD;&#xA;    return element.getStereotype(&quot;Http Settings&quot;).getProperty(&quot;Return Type Mediatype&quot;);&#xD;&#xA;}&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    if (globals.aggregateRootCache[element.id]) {&#xD;&#xA;        return globals.aggregateRootCache[element.id];&#xD;&#xA;    }&#xD;&#xA;    let result = !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;    globals.aggregateRootCache[element.id] = result;&#xD;&#xA;    return result;&#xD;&#xA;}&#xD;&#xA;function getNestedCompositionalOwner(entity) {&#xD;&#xA;    if (globals.nestedCompositionalOwnerCache[entity.id]) {&#xD;&#xA;        return globals.nestedCompositionalOwnerCache[entity.id];&#xD;&#xA;    }&#xD;&#xA;    let result = entity.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .filter(x =&gt; isAggregateRoot(x.typeReference.getType()) &amp;&amp;&#xD;&#xA;        isOwnedBy(x) &amp;&amp;&#xD;&#xA;        // Let's only target collections for now as part of the nested compositional crud support&#xD;&#xA;        // as one-to-one relationships are more expensive to address and possibly not going to&#xD;&#xA;        // be needed.&#xD;&#xA;        x.getOtherEnd().typeReference.isCollection)[0];&#xD;&#xA;    if (result) {&#xD;&#xA;        globals.nestedCompositionalOwnerCache[entity.id] = result.typeReference.getType();&#xD;&#xA;    }&#xD;&#xA;    return result;&#xD;&#xA;    function isOwnedBy(association) {&#xD;&#xA;        return association.isSourceEnd() &amp;&amp;&#xD;&#xA;            !association.typeReference.isNullable &amp;&amp;&#xD;&#xA;            !association.typeReference.isCollection;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function ownerIsAggregateRoot(entity) {&#xD;&#xA;    // Let's not introduce this yet&#xD;&#xA;    return false;&#xD;&#xA;    //let result = getNestedCompositionalOwner(entity);&#xD;&#xA;    //return result ? true : false;&#xD;&#xA;}&#xD;&#xA;function getEntityFolder(service, entity) {&#xD;&#xA;    let nestedCompOwner = getNestedCompositionalOwner(entity);&#xD;&#xA;    let expectedFolderName = getFolderName(nestedCompOwner, entity);&#xD;&#xA;    var existing = service.getParent().getChildren().find(x =&gt; x.name == expectedFolderName);&#xD;&#xA;    var folder = existing || createElement(&quot;Folder&quot;, expectedFolderName, service.getParent().id);&#xD;&#xA;    return folder;&#xD;&#xA;}&#xD;&#xA;function hasElementInFolder(entityFolder, expectedElementName) {&#xD;&#xA;    return entityFolder.getChildren().some(x =&gt; x.name == expectedElementName);&#xD;&#xA;}&#xD;&#xA;function setHttpStereotype(element, stereotypeName, props) {&#xD;&#xA;    let stereotype = element.getStereotype(stereotypeName);&#xD;&#xA;    for (let key of Object.keys(props)) {&#xD;&#xA;        stereotype.getProperty(key).setValue(props[key]);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;);&#xD;&#xA;    let typeName = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)?.getField(&quot;Key Type&quot;)?.value ?? &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;// Returns a dictionary instead of element to help deal with explicit vs implicit keys&#xD;&#xA;function getPrimaryKeyDescriptor(entity) {&#xD;&#xA;    if (!entity) {&#xD;&#xA;        throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;    }&#xD;&#xA;    let primaryKeys = getPrimaryKeysWithMapPath(entity);&#xD;&#xA;    let keyLen = Object.keys(primaryKeys).length;&#xD;&#xA;    switch (true) {&#xD;&#xA;        case keyLen == 0:&#xD;&#xA;            return {&#xD;&#xA;                id: null,&#xD;&#xA;                name: getDomainAttributeNameFormat(&quot;Id&quot;),&#xD;&#xA;                typeId: getSurrogateKeyType(),&#xD;&#xA;                specialization: globals.PKSpecialization.Implicit,&#xD;&#xA;                compositeKeys: null,&#xD;&#xA;                mapPath: null&#xD;&#xA;            };&#xD;&#xA;        case keyLen == 1:&#xD;&#xA;            let pkAttr = primaryKeys[Object.keys(primaryKeys)[0]];&#xD;&#xA;            return {&#xD;&#xA;                id: pkAttr.id,&#xD;&#xA;                name: getDomainAttributeNameFormat(pkAttr.name),&#xD;&#xA;                typeId: pkAttr.typeId,&#xD;&#xA;                specialization: globals.PKSpecialization.Explicit,&#xD;&#xA;                compositeKeys: null,&#xD;&#xA;                mapPath: pkAttr.mapPath&#xD;&#xA;            };&#xD;&#xA;        case keyLen &gt; 1:&#xD;&#xA;            return {&#xD;&#xA;                id: null,&#xD;&#xA;                name: null,&#xD;&#xA;                typeId: null,&#xD;&#xA;                specialization: globals.PKSpecialization.ExplicitComposite,&#xD;&#xA;                compositeKeys: Object.values(primaryKeys).map((v) =&gt; {&#xD;&#xA;                    return {&#xD;&#xA;                        id: v.id,&#xD;&#xA;                        name: getDomainAttributeNameFormat(v.name),&#xD;&#xA;                        typeId: v.typeId,&#xD;&#xA;                        mapPath: v.mapPath&#xD;&#xA;                    };&#xD;&#xA;                }),&#xD;&#xA;                mapPath: null&#xD;&#xA;            };&#xD;&#xA;        default:&#xD;&#xA;            return {&#xD;&#xA;                id: null,&#xD;&#xA;                name: null,&#xD;&#xA;                typeId: null,&#xD;&#xA;                specialization: globals.PKSpecialization.Unknown,&#xD;&#xA;                compositeKeys: null,&#xD;&#xA;                mapPath: null&#xD;&#xA;            };&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;;&#xD;&#xA;function getPrimaryKeysWithMapPath(entity) {&#xD;&#xA;    let keydict = Object.create(null);&#xD;&#xA;    let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;    keys.forEach(key =&gt; keydict[key.id] = {&#xD;&#xA;        id: key.id,&#xD;&#xA;        name: key.getName(),&#xD;&#xA;        typeId: key.typeReference.typeId,&#xD;&#xA;        mapPath: [key.id],&#xD;&#xA;        isNullable: false,&#xD;&#xA;        isCollection: false&#xD;&#xA;    });&#xD;&#xA;    traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);&#xD;&#xA;    return keydict;&#xD;&#xA;    function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        baseKeys.forEach(key =&gt; {&#xD;&#xA;            keydict[key.id] = {&#xD;&#xA;                id: key.id,&#xD;&#xA;                name: key.getName(),&#xD;&#xA;                typeId: key.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                isNullable: key.typeReference.isNullable,&#xD;&#xA;                isCollection: key.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getAttributesWithMapPath(entity) {&#xD;&#xA;    let attrDict = Object.create(null);&#xD;&#xA;    let attributes = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !legacyPartitionKey(x));&#xD;&#xA;    attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;        id: attr.id,&#xD;&#xA;        name: attr.getName(),&#xD;&#xA;        typeId: attr.typeReference.typeId,&#xD;&#xA;        mapPath: [attr.id],&#xD;&#xA;        isNullable: false,&#xD;&#xA;        isCollection: false&#xD;&#xA;    });&#xD;&#xA;    traverseInheritanceHierarchyForAttributes(attrDict, entity, []);&#xD;&#xA;    return attrDict;&#xD;&#xA;    function traverseInheritanceHierarchyForAttributes(attrDict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !legacyPartitionKey(x));&#xD;&#xA;        baseKeys.forEach(attr =&gt; {&#xD;&#xA;            attrDict[attr.id] = {&#xD;&#xA;                id: attr.id,&#xD;&#xA;                name: attr.getName(),&#xD;&#xA;                typeId: attr.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([attr.id]),&#xD;&#xA;                isNullable: attr.typeReference.isNullable,&#xD;&#xA;                isCollection: attr.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForAttributes(attrDict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;// Returns a dictionary instead of element to help deal with explicit vs implicit keys&#xD;&#xA;function getNestedCompositionalOwnerForeignKeyDescriptor(entity, nestedCompOwner) {&#xD;&#xA;    if (!entity) {&#xD;&#xA;        throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;    }&#xD;&#xA;    if (!nestedCompOwner) {&#xD;&#xA;        throw new Error(&quot;nestedCompOwner not specified&quot;);&#xD;&#xA;    }&#xD;&#xA;    let explicitFkAttr = entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; x.name.toLowerCase().indexOf(nestedCompOwner.name.toLowerCase()) &gt;= 0 &amp;&amp; x.hasStereotype(&quot;Foreign Key&quot;))[0];&#xD;&#xA;    if (explicitFkAttr) {&#xD;&#xA;        return {&#xD;&#xA;            name: getDomainAttributeNameFormat(explicitFkAttr.name),&#xD;&#xA;            typeId: explicitFkAttr.typeReference.typeId,&#xD;&#xA;            id: explicitFkAttr.id,&#xD;&#xA;            specialization: globals.FKSpecialization.Explicit&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    return {&#xD;&#xA;        name: getDomainAttributeNameFormat(`${nestedCompOwner.name}Id`),&#xD;&#xA;        typeId: getSurrogateKeyType(),&#xD;&#xA;        id: null,&#xD;&#xA;        specialization: globals.FKSpecialization.Implicit&#xD;&#xA;    };&#xD;&#xA;}&#xD;&#xA;function addPrimaryKeys(dto, operation, entityPkDescr) {&#xD;&#xA;    switch (entityPkDescr.specialization) {&#xD;&#xA;        case globals.PKSpecialization.Implicit:&#xD;&#xA;        case globals.PKSpecialization.Explicit:&#xD;&#xA;            {&#xD;&#xA;                if (dto) {&#xD;&#xA;                    let primaryKeyDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(entityPkDescr.name), dto.id);&#xD;&#xA;                    primaryKeyDtoField.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;                    if (entityPkDescr.specialization == globals.PKSpecialization.Explicit) {&#xD;&#xA;                        primaryKeyDtoField.setMapping(entityPkDescr.mapPath);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                let operationParamId = createElement(&quot;Parameter&quot;, getParameterFormat(entityPkDescr.name), operation.id);&#xD;&#xA;                operationParamId.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;            }&#xD;&#xA;            break;&#xD;&#xA;        case globals.PKSpecialization.ExplicitComposite:&#xD;&#xA;            for (let key of entityPkDescr.compositeKeys) {&#xD;&#xA;                if (dto) {&#xD;&#xA;                    let primaryKeyDtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(key.name), dto.id);&#xD;&#xA;                    primaryKeyDtoField.typeReference.setType(key.typeId);&#xD;&#xA;                    primaryKeyDtoField.setMapping(key.id);&#xD;&#xA;                }&#xD;&#xA;                let operationParamId = createElement(&quot;Parameter&quot;, getParameterFormat(key.name), operation.id);&#xD;&#xA;                operationParamId.typeReference.setType(entityPkDescr.typeId);&#xD;&#xA;            }&#xD;&#xA;            break;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getRoutePath(nestedCompOwnerFkDescr, entity, entityPkDescr) {&#xD;&#xA;    let list = [];&#xD;&#xA;    if (nestedCompOwnerFkDescr) {&#xD;&#xA;        list.push(`{${getParameterFormat(nestedCompOwnerFkDescr.name)}}`);&#xD;&#xA;    }&#xD;&#xA;    if (entity) {&#xD;&#xA;        list.push(`${getRoutingFormat(entity.name)}`);&#xD;&#xA;    }&#xD;&#xA;    if (entityPkDescr) {&#xD;&#xA;        switch (entityPkDescr.specialization) {&#xD;&#xA;            case globals.PKSpecialization.Implicit:&#xD;&#xA;            case globals.PKSpecialization.Explicit:&#xD;&#xA;                list.push(`{${getParameterFormat(entityPkDescr.name)}}`);&#xD;&#xA;                break;&#xD;&#xA;            case globals.PKSpecialization.ExplicitComposite:&#xD;&#xA;                list.push(entityPkDescr.compositeKeys.map(x =&gt; `{${getParameterFormat(x.name)}}`));&#xD;&#xA;                break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    if (list.length == 0) {&#xD;&#xA;        return &quot;&quot;;&#xD;&#xA;    }&#xD;&#xA;    return list.join(&quot;/&quot;);&#xD;&#xA;}&#xD;&#xA;function getDomainAttributeNamingConvention() {&#xD;&#xA;    const domainSettingsId = &quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;;&#xD;&#xA;    return application.getSettings(domainSettingsId)&#xD;&#xA;        ?.getField(&quot;Attribute Naming Convention&quot;)?.value ?? &quot;pascal-case&quot;;&#xD;&#xA;}&#xD;&#xA;// Just in case someone still uses this convention. Used to filter out those attributes when mapping&#xD;&#xA;// to domain entities that are within a Cosmos DB paradigm.&#xD;&#xA;function legacyPartitionKey(attribute) {&#xD;&#xA;    return attribute.hasStereotype(&quot;Partition Key&quot;) &amp;&amp; attribute.name === &quot;PartitionKey&quot;;&#xD;&#xA;}" isActive="true" />
              </properties>
            </stereotype>
            <stereotype stereotypeDefinitionId="cbe77364-d1d0-400b-a8c4-646a4c869612" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="b2c3a117-23d3-47e5-8b83-5b902c55a226" display="Icon" isActive="true" />
                <property name="0abff08a-3986-40b1-a28f-4cc03c4fc1ec" display="Shortcut" value="ctrl + shift + u" isActive="true" />
                <property name="79f6973f-5e3a-4618-9d4c-d7cc604bffe0" display="Shortcut (macOS)" isActive="true" />
                <property name="e034a0ca-0101-4594-8384-43048b714578" display="Type Order" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>