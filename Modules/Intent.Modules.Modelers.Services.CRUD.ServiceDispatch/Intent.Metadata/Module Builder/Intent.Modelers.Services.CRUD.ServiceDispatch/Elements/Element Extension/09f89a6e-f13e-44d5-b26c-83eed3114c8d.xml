<?xml version="1.0" encoding="utf-8"?>
<class id="09f89a6e-f13e-44d5-b26c-83eed3114c8d" type="Element Extension" typeId="e3c7b1ca-f080-45c1-b56f-8d44226c8e20">
  <name>Service Extensions</name>
  <display>Service Extensions: Service</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-manually</sort-children>
  <genericTypes />
  <typeReference id="445c0318-c04a-4f2b-8e46-28dc00f35f29">
    <typeId>b16578a5-27b1-4047-a8df-f0b783d706bd</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Services</typePackageName>
    <typePackageId>4ba53041-59f9-4446-a207-6da4fbdf86fe</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>78de7c54-66ee-41af-a93a-007da1576209</parentFolderId>
  <packageId>61f7cdaa-2c36-4f72-adfa-565c84889a48</packageId>
  <packageName>Intent.Modelers.Services.CRUD.ServiceDispatch</packageName>
  <stereotypes>
    <stereotype stereotypeDefinitionId="159cbc8e-a910-40f7-8e45-3edadbb863c2" name="Type Reference Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="35226a83-3965-4224-8aef-20c68a0c5180" display="Mode" value="Inherit" isActive="true" />
        <property name="7d3859d4-084d-4ff0-8b31-850b4a8f8cd0" display="Display Name" isActive="false" />
        <property name="17223dbd-8df0-4700-8b81-02274ca3ed7f" display="Hint" isActive="false" />
        <property name="b2cef034-5706-45d2-8554-f4dc582a18ff" display="Target Types" isActive="false" />
        <property name="93e4efa9-186d-4e88-ae0a-491bcd6e6f5e" display="Default Type Id" isActive="false" />
        <property name="7a0c4185-1c08-4d3e-9185-14683d7a3bd0" display="Allow Collection" value="Inherit" isActive="false" />
        <property name="e3dc90ec-4f5f-4f20-b271-e28a5094dc91" display="Allow Nullable" value="Inherit" isActive="false" />
      </properties>
    </stereotype>
    <stereotype stereotypeDefinitionId="312eab00-f6db-492e-bbb4-e41383c8d3d8" name="Extension Settings">
      <addedByDefault>true</addedByDefault>
      <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
      <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
      <properties>
        <property name="8c964307-9d03-4a14-9fd3-40ea2607955a" display="Display Text Function" value="" isActive="true" />
        <property name="996ed45f-2318-4587-9618-73db3d7cfed0" display="Validate Function" value="" isActive="true" />
      </properties>
    </stereotype>
  </stereotypes>
  <metadata />
  <childElements>
    <childElement id="139a0532-8a3a-41bb-85c2-de1dbbd9a3a2" type="Context Menu" typeId="d45e383d-90ba-4b64-aca7-34ca100cea21">
      <name>[context menu]</name>
      <display>[context menu]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-manually</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>09f89a6e-f13e-44d5-b26c-83eed3114c8d</parentFolderId>
      <packageId>61f7cdaa-2c36-4f72-adfa-565c84889a48</packageId>
      <packageName>Intent.Modelers.Services.CRUD.ServiceDispatch</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="6036a47e-07d6-46a3-8dbd-3805f8135f72" type="Run Script Option" typeId="345d46fb-c500-409a-88c7-26720572c9af">
          <name>Create CRUD Operations</name>
          <display>Create CRUD Operations: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="ab9ad5a0-2f39-4db5-8f82-9a722834d1a4">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>139a0532-8a3a-41bb-85c2-de1dbbd9a3a2</parentFolderId>
          <packageId>61f7cdaa-2c36-4f72-adfa-565c84889a48</packageId>
          <packageName>Intent.Modelers.Services.CRUD.ServiceDispatch</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="// This script in generalized so that it can be used as is for all the following contexts:&#xD;&#xA;// - From a package (in which case it creates a service)&#xD;&#xA;// - From a service (in which case it uses that service)&#xD;&#xA;// - When the `Intent.Metadata.WebApi` designer extensions are installed (detected by the presence of the `Http Settings` stereotype on services)&#xD;&#xA;// - When the `Intent.AzureFunctions` designer extensions are installed (detected by the presence of the `Azure Function` stereotype on services)&#xD;&#xA;&#xD;&#xA;// Detect if we're running from the &quot;Execution Script dialogue&quot;, in which case we want to manually&#xD;&#xA;// set the element to something:&#xD;&#xA;let defaultDomainClassName = null;&#xD;&#xA;if (element?.id == null) {&#xD;&#xA;    // For testing as if a package was right clicked, substitute with package id:&#xD;&#xA;    // element = { id: &quot;7339add6-c32e-4d95-8e1b-1bbe86ca7f1c&quot; }; // Azure&#xD;&#xA;    element = { id: &quot;ef5c352b-fc74-4f13-b61b-a970f8360b08&quot; }; // NestJS&#xD;&#xA;&#xD;&#xA;    // For element, substitute with service's element id:&#xD;&#xA;    // element = lookup(&quot;677c6801-e654-45c5-924e-886713db1f5e&quot;);&#xD;&#xA;&#xD;&#xA;    // When set, the dialog asking to select the class from the domain is skipped:&#xD;&#xA;    defaultDomainClassName = &quot;NewClass&quot;;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;async function showObject(object) {&#xD;&#xA;    await dialogService.info(JSON.stringify(object, null, &quot;  &quot;));&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;const typeNameToIdMap = new Map();&#xD;&#xA;typeNameToIdMap.set(&quot;guid&quot;, &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;);&#xD;&#xA;typeNameToIdMap.set(&quot;int&quot;, &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;);&#xD;&#xA;typeNameToIdMap.set(&quot;long&quot;, &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;);&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    let typeName = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)?.getField(&quot;Key Type&quot;)?.value ?? &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;function isAggregateRoot(element) {&#xD;&#xA;    return !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;        .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;const userImmutableFieldNames = new Set([&quot;created&quot;, &quot;createdBy&quot;, &quot;id&quot;, &quot;updated&quot;, &quot;updatedBy&quot;]);&#xD;&#xA;function isUserMutable(attributeName) {&#xD;&#xA;    return !userImmutableFieldNames.has(attributeName.toLowerCase());&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;const stereotypeValues = [&#xD;&#xA;    {&#xD;&#xA;        stereotypeName: &quot;Http Settings&quot;,&#xD;&#xA;        propertiesByOperationName: {&#xD;&#xA;            &quot;Create&quot;: [&#xD;&#xA;                { name: &quot;Verb&quot;, resolveValue: () =&gt; &quot;POST&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: () =&gt; &quot;&quot; }&#xD;&#xA;            ],&#xD;&#xA;            &quot;FindById&quot;: [&#xD;&#xA;                { name: &quot;Verb&quot;, resolveValue: () =&gt; &quot;GET&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: () =&gt; &quot;{id}&quot; }&#xD;&#xA;            ],&#xD;&#xA;            &quot;FindAll&quot;: [&#xD;&#xA;                { name: &quot;Verb&quot;, resolveValue: () =&gt; &quot;GET&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: () =&gt; &quot;&quot; }&#xD;&#xA;            ],&#xD;&#xA;            &quot;Update&quot;: [&#xD;&#xA;                { name: &quot;Verb&quot;, resolveValue: () =&gt; &quot;PUT&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: () =&gt; &quot;{id}&quot; }&#xD;&#xA;            ],&#xD;&#xA;            &quot;Delete&quot;: [&#xD;&#xA;                { name: &quot;Verb&quot;, resolveValue: () =&gt; &quot;DELETE&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: () =&gt; &quot;{id}&quot; }&#xD;&#xA;            ]&#xD;&#xA;        },&#xD;&#xA;    },&#xD;&#xA;    {&#xD;&#xA;        stereotypeName: &quot;Azure Function&quot;,&#xD;&#xA;        propertiesByOperationName: {&#xD;&#xA;            &quot;Create&quot;: [&#xD;&#xA;                { name: &quot;Type&quot;, resolveValue: () =&gt; &quot;Http Trigger&quot; },&#xD;&#xA;                { name: &quot;Method&quot;, resolveValue: () =&gt; &quot;POST&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: (entity) =&gt; `${entity.getName().toLowerCase()}` }&#xD;&#xA;            ],&#xD;&#xA;            &quot;FindById&quot;: [&#xD;&#xA;                { name: &quot;Type&quot;, resolveValue: () =&gt; &quot;Http Trigger&quot; },&#xD;&#xA;                { name: &quot;Method&quot;, resolveValue: () =&gt; &quot;GET&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: (entity) =&gt; `${entity.getName().toLowerCase()}/{id}` }&#xD;&#xA;            ],&#xD;&#xA;            &quot;FindAll&quot;: [&#xD;&#xA;                { name: &quot;Type&quot;, resolveValue: () =&gt; &quot;Http Trigger&quot; },&#xD;&#xA;                { name: &quot;Method&quot;, resolveValue: () =&gt; &quot;GET&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: (entity) =&gt; `${entity.getName().toLowerCase()}` }&#xD;&#xA;            ],&#xD;&#xA;            &quot;Update&quot;: [&#xD;&#xA;                { name: &quot;Type&quot;, resolveValue: () =&gt; &quot;Http Trigger&quot; },&#xD;&#xA;                { name: &quot;Method&quot;, resolveValue: () =&gt; &quot;PUT&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: (entity) =&gt; `${entity.getName().toLowerCase()}/{id}` }&#xD;&#xA;            ],&#xD;&#xA;            &quot;Delete&quot;: [&#xD;&#xA;                { name: &quot;Type&quot;, resolveValue: () =&gt; &quot;Http Trigger&quot; },&#xD;&#xA;                { name: &quot;Method&quot;, resolveValue: () =&gt; &quot;DELETE&quot; },&#xD;&#xA;                { name: &quot;Route&quot;, resolveValue: (entity) =&gt; `${entity.getName().toLowerCase()}/{id}` }&#xD;&#xA;            ]&#xD;&#xA;        },&#xD;&#xA;    }];&#xD;&#xA;async function setOperationStereotype(operation, entity) {&#xD;&#xA;    for (const stereotype of operation.getStereotypes()) {&#xD;&#xA;        const values = stereotypeValues.find(x =&gt; x.stereotypeName === stereotype.name);&#xD;&#xA;        if (values == null) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        var properties = values.propertiesByOperationName[operation.getName()];&#xD;&#xA;        if (properties == null) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        for (const property of properties) {&#xD;&#xA;            stereotype.getProperty(property.name).setValue(property.resolveValue(entity));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    await dialogService.error(`Could not determine Stereotype to update for operation &quot;${operation.getName()}&quot;, please contact Intent Architect Support.`);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let classes = lookupTypesOf(&quot;Class&quot;).filter(x =&gt; isAggregateRoot(x) || x.hasStereotype(&quot;Repository&quot;));&#xD;&#xA;if (classes.length == 0) {&#xD;&#xA;    await dialogService.info(&quot;No Domain types could be found. Please ensure that you have a reference to the Domain package and that at least one class exists in it.&quot;);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let classId = defaultDomainClassName != null&#xD;&#xA;    ? classes.find(x =&gt; x.getName() === defaultDomainClassName)?.id&#xD;&#xA;    : await dialogService.lookupFromOptions(classes);&#xD;&#xA;if (classId == null) {&#xD;&#xA;    await dialogService.error(`No class found with id &quot;${classId}&quot;.`);&#xD;&#xA;    return;&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;let entity = lookup(classId);&#xD;&#xA;&#xD;&#xA;// Auto detect if we're running in the context of a service or package:&#xD;&#xA;const service = element.specialization === &quot;Service&quot;&#xD;&#xA;    ? element&#xD;&#xA;    : createElement(&quot;Service&quot;, `${pluralize(toPascalCase(entity.name))}Service`, element.id);&#xD;&#xA;&#xD;&#xA;// Get or create folder in which to place DTOs:&#xD;&#xA;let folder = service.getParent().getChildren(&quot;Folder&quot;).find(x =&gt; x.name == pluralize(entity.name));&#xD;&#xA;if (folder == null) {&#xD;&#xA;    folder = createElement(&quot;Folder&quot;, pluralize(entity.name), service.getParent().id);&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// Result DTO (used by &quot;FindById&quot; and &quot;FindAll&quot;):&#xD;&#xA;const resultDto = createElement(&quot;DTO&quot;, `${entity.name}DTO`, folder.id);&#xD;&#xA;resultDto.setMapping(entity.id);&#xD;&#xA;&#xD;&#xA;// &quot;Create&quot; operation:&#xD;&#xA;{&#xD;&#xA;    const dto = createElement(&quot;DTO&quot;, `${entity.name}CreateDTO`, folder.id);&#xD;&#xA;    for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        let field = createElement(&quot;DTO-Field&quot;, attribute.name, dto.id);&#xD;&#xA;        field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;Create&quot;, service.id);&#xD;&#xA;    const operationParameter = createElement(&quot;Parameter&quot;, &quot;dto&quot;, operation.id);&#xD;&#xA;    operationParameter.typeReference.setType(dto.id);&#xD;&#xA;&#xD;&#xA;    await setOperationStereotype(operation, entity);&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// &quot;FindById&quot; operation:&#xD;&#xA;{&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;FindById&quot;, service.id);&#xD;&#xA;&#xD;&#xA;    operation.typeReference.setType(resultDto.id);&#xD;&#xA;    if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        const idField = createElement(&quot;DTO-Field&quot;, &quot;Id&quot;, resultDto.id);&#xD;&#xA;        idField.typeReference.setType(getSurrogateKeyType())&#xD;&#xA;&#xD;&#xA;        const idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;        idParam.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;    } else {&#xD;&#xA;        for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;            const field = createElement(&quot;DTO-Field&quot;, attribute.getName(), resultDto.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;            field.setMapping(attribute.id);&#xD;&#xA;&#xD;&#xA;            const param = createElement(&quot;Parameter&quot;, toCamelCase(field.getName()), operation.id);&#xD;&#xA;            param.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        const field = createElement(&quot;DTO-Field&quot;, attribute.getName(), resultDto.id);&#xD;&#xA;        field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;        field.setMapping(attribute.id);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    await setOperationStereotype(operation, entity);&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// &quot;FindAll&quot; operation:&#xD;&#xA;{&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;FindAll&quot;, service.id);&#xD;&#xA;    operation.typeReference.setType(resultDto.id);&#xD;&#xA;    operation.typeReference.setIsCollection(true);&#xD;&#xA;&#xD;&#xA;    await setOperationStereotype(operation, entity);&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// &quot;Update&quot; operation:&#xD;&#xA;{&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;Update&quot;, service.id);&#xD;&#xA;    const updateDTO = createElement(&quot;DTO&quot;, `${entity.name}UpdateDTO`, folder.id);&#xD;&#xA;&#xD;&#xA;    if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        let idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;        idParam.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;    } else {&#xD;&#xA;        for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;            let field = createElement(&quot;DTO-Field&quot;, attribute.getName(), updateDTO.id);&#xD;&#xA;            field.typeReference.setType(attribute.typeReference.typeId)&#xD;&#xA;&#xD;&#xA;            let param = createElement(&quot;Parameter&quot;, toCamelCase(field.getName()), operation.id);&#xD;&#xA;            param.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    const updateOperationDtoParam = createElement(&quot;Parameter&quot;, &quot;dto&quot;, operation.id);&#xD;&#xA;    updateOperationDtoParam.typeReference.setType(updateDTO.id);&#xD;&#xA;&#xD;&#xA;    for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        const field = createElement(&quot;DTO-Field&quot;, attribute.getName(), updateDTO.id);&#xD;&#xA;        field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    await setOperationStereotype(operation, entity);&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;&#xD;&#xA;// &quot;Delete&quot; operation:&#xD;&#xA;{&#xD;&#xA;    const operation = createElement(&quot;Operation&quot;, &quot;Delete&quot;, service.id);&#xD;&#xA;&#xD;&#xA;    if (entity.getChildren(&quot;Attribute&quot;).every(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;        const idParam = createElement(&quot;Parameter&quot;, &quot;id&quot;, operation.id);&#xD;&#xA;        idParam.typeReference.setType(getSurrogateKeyType());&#xD;&#xA;    } else {&#xD;&#xA;        for (let attribute of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;))) {&#xD;&#xA;            const param = createElement(&quot;Parameter&quot;, toCamelCase(attribute.getName()), operation.id);&#xD;&#xA;            param.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    await setOperationStereotype(operation, entity);&#xD;&#xA;&#xD;&#xA;    operation.collapse();&#xD;&#xA;}&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
            <stereotype stereotypeDefinitionId="cbe77364-d1d0-400b-a8c4-646a4c869612" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="b2c3a117-23d3-47e5-8b83-5b902c55a226" display="Icon" isActive="true" />
                <property name="0abff08a-3986-40b1-a28f-4cc03c4fc1ec" display="Shortcut" value="ctrl + shift + u" isActive="true" />
                <property name="79f6973f-5e3a-4618-9d4c-d7cc604bffe0" display="Shortcut (macOS)" isActive="true" />
                <property name="e034a0ca-0101-4594-8384-43048b714578" display="Type Order" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>