<#@ template  debug="true"  inherits="IntentRoslynProjectItemTemplateBase<IClass>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.MetaModel.Domain" #>
<#@ import namespace="Intent.SoftwareFactory.MetaData" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic"#>
<#


#>
using System;
using System.Collections.Generic;
using System.Linq;
<#= DependencyUsings #>

[assembly: DefaultIntentManaged(Mode.Fully)] 

namespace <#= Namespace #>
{
    public interface I<#= ClassStateName #>Behaviours<#= Model.ParentClass != null ? string.Format(" : I{0}Behaviours", Model.ParentClass.Name) : "" #> {
<# foreach (var operation in Model.Operations.Where(x => x.HasStereotype("Command Operation")))
    {
		if (!operation.IsAbstract)
		{#>
        <#= EmitOperationReturnType(operation) #> <#= operation.Name.ToPascalCase() #>(<#= GetParametersDefinition(operation) #>);
<#		}
    }
#>
    }

	public static class <#= ClassStateName #>Extensions
    {
        public static I<#= ClassStateName #>Behaviours Behaviours(this I<#= ClassStateName #> <#= ClassStateName.ToCamelCase() #>)
        {
            return (I<#= ClassStateName #>Behaviours)<#= ClassStateName.ToCamelCase() #>;
        }
    }
}