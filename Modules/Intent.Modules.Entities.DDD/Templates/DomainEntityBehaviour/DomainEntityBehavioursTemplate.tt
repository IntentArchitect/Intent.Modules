<#@ template  debug="true"  inherits="IntentRoslynProjectItemTemplateBase<IClass>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="Intent.MetaModel.Domain" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic"#>
<#


#>
using System;
using System.Collections.Generic;
using System.Linq;
<#= DependencyUsings #>

[assembly: DefaultIntentManaged(Mode.Fully)] 

namespace <#= Namespace #>
{
    public class <#= ClassName #>
    {
		private <#= ClassStateName #> _state;

        public <#= ClassName #>(<#= ClassStateName #> state)
        {
			_state = state;
        }

<# foreach (var operation in Model.Operations)
    {
        string returnType = operation.ReturnType != null ? Types.Get( operation.ReturnType.Type) : "void";
        string parameterDefinitions = operation.Parameters.Any() ? operation.Parameters.Select(x => Types.Get(x.Type) + " " + x.Name.ToCamelCase()).Aggregate((x, y) => x + ", " + y) : "";
        string parameterNames = operation.Parameters.Any() ? operation.Parameters.Select(x => x.Name.ToCamelCase()).Aggregate((x, y) => x + ", " + y) : "";
		if (!operation.IsAbstract)
		{#>
        public <#= returnType #> <#= operation.Name.ToPascalCase() #>(<#= parameterDefinitions #>)
        {
            <#= operation.ReturnType != null ? "return " : "" #>_state.<#= operation.Name.ToPascalCase() #>(<#= parameterNames #>);
        }
<#		}
    }
#>
    }

	public static class <#= ClassStateName #>Extensions
    {
        public static <#= ClassName #> Behaviours(this I<#= ClassStateName #> <#= ClassStateName.ToCamelCase() #>)
        {
            return new <#= ClassName #>((<#= ClassStateName #>)<#= ClassStateName.ToCamelCase() #>);
        }
    }
}