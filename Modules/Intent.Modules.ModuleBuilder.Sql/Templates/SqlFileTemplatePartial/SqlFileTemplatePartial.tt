<#@ template language="C#" inherits="CSharpTemplateBase<SqlTemplateModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Sql.Api" #>
using System.Collections.Generic;
using Intent.Engine;
using Intent.Modules.Common.Sql.Templates;
using Intent.RoslynWeaver.Attributes;
using Intent.Templates;
<#=string.Format("using {0};", Model.GetModule().ApiNamespace)#>

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
	[IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    partial class <#= ClassName #> : SqlTemplateBase<<#= GetModelType() #>>
    {
        [IntentManaged(Mode.Fully)]
        public const string TemplateId = "<#= GetTemplateId() #>";

        [IntentInitialGen]
        public <#= ClassName #>(IProject project, <#= GetModelType() #> model) : base(TemplateId, project, model)
        {
        }

        [IntentManaged(Mode.Merge, Body = Mode.Ignore, Signature = Mode.Fully)]
        public override ITemplateFileConfig GetTemplateFileConfig()
        {
            return new SqlFileConfig(
                overwriteBehaviour: OverwriteBehaviour.Always,
                fileName: $"<#= Model.IsFilePerModelTemplateRegistration() ? "{Model.Name}" : Model.Name.Replace("Template", "") #>",
                relativeLocation: "<#= Model.IsFilePerModelTemplateRegistration() ? Model.Name.Replace("Template", "") : "" #>"
            );
        }
    }
}