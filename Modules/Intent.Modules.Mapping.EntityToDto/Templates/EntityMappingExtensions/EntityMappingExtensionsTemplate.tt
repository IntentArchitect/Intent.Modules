<#@ template  debug="true"  inherits="IntentRoslynProjectItemTemplateBase<object>" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.SoftwareFactory.MetaModels.UMLModel" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>  
<#


#>
using System.Collections.Generic;
using Intent.Framework.Core.Mapping;
using Intent.Framework.Domain;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{   
    public static class EntityMappingExtensions
    {
        /// <summary>
        /// Project a type using a DTO
        /// </summary>
        /// <typeparam name="TDTO">The dto projection</typeparam>
        /// <param name="entity">The source entity to project</param>
        /// <returns>The projected type</returns>
        public static TDTO MapToDTO<TEntity, TDTO>(this EntityBase item)
            where TDTO : class,new()
            where TEntity : EntityBase
        {
            var mapper = TypeMapperFactory.CreateMapper();
            return mapper.Map<TEntity, TDTO>((TEntity)item);
        }

        public static TDTO MapToDTO<TDTO>(this IEntity item)
            where TDTO : class,new()
        {
            var mapper = TypeMapperFactory.CreateMapper();
            return mapper.Map<TDTO>(item);
        }

        /// <summary>
        /// Project an IEnumerable of TDomain to List of TDTO.
        /// </summary>
        /// <param name="list">List to adapt.</param>
        /// <typeparam name="TDomain">IEnumerable source type.</typeparam>
        /// <typeparam name="TDTO">List destination type.</typeparam>
        /// <returns></returns>
        public static IList<TDTO> MapToDTO<TDomain, TDTO>(this IEnumerable<TDomain> list)
            where TDTO : class,new()
        {
            var mapper = TypeMapperFactory.CreateMapper();
            return mapper.Map<IEnumerable<TDomain>, List<TDTO>>(list);
        }

        public static TDTO MapToDTOExplicit<TEntity, TDTO>(this object item)
            where TDTO : class,new()
            where TEntity : class
        {
            var mapper = TypeMapperFactory.CreateMapper();
            return mapper.Map<TEntity, TDTO>((TEntity)item);
        }
    }
}