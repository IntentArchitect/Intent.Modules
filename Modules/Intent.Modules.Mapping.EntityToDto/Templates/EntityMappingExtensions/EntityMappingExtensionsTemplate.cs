// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.Mapping.EntityToDto.Templates.EntityMappingExtensions
{
    using Intent.SoftwareFactory.MetaModels.UMLModel;
    using Intent.SoftwareFactory.Templates;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent\IntentArchitect\Modules\Intent.Modules.Mapping.EntityToDto\Templates\EntityMappingExtensions\EntityMappingExtensionsTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class EntityMappingExtensionsTemplate : IntentRoslynProjectItemTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("  \r\n");
            
            #line 14 "C:\Dev\Intent\IntentArchitect\Modules\Intent.Modules.Mapping.EntityToDto\Templates\EntityMappingExtensions\EntityMappingExtensionsTemplate.tt"




            
            #line default
            #line hidden
            this.Write("using System.Collections.Generic;\r\nusing Intent.Framework.Core.Mapping;\r\nusing In" +
                    "tent.Framework.Domain;\r\n\r\n[assembly: DefaultIntentManaged(Mode.Fully)]\r\n\r\nnamesp" +
                    "ace ");
            
            #line 24 "C:\Dev\Intent\IntentArchitect\Modules\Intent.Modules.Mapping.EntityToDto\Templates\EntityMappingExtensions\EntityMappingExtensionsTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{   \r\n    public static class EntityMappingExtensions\r\n    {\r\n        /// <summ" +
                    "ary>\r\n        /// Project a type using a DTO\r\n        /// </summary>\r\n        //" +
                    "/ <typeparam name=\"TDTO\">The dto projection</typeparam>\r\n        /// <param name" +
                    "=\"entity\">The source entity to project</param>\r\n        /// <returns>The project" +
                    "ed type</returns>\r\n        public static TDTO MapToDTO<TEntity, TDTO>(this Entit" +
                    "yBase item)\r\n            where TDTO : class,new()\r\n            where TEntity : E" +
                    "ntityBase\r\n        {\r\n            var mapper = TypeMapperFactory.CreateMapper();" +
                    "\r\n            return mapper.Map<TEntity, TDTO>((TEntity)item);\r\n        }\r\n\r\n   " +
                    "     public static TDTO MapToDTO<TDTO>(this IEntity item)\r\n            where TDT" +
                    "O : class,new()\r\n        {\r\n            var mapper = TypeMapperFactory.CreateMap" +
                    "per();\r\n            return mapper.Map<TDTO>(item);\r\n        }\r\n\r\n        /// <su" +
                    "mmary>\r\n        /// Project an IEnumerable of TDomain to List of TDTO.\r\n        " +
                    "/// </summary>\r\n        /// <param name=\"list\">List to adapt.</param>\r\n        /" +
                    "// <typeparam name=\"TDomain\">IEnumerable source type.</typeparam>\r\n        /// <" +
                    "typeparam name=\"TDTO\">List destination type.</typeparam>\r\n        /// <returns><" +
                    "/returns>\r\n        public static IList<TDTO> MapToDTO<TDomain, TDTO>(this IEnume" +
                    "rable<TDomain> list)\r\n            where TDTO : class,new()\r\n        {\r\n         " +
                    "   var mapper = TypeMapperFactory.CreateMapper();\r\n            return mapper.Map" +
                    "<IEnumerable<TDomain>, List<TDTO>>(list);\r\n        }\r\n\r\n        public static TD" +
                    "TO MapToDTOExplicit<TEntity, TDTO>(this object item)\r\n            where TDTO : c" +
                    "lass,new()\r\n            where TEntity : class\r\n        {\r\n            var mapper" +
                    " = TypeMapperFactory.CreateMapper();\r\n            return mapper.Map<TEntity, TDT" +
                    "O>((TEntity)item);\r\n        }\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
