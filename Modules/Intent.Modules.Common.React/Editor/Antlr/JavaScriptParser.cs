//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\JavaScriptParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class JavaScriptParser : JavaScriptParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HashBangLine=1, MultiLineComment=2, SingleLineComment=3, RegularExpressionLiteral=4, 
		OpenBracket=5, CloseBracket=6, OpenParen=7, CloseParen=8, OpenBrace=9, 
		CloseBrace=10, SemiColon=11, Comma=12, Assign=13, QuestionMark=14, Colon=15, 
		Ellipsis=16, Dot=17, PlusPlus=18, MinusMinus=19, Plus=20, Minus=21, BitNot=22, 
		Not=23, Multiply=24, Divide=25, Modulus=26, Power=27, NullCoalesce=28, 
		Hashtag=29, RightShiftArithmetic=30, LeftShiftArithmetic=31, RightShiftLogical=32, 
		LessThan=33, OpenTag=34, MoreThan=35, LessThanEquals=36, GreaterThanEquals=37, 
		Equals_=38, NotEquals=39, IdentityEquals=40, IdentityNotEquals=41, BitAnd=42, 
		BitXOr=43, BitOr=44, And=45, Or=46, MultiplyAssign=47, DivideAssign=48, 
		ModulusAssign=49, PlusAssign=50, MinusAssign=51, LeftShiftArithmeticAssign=52, 
		RightShiftArithmeticAssign=53, RightShiftLogicalAssign=54, BitAndAssign=55, 
		BitXorAssign=56, BitOrAssign=57, PowerAssign=58, ARROW=59, NullLiteral=60, 
		BooleanLiteral=61, DecimalLiteral=62, HexIntegerLiteral=63, OctalIntegerLiteral=64, 
		OctalIntegerLiteral2=65, BinaryIntegerLiteral=66, BigHexIntegerLiteral=67, 
		BigOctalIntegerLiteral=68, BigBinaryIntegerLiteral=69, BigDecimalIntegerLiteral=70, 
		Break=71, Do=72, Instanceof=73, Typeof=74, Case=75, Else=76, New=77, Var=78, 
		Catch=79, Finally=80, Return=81, Void=82, Continue=83, For=84, Switch=85, 
		While=86, Debugger=87, Function=88, This=89, With=90, Default=91, If=92, 
		Throw=93, Delete=94, In=95, Try=96, As=97, From=98, Class=99, Enum=100, 
		Extends=101, Super=102, Const=103, Export=104, Import=105, Async=106, 
		Await=107, Implements=108, StrictLet=109, NonStrictLet=110, Private=111, 
		Public=112, Interface=113, Package=114, Protected=115, Static=116, Yield=117, 
		Identifier=118, StringLiteral=119, TemplateStringLiteral=120, WhiteSpaces=121, 
		LineTerminator=122, HtmlComment=123, CDataComment=124, UnexpectedCharacter=125, 
		CDATA=126, TagOpen=127, TagClose=128, TagSlashClose=129, TagSlash=130, 
		TagName=131, TagEquals=132, HtmlWS=133, AttributeValue=134, Attribute=135;
	public const int
		RULE_program = 0, RULE_sourceElement = 1, RULE_statement = 2, RULE_block = 3, 
		RULE_statementList = 4, RULE_importStatement = 5, RULE_importFromBlock = 6, 
		RULE_moduleItems = 7, RULE_importDefault = 8, RULE_importNamespace = 9, 
		RULE_importFrom = 10, RULE_aliasName = 11, RULE_exportStatement = 12, 
		RULE_exportFromBlock = 13, RULE_declaration = 14, RULE_variableStatement = 15, 
		RULE_variableDeclarationList = 16, RULE_variableDeclaration = 17, RULE_emptyStatement = 18, 
		RULE_expressionStatement = 19, RULE_ifStatement = 20, RULE_iterationStatement = 21, 
		RULE_varModifier = 22, RULE_continueStatement = 23, RULE_breakStatement = 24, 
		RULE_returnStatement = 25, RULE_yieldStatement = 26, RULE_withStatement = 27, 
		RULE_switchStatement = 28, RULE_caseBlock = 29, RULE_caseClauses = 30, 
		RULE_caseClause = 31, RULE_defaultClause = 32, RULE_labelledStatement = 33, 
		RULE_throwStatement = 34, RULE_tryStatement = 35, RULE_catchProduction = 36, 
		RULE_finallyProduction = 37, RULE_debuggerStatement = 38, RULE_functionDeclaration = 39, 
		RULE_classDeclaration = 40, RULE_classTail = 41, RULE_classElement = 42, 
		RULE_methodDefinition = 43, RULE_formalParameterList = 44, RULE_formalParameterArg = 45, 
		RULE_lastFormalParameterArg = 46, RULE_functionBody = 47, RULE_sourceElements = 48, 
		RULE_arrayLiteral = 49, RULE_elementList = 50, RULE_arrayElement = 51, 
		RULE_propertyAssignment = 52, RULE_propertyName = 53, RULE_arguments = 54, 
		RULE_argument = 55, RULE_expressionSequence = 56, RULE_singleExpression = 57, 
		RULE_htmlElements = 58, RULE_htmlElement = 59, RULE_htmlContent = 60, 
		RULE_htmlTagStartName = 61, RULE_htmlTagClosingName = 62, RULE_htmlTagName = 63, 
		RULE_htmlAttribute = 64, RULE_htmlAttributeName = 65, RULE_htmlChardata = 66, 
		RULE_htmlAttributeValue = 67, RULE_assignable = 68, RULE_objectLiteral = 69, 
		RULE_objectExpressionSequence = 70, RULE_anoymousFunction = 71, RULE_arrowFunctionParameters = 72, 
		RULE_arrowFunctionBody = 73, RULE_assignmentOperator = 74, RULE_literal = 75, 
		RULE_numericLiteral = 76, RULE_bigintLiteral = 77, RULE_getter = 78, RULE_setter = 79, 
		RULE_identifierName = 80, RULE_identifier = 81, RULE_reservedWord = 82, 
		RULE_keyword = 83, RULE_let = 84, RULE_eos = 85;
	public static readonly string[] ruleNames = {
		"program", "sourceElement", "statement", "block", "statementList", "importStatement", 
		"importFromBlock", "moduleItems", "importDefault", "importNamespace", 
		"importFrom", "aliasName", "exportStatement", "exportFromBlock", "declaration", 
		"variableStatement", "variableDeclarationList", "variableDeclaration", 
		"emptyStatement", "expressionStatement", "ifStatement", "iterationStatement", 
		"varModifier", "continueStatement", "breakStatement", "returnStatement", 
		"yieldStatement", "withStatement", "switchStatement", "caseBlock", "caseClauses", 
		"caseClause", "defaultClause", "labelledStatement", "throwStatement", 
		"tryStatement", "catchProduction", "finallyProduction", "debuggerStatement", 
		"functionDeclaration", "classDeclaration", "classTail", "classElement", 
		"methodDefinition", "formalParameterList", "formalParameterArg", "lastFormalParameterArg", 
		"functionBody", "sourceElements", "arrayLiteral", "elementList", "arrayElement", 
		"propertyAssignment", "propertyName", "arguments", "argument", "expressionSequence", 
		"singleExpression", "htmlElements", "htmlElement", "htmlContent", "htmlTagStartName", 
		"htmlTagClosingName", "htmlTagName", "htmlAttribute", "htmlAttributeName", 
		"htmlChardata", "htmlAttributeValue", "assignable", "objectLiteral", "objectExpressionSequence", 
		"anoymousFunction", "arrowFunctionParameters", "arrowFunctionBody", "assignmentOperator", 
		"literal", "numericLiteral", "bigintLiteral", "getter", "setter", "identifierName", 
		"identifier", "reservedWord", "keyword", "let", "eos"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, "'['", "']'", "'('", "')'", null, null, 
		"';'", "','", "'='", "'?'", "':'", "'...'", "'.'", "'++'", "'--'", "'+'", 
		"'-'", "'~'", "'!'", "'*'", "'/'", "'%'", "'**'", "'??'", "'#'", "'>>'", 
		"'<<'", "'>>>'", "' < '", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", 
		"'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", 
		"'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", 
		"'**='", null, "'null'", null, null, null, null, null, null, null, null, 
		null, null, "'break'", "'do'", "'instanceof'", "'typeof'", "'case'", "'else'", 
		"'new'", "'var'", "'catch'", "'finally'", "'return'", "'void'", "'continue'", 
		"'for'", "'switch'", "'while'", "'debugger'", "'function'", "'this'", 
		"'with'", "'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", 
		"'as'", "'from'", "'class'", "'enum'", "'extends'", "'super'", "'const'", 
		"'export'", "'import'", "'async'", "'await'", "'implements'", null, null, 
		"'private'", "'public'", "'interface'", "'package'", "'protected'", "'static'", 
		"'yield'", null, null, null, null, null, null, null, null, null, null, 
		null, "'/>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HashBangLine", "MultiLineComment", "SingleLineComment", "RegularExpressionLiteral", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", 
		"Ellipsis", "Dot", "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", 
		"Not", "Multiply", "Divide", "Modulus", "Power", "NullCoalesce", "Hashtag", 
		"RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
		"OpenTag", "MoreThan", "LessThanEquals", "GreaterThanEquals", "Equals_", 
		"NotEquals", "IdentityEquals", "IdentityNotEquals", "BitAnd", "BitXOr", 
		"BitOr", "And", "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
		"PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
		"RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
		"PowerAssign", "ARROW", "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
		"HexIntegerLiteral", "OctalIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
		"BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
		"BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", "Case", 
		"Else", "New", "Var", "Catch", "Finally", "Return", "Void", "Continue", 
		"For", "Switch", "While", "Debugger", "Function", "This", "With", "Default", 
		"If", "Throw", "Delete", "In", "Try", "As", "From", "Class", "Enum", "Extends", 
		"Super", "Const", "Export", "Import", "Async", "Await", "Implements", 
		"StrictLet", "NonStrictLet", "Private", "Public", "Interface", "Package", 
		"Protected", "Static", "Yield", "Identifier", "StringLiteral", "TemplateStringLiteral", 
		"WhiteSpaces", "LineTerminator", "HtmlComment", "CDataComment", "UnexpectedCharacter", 
		"CDATA", "TagOpen", "TagClose", "TagSlashClose", "TagSlash", "TagName", 
		"TagEquals", "HtmlWS", "AttributeValue", "Attribute"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaScriptParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavaScriptParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaScriptParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaScriptParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public ITerminalNode HashBangLine() { return GetToken(JavaScriptParser.HashBangLine, 0); }
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 172; Match(HashBangLine);
				}
				break;
			}
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 175; sourceElements();
				}
				break;
			}
			State = 178; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SourceElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElement(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementContext sourceElement() {
		SourceElementContext _localctx = new SourceElementContext(Context, State);
		EnterRule(_localctx, 2, RULE_sourceElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public WithStatementContext withStatement() {
			return GetRuleContext<WithStatementContext>(0);
		}
		public LabelledStatementContext labelledStatement() {
			return GetRuleContext<LabelledStatementContext>(0);
		}
		public SwitchStatementContext switchStatement() {
			return GetRuleContext<SwitchStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public TryStatementContext tryStatement() {
			return GetRuleContext<TryStatementContext>(0);
		}
		public DebuggerStatementContext debuggerStatement() {
			return GetRuleContext<DebuggerStatementContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 182; block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 183; variableStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 184; importStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 185; exportStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 186; emptyStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 187; classDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 188; expressionStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 189; ifStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 190; iterationStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 191; continueStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 192; breakStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 193; returnStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 194; yieldStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 195; withStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 196; labelledStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 197; switchStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 198; throwStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 199; tryStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 200; debuggerStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 201; functionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; Match(OpenBrace);
			State = 206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 205; statementList();
				}
				break;
			}
			State = 208; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext statementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 8, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 210; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 213;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		public ImportFromBlockContext importFromBlock() {
			return GetRuleContext<ImportFromBlockContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 10, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; Match(Import);
			State = 216; importFromBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromBlockContext : ParserRuleContext {
		public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		public ModuleItemsContext moduleItems() {
			return GetRuleContext<ModuleItemsContext>(0);
		}
		public ImportDefaultContext importDefault() {
			return GetRuleContext<ImportDefaultContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFromBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFromBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFromBlock(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromBlockContext importFromBlock() {
		ImportFromBlockContext _localctx = new ImportFromBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_importFromBlock);
		try {
			State = 230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 219;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 218; importDefault();
					}
					break;
				}
				State = 223;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
				case NullLiteral:
				case BooleanLiteral:
				case Break:
				case Do:
				case Instanceof:
				case Typeof:
				case Case:
				case Else:
				case New:
				case Var:
				case Catch:
				case Finally:
				case Return:
				case Void:
				case Continue:
				case For:
				case Switch:
				case While:
				case Debugger:
				case Function:
				case This:
				case With:
				case Default:
				case If:
				case Throw:
				case Delete:
				case In:
				case Try:
				case As:
				case From:
				case Class:
				case Enum:
				case Extends:
				case Super:
				case Const:
				case Export:
				case Import:
				case Async:
				case Await:
				case Implements:
				case StrictLet:
				case NonStrictLet:
				case Private:
				case Public:
				case Interface:
				case Package:
				case Protected:
				case Static:
				case Yield:
				case Identifier:
					{
					State = 221; importNamespace();
					}
					break;
				case OpenBrace:
					{
					State = 222; moduleItems();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 225; importFrom();
				State = 226; eos();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 228; Match(StringLiteral);
				State = 229; eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleItemsContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public AliasNameContext[] aliasName() {
			return GetRuleContexts<AliasNameContext>();
		}
		public AliasNameContext aliasName(int i) {
			return GetRuleContext<AliasNameContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ModuleItemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_moduleItems; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterModuleItems(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitModuleItems(this);
		}
	}

	[RuleVersion(0)]
	public ModuleItemsContext moduleItems() {
		ModuleItemsContext _localctx = new ModuleItemsContext(Context, State);
		EnterRule(_localctx, 14, RULE_moduleItems);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(OpenBrace);
			State = 238;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 233; aliasName();
					State = 234; Match(Comma);
					}
					} 
				}
				State = 240;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 60)) & ~0x3f) == 0 && ((1L << (_la - 60)) & ((1L << (NullLiteral - 60)) | (1L << (BooleanLiteral - 60)) | (1L << (Break - 60)) | (1L << (Do - 60)) | (1L << (Instanceof - 60)) | (1L << (Typeof - 60)) | (1L << (Case - 60)) | (1L << (Else - 60)) | (1L << (New - 60)) | (1L << (Var - 60)) | (1L << (Catch - 60)) | (1L << (Finally - 60)) | (1L << (Return - 60)) | (1L << (Void - 60)) | (1L << (Continue - 60)) | (1L << (For - 60)) | (1L << (Switch - 60)) | (1L << (While - 60)) | (1L << (Debugger - 60)) | (1L << (Function - 60)) | (1L << (This - 60)) | (1L << (With - 60)) | (1L << (Default - 60)) | (1L << (If - 60)) | (1L << (Throw - 60)) | (1L << (Delete - 60)) | (1L << (In - 60)) | (1L << (Try - 60)) | (1L << (As - 60)) | (1L << (From - 60)) | (1L << (Class - 60)) | (1L << (Enum - 60)) | (1L << (Extends - 60)) | (1L << (Super - 60)) | (1L << (Const - 60)) | (1L << (Export - 60)) | (1L << (Import - 60)) | (1L << (Async - 60)) | (1L << (Await - 60)) | (1L << (Implements - 60)) | (1L << (StrictLet - 60)) | (1L << (NonStrictLet - 60)) | (1L << (Private - 60)) | (1L << (Public - 60)) | (1L << (Interface - 60)) | (1L << (Package - 60)) | (1L << (Protected - 60)) | (1L << (Static - 60)) | (1L << (Yield - 60)) | (1L << (Identifier - 60)))) != 0)) {
				{
				State = 241; aliasName();
				State = 243;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 242; Match(Comma);
					}
				}

				}
			}

			State = 247; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDefaultContext : ParserRuleContext {
		public AliasNameContext aliasName() {
			return GetRuleContext<AliasNameContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(JavaScriptParser.Comma, 0); }
		public ImportDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDefault; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportDefault(this);
		}
	}

	[RuleVersion(0)]
	public ImportDefaultContext importDefault() {
		ImportDefaultContext _localctx = new ImportDefaultContext(Context, State);
		EnterRule(_localctx, 16, RULE_importDefault);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; aliasName();
			State = 250; Match(Comma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportNamespaceContext : ParserRuleContext {
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public ImportNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importNamespace; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportNamespace(this);
		}
	}

	[RuleVersion(0)]
	public ImportNamespaceContext importNamespace() {
		ImportNamespaceContext _localctx = new ImportNamespaceContext(Context, State);
		EnterRule(_localctx, 18, RULE_importNamespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
				{
				State = 252; Match(Multiply);
				}
				break;
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				{
				State = 253; identifierName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 256; Match(As);
				State = 257; identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportFromContext : ParserRuleContext {
		public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ImportFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importFrom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportFrom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportFrom(this);
		}
	}

	[RuleVersion(0)]
	public ImportFromContext importFrom() {
		ImportFromContext _localctx = new ImportFromContext(Context, State);
		EnterRule(_localctx, 20, RULE_importFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260; Match(From);
			State = 261; Match(StringLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasNameContext : ParserRuleContext {
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public AliasNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAliasName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAliasName(this);
		}
	}

	[RuleVersion(0)]
	public AliasNameContext aliasName() {
		AliasNameContext _localctx = new AliasNameContext(Context, State);
		EnterRule(_localctx, 22, RULE_aliasName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; identifierName();
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==As) {
				{
				State = 264; Match(As);
				State = 265; identifierName();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
	 
		public ExportStatementContext() { }
		public virtual void CopyFrom(ExportStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExportDefaultDeclarationContext : ExportStatementContext {
		public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExportDefaultDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDefaultDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDefaultDeclaration(this);
		}
	}
	public partial class ExportDeclarationContext : ExportStatementContext {
		public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExportFromBlockContext exportFromBlock() {
			return GetRuleContext<ExportFromBlockContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExportDeclarationContext(ExportStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 24, RULE_exportStatement);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				_localctx = new ExportDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; Match(Export);
				State = 271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 269; exportFromBlock();
					}
					break;
				case 2:
					{
					State = 270; declaration();
					}
					break;
				}
				State = 273; eos();
				}
				break;
			case 2:
				_localctx = new ExportDefaultDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; Match(Export);
				State = 276; Match(Default);
				State = 277; singleExpression(0);
				State = 278; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportFromBlockContext : ParserRuleContext {
		public ImportNamespaceContext importNamespace() {
			return GetRuleContext<ImportNamespaceContext>(0);
		}
		public ImportFromContext importFrom() {
			return GetRuleContext<ImportFromContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ModuleItemsContext moduleItems() {
			return GetRuleContext<ModuleItemsContext>(0);
		}
		public ExportFromBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportFromBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExportFromBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExportFromBlock(this);
		}
	}

	[RuleVersion(0)]
	public ExportFromBlockContext exportFromBlock() {
		ExportFromBlockContext _localctx = new ExportFromBlockContext(Context, State);
		EnterRule(_localctx, 26, RULE_exportFromBlock);
		try {
			State = 292;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Multiply:
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282; importNamespace();
				State = 283; importFrom();
				State = 284; eos();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 286; moduleItems();
				State = 288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
				case 1:
					{
					State = 287; importFrom();
					}
					break;
				}
				State = 290; eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public VariableStatementContext variableStatement() {
			return GetRuleContext<VariableStatementContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_declaration);
		try {
			State = 297;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
			case Const:
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 1);
				{
				State = 294; variableStatement();
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 2);
				{
				State = 295; classDeclaration();
				}
				break;
			case Function:
			case Async:
				EnterOuterAlt(_localctx, 3);
				{
				State = 296; functionDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableStatementContext : ParserRuleContext {
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public VariableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableStatement(this);
		}
	}

	[RuleVersion(0)]
	public VariableStatementContext variableStatement() {
		VariableStatementContext _localctx = new VariableStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_variableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; variableDeclarationList();
			State = 300; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		public VarModifierContext varModifier() {
			return GetRuleContext<VarModifierContext>(0);
		}
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 32, RULE_variableDeclarationList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; varModifier();
			State = 303; variableDeclaration();
			State = 308;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 304; Match(Comma);
					State = 305; variableDeclaration();
					}
					} 
				}
				State = 310;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 34, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; assignable();
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 312; Match(Assign);
				State = 313; singleExpression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyStatementContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		public EmptyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
	}

	[RuleVersion(0)]
	public EmptyStatementContext emptyStatement() {
		EmptyStatementContext _localctx = new EmptyStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_emptyStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316; Match(SemiColon);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 318;
			if (!(this.notOpenBraceAndNotFunction())) throw new FailedPredicateException(this, "this.notOpenBraceAndNotFunction()");
			State = 319; expressionSequence();
			State = 320; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322; Match(If);
			State = 323; Match(OpenParen);
			State = 324; expressionSequence();
			State = 325; Match(CloseParen);
			State = 326; statement();
			State = 329;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 327; Match(Else);
				State = 328; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DoStatementContext : IterationStatementContext {
		public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DoStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}
	public partial class WhileStatementContext : IterationStatementContext {
		public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode[] SemiColon() { return GetTokens(JavaScriptParser.SemiColon); }
		public ITerminalNode SemiColon(int i) {
			return GetToken(JavaScriptParser.SemiColon, i);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionSequenceContext[] expressionSequence() {
			return GetRuleContexts<ExpressionSequenceContext>();
		}
		public ExpressionSequenceContext expressionSequence(int i) {
			return GetRuleContext<ExpressionSequenceContext>(i);
		}
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}
	public partial class ForInStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ForInStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForInStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForInStatement(this);
		}
	}
	public partial class ForOfStatementContext : IterationStatementContext {
		public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public ForOfStatementContext(IterationStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterForOfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitForOfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_iterationStatement);
		int _la;
		try {
			State = 387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 331; Match(Do);
				State = 332; statement();
				State = 333; Match(While);
				State = 334; Match(OpenParen);
				State = 335; expressionSequence();
				State = 336; Match(CloseParen);
				State = 337; eos();
				}
				break;
			case 2:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 339; Match(While);
				State = 340; Match(OpenParen);
				State = 341; expressionSequence();
				State = 342; Match(CloseParen);
				State = 343; statement();
				}
				break;
			case 3:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 345; Match(For);
				State = 346; Match(OpenParen);
				State = 349;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
				case 1:
					{
					State = 347; expressionSequence();
					}
					break;
				case 2:
					{
					State = 348; variableDeclarationList();
					}
					break;
				}
				State = 351; Match(SemiColon);
				State = 353;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << OpenTag) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OctalIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
					{
					State = 352; expressionSequence();
					}
				}

				State = 355; Match(SemiColon);
				State = 357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << OpenTag) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OctalIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
					{
					State = 356; expressionSequence();
					}
				}

				State = 359; Match(CloseParen);
				State = 360; statement();
				}
				break;
			case 4:
				_localctx = new ForInStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 361; Match(For);
				State = 362; Match(OpenParen);
				State = 365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 363; singleExpression(0);
					}
					break;
				case 2:
					{
					State = 364; variableDeclarationList();
					}
					break;
				}
				State = 367; Match(In);
				State = 368; expressionSequence();
				State = 369; Match(CloseParen);
				State = 370; statement();
				}
				break;
			case 5:
				_localctx = new ForOfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 372; Match(For);
				State = 374;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Await) {
					{
					State = 373; Match(Await);
					}
				}

				State = 376; Match(OpenParen);
				State = 379;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 377; singleExpression(0);
					}
					break;
				case 2:
					{
					State = 378; variableDeclarationList();
					}
					break;
				}
				State = 381; identifier();
				State = 382;
				if (!(this.p("of"))) throw new FailedPredicateException(this, "this.p(\"of\")");
				State = 383; expressionSequence();
				State = 384; Match(CloseParen);
				State = 385; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarModifierContext : ParserRuleContext {
		public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		public VarModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVarModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVarModifier(this);
		}
	}

	[RuleVersion(0)]
	public VarModifierContext varModifier() {
		VarModifierContext _localctx = new VarModifierContext(Context, State);
		EnterRule(_localctx, 44, RULE_varModifier);
		try {
			State = 392;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Var:
				EnterOuterAlt(_localctx, 1);
				{
				State = 389; Match(Var);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 2);
				{
				State = 390; let();
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 3);
				{
				State = 391; Match(Const);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; Match(Continue);
			State = 397;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				State = 395;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 396; identifier();
				}
				break;
			}
			State = 399; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 401; Match(Break);
			State = 404;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
			case 1:
				{
				State = 402;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 403; identifier();
				}
				break;
			}
			State = 406; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public HtmlElementsContext htmlElements() {
			return GetRuleContext<HtmlElementsContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_returnStatement);
		try {
			State = 420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 408; Match(Return);
				State = 411;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
				case 1:
					{
					State = 409;
					if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
					State = 410; expressionSequence();
					}
					break;
				}
				State = 413; eos();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 414; Match(Return);
				State = 415; Match(OpenParen);
				State = 416; htmlElements();
				State = 417; Match(CloseParen);
				State = 418; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class YieldStatementContext : ParserRuleContext {
		public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public YieldStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yieldStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
	}

	[RuleVersion(0)]
	public YieldStatementContext yieldStatement() {
		YieldStatementContext _localctx = new YieldStatementContext(Context, State);
		EnterRule(_localctx, 52, RULE_yieldStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 422; Match(Yield);
			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				{
				State = 423;
				if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
				State = 424; expressionSequence();
				}
				break;
			}
			State = 427; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithStatementContext : ParserRuleContext {
		public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WithStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterWithStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitWithStatement(this);
		}
	}

	[RuleVersion(0)]
	public WithStatementContext withStatement() {
		WithStatementContext _localctx = new WithStatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_withStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 429; Match(With);
			State = 430; Match(OpenParen);
			State = 431; expressionSequence();
			State = 432; Match(CloseParen);
			State = 433; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchStatementContext : ParserRuleContext {
		public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public CaseBlockContext caseBlock() {
			return GetRuleContext<CaseBlockContext>(0);
		}
		public SwitchStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}

	[RuleVersion(0)]
	public SwitchStatementContext switchStatement() {
		SwitchStatementContext _localctx = new SwitchStatementContext(Context, State);
		EnterRule(_localctx, 56, RULE_switchStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 435; Match(Switch);
			State = 436; Match(OpenParen);
			State = 437; expressionSequence();
			State = 438; Match(CloseParen);
			State = 439; caseBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseBlockContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public CaseClausesContext[] caseClauses() {
			return GetRuleContexts<CaseClausesContext>();
		}
		public CaseClausesContext caseClauses(int i) {
			return GetRuleContext<CaseClausesContext>(i);
		}
		public DefaultClauseContext defaultClause() {
			return GetRuleContext<DefaultClauseContext>(0);
		}
		public CaseBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseBlock(this);
		}
	}

	[RuleVersion(0)]
	public CaseBlockContext caseBlock() {
		CaseBlockContext _localctx = new CaseBlockContext(Context, State);
		EnterRule(_localctx, 58, RULE_caseBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 441; Match(OpenBrace);
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Case) {
				{
				State = 442; caseClauses();
				}
			}

			State = 449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Default) {
				{
				State = 445; defaultClause();
				State = 447;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Case) {
					{
					State = 446; caseClauses();
					}
				}

				}
			}

			State = 451; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClausesContext : ParserRuleContext {
		public CaseClauseContext[] caseClause() {
			return GetRuleContexts<CaseClauseContext>();
		}
		public CaseClauseContext caseClause(int i) {
			return GetRuleContext<CaseClauseContext>(i);
		}
		public CaseClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClauses(this);
		}
	}

	[RuleVersion(0)]
	public CaseClausesContext caseClauses() {
		CaseClausesContext _localctx = new CaseClausesContext(Context, State);
		EnterRule(_localctx, 60, RULE_caseClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 453; caseClause();
				}
				}
				State = 456;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Case );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseClauseContext : ParserRuleContext {
		public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public CaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCaseClause(this);
		}
	}

	[RuleVersion(0)]
	public CaseClauseContext caseClause() {
		CaseClauseContext _localctx = new CaseClauseContext(Context, State);
		EnterRule(_localctx, 62, RULE_caseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 458; Match(Case);
			State = 459; expressionSequence();
			State = 460; Match(Colon);
			State = 462;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 461; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultClauseContext : ParserRuleContext {
		public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public DefaultClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDefaultClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDefaultClause(this);
		}
	}

	[RuleVersion(0)]
	public DefaultClauseContext defaultClause() {
		DefaultClauseContext _localctx = new DefaultClauseContext(Context, State);
		EnterRule(_localctx, 64, RULE_defaultClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 464; Match(Default);
			State = 465; Match(Colon);
			State = 467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				{
				State = 466; statementList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelledStatementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabelledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelledStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLabelledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLabelledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabelledStatementContext labelledStatement() {
		LabelledStatementContext _localctx = new LabelledStatementContext(Context, State);
		EnterRule(_localctx, 66, RULE_labelledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 469; identifier();
			State = 470; Match(Colon);
			State = 471; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 68, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; Match(Throw);
			State = 474;
			if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
			State = 475; expressionSequence();
			State = 476; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryStatementContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchProductionContext catchProduction() {
			return GetRuleContext<CatchProductionContext>(0);
		}
		public FinallyProductionContext finallyProduction() {
			return GetRuleContext<FinallyProductionContext>(0);
		}
		public TryStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}

	[RuleVersion(0)]
	public TryStatementContext tryStatement() {
		TryStatementContext _localctx = new TryStatementContext(Context, State);
		EnterRule(_localctx, 70, RULE_tryStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 478; Match(Try);
			State = 479; block();
			State = 485;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Catch:
				{
				State = 480; catchProduction();
				State = 482;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 481; finallyProduction();
					}
					break;
				}
				}
				break;
			case Finally:
				{
				State = 484; finallyProduction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchProductionContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public CatchProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchProduction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCatchProduction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCatchProduction(this);
		}
	}

	[RuleVersion(0)]
	public CatchProductionContext catchProduction() {
		CatchProductionContext _localctx = new CatchProductionContext(Context, State);
		EnterRule(_localctx, 72, RULE_catchProduction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 487; Match(Catch);
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OpenParen) {
				{
				State = 488; Match(OpenParen);
				State = 490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OpenBracket || _la==OpenBrace || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (Async - 106)) | (1L << (NonStrictLet - 106)) | (1L << (Identifier - 106)))) != 0)) {
					{
					State = 489; assignable();
					}
				}

				State = 492; Match(CloseParen);
				}
			}

			State = 495; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyProductionContext : ParserRuleContext {
		public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyProductionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyProduction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFinallyProduction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFinallyProduction(this);
		}
	}

	[RuleVersion(0)]
	public FinallyProductionContext finallyProduction() {
		FinallyProductionContext _localctx = new FinallyProductionContext(Context, State);
		EnterRule(_localctx, 74, RULE_finallyProduction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(Finally);
			State = 498; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DebuggerStatementContext : ParserRuleContext {
		public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public DebuggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_debuggerStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDebuggerStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDebuggerStatement(this);
		}
	}

	[RuleVersion(0)]
	public DebuggerStatementContext debuggerStatement() {
		DebuggerStatementContext _localctx = new DebuggerStatementContext(Context, State);
		EnterRule(_localctx, 76, RULE_debuggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; Match(Debugger);
			State = 501; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		public ITerminalNode Function() { return GetToken(JavaScriptParser.Function, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 78, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Async) {
				{
				State = 503; Match(Async);
				}
			}

			State = 506; Match(Function);
			State = 508;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Multiply) {
				{
				State = 507; Match(Multiply);
				}
			}

			State = 510; identifier();
			State = 511; Match(OpenParen);
			State = 513;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (Async - 106)) | (1L << (NonStrictLet - 106)) | (1L << (Identifier - 106)))) != 0)) {
				{
				State = 512; formalParameterList();
				}
			}

			State = 515; Match(CloseParen);
			State = 516; Match(OpenBrace);
			State = 517; functionBody();
			State = 518; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 80, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520; Match(Class);
			State = 521; identifier();
			State = 522; classTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTailContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ClassElementContext[] classElement() {
			return GetRuleContexts<ClassElementContext>();
		}
		public ClassElementContext classElement(int i) {
			return GetRuleContext<ClassElementContext>(i);
		}
		public ClassTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classTail; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassTail(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassTail(this);
		}
	}

	[RuleVersion(0)]
	public ClassTailContext classTail() {
		ClassTailContext _localctx = new ClassTailContext(Context, State);
		EnterRule(_localctx, 82, RULE_classTail);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extends) {
				{
				State = 524; Match(Extends);
				State = 525; singleExpression(0);
				}
			}

			State = 528; Match(OpenBrace);
			State = 532;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 529; classElement();
					}
					} 
				}
				State = 534;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,49,Context);
			}
			State = 535; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassElementContext : ParserRuleContext {
		public MethodDefinitionContext methodDefinition() {
			return GetRuleContext<MethodDefinitionContext>(0);
		}
		public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		public ITerminalNode[] Static() { return GetTokens(JavaScriptParser.Static); }
		public ITerminalNode Static(int i) {
			return GetToken(JavaScriptParser.Static, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] Async() { return GetTokens(JavaScriptParser.Async); }
		public ITerminalNode Async(int i) {
			return GetToken(JavaScriptParser.Async, i);
		}
		public EmptyStatementContext emptyStatement() {
			return GetRuleContext<EmptyStatementContext>(0);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		public ClassElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassElement(this);
		}
	}

	[RuleVersion(0)]
	public ClassElementContext classElement() {
		ClassElementContext _localctx = new ClassElementContext(Context, State);
		EnterRule(_localctx, 84, RULE_classElement);
		int _la;
		try {
			int _alt;
			State = 562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						State = 541;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
						case 1:
							{
							State = 537; Match(Static);
							}
							break;
						case 2:
							{
							State = 538;
							if (!(this.n("static"))) throw new FailedPredicateException(this, "this.n(\"static\")");
							State = 539; identifier();
							}
							break;
						case 3:
							{
							State = 540; Match(Async);
							}
							break;
						}
						} 
					}
					State = 545;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
				}
				State = 552;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 546; methodDefinition();
					}
					break;
				case 2:
					{
					State = 547; assignable();
					State = 548; Match(Assign);
					State = 549; objectLiteral();
					State = 550; Match(SemiColon);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 554; emptyStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 556;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Hashtag) {
					{
					State = 555; Match(Hashtag);
					}
				}

				State = 558; propertyName();
				State = 559; Match(Assign);
				State = 560; singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDefinitionContext : ParserRuleContext {
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		public MethodDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMethodDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMethodDefinition(this);
		}
	}

	[RuleVersion(0)]
	public MethodDefinitionContext methodDefinition() {
		MethodDefinitionContext _localctx = new MethodDefinitionContext(Context, State);
		EnterRule(_localctx, 86, RULE_methodDefinition);
		int _la;
		try {
			State = 609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 565;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 564; Match(Multiply);
					}
				}

				State = 568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Hashtag) {
					{
					State = 567; Match(Hashtag);
					}
				}

				State = 570; propertyName();
				State = 571; Match(OpenParen);
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (Async - 106)) | (1L << (NonStrictLet - 106)) | (1L << (Identifier - 106)))) != 0)) {
					{
					State = 572; formalParameterList();
					}
				}

				State = 575; Match(CloseParen);
				State = 576; Match(OpenBrace);
				State = 577; functionBody();
				State = 578; Match(CloseBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 581;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 580; Match(Multiply);
					}
				}

				State = 584;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Hashtag) {
					{
					State = 583; Match(Hashtag);
					}
				}

				State = 586; getter();
				State = 587; Match(OpenParen);
				State = 588; Match(CloseParen);
				State = 589; Match(OpenBrace);
				State = 590; functionBody();
				State = 591; Match(CloseBrace);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 594;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 593; Match(Multiply);
					}
				}

				State = 597;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Hashtag) {
					{
					State = 596; Match(Hashtag);
					}
				}

				State = 599; setter();
				State = 600; Match(OpenParen);
				State = 602;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (Async - 106)) | (1L << (NonStrictLet - 106)) | (1L << (Identifier - 106)))) != 0)) {
					{
					State = 601; formalParameterList();
					}
				}

				State = 604; Match(CloseParen);
				State = 605; Match(OpenBrace);
				State = 606; functionBody();
				State = 607; Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterArgContext[] formalParameterArg() {
			return GetRuleContexts<FormalParameterArgContext>();
		}
		public FormalParameterArgContext formalParameterArg(int i) {
			return GetRuleContext<FormalParameterArgContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public LastFormalParameterArgContext lastFormalParameterArg() {
			return GetRuleContext<LastFormalParameterArgContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 88, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBracket:
			case OpenBrace:
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 611; formalParameterArg();
				State = 616;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 612; Match(Comma);
						State = 613; formalParameterArg();
						}
						} 
					}
					State = 618;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
				}
				State = 621;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 619; Match(Comma);
					State = 620; lastFormalParameterArg();
					}
				}

				}
				break;
			case Ellipsis:
				EnterOuterAlt(_localctx, 2);
				{
				State = 623; lastFormalParameterArg();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterArgContext : ParserRuleContext {
		public AssignableContext assignable() {
			return GetRuleContext<AssignableContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public FormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterArg(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterArgContext formalParameterArg() {
		FormalParameterArgContext _localctx = new FormalParameterArgContext(Context, State);
		EnterRule(_localctx, 90, RULE_formalParameterArg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 626; assignable();
			State = 629;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 627; Match(Assign);
				State = 628; singleExpression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterArgContext : ParserRuleContext {
		public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public LastFormalParameterArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameterArg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameterArg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameterArg(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterArgContext lastFormalParameterArg() {
		LastFormalParameterArgContext _localctx = new LastFormalParameterArgContext(Context, State);
		EnterRule(_localctx, 92, RULE_lastFormalParameterArg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; Match(Ellipsis);
			State = 632; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public SourceElementsContext sourceElements() {
			return GetRuleContext<SourceElementsContext>(0);
		}
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext functionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 94, RULE_functionBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				{
				State = 634; sourceElements();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceElementsContext : ParserRuleContext {
		public SourceElementContext[] sourceElement() {
			return GetRuleContexts<SourceElementContext>();
		}
		public SourceElementContext sourceElement(int i) {
			return GetRuleContext<SourceElementContext>(i);
		}
		public SourceElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSourceElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSourceElements(this);
		}
	}

	[RuleVersion(0)]
	public SourceElementsContext sourceElements() {
		SourceElementsContext _localctx = new SourceElementsContext(Context, State);
		EnterRule(_localctx, 96, RULE_sourceElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 638;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 637; sourceElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 640;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayLiteralContext : ParserRuleContext {
		public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		public ElementListContext elementList() {
			return GetRuleContext<ElementListContext>(0);
		}
		public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public ArrayLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ArrayLiteralContext arrayLiteral() {
		ArrayLiteralContext _localctx = new ArrayLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_arrayLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 642; Match(OpenBracket);
			State = 643; elementList();
			State = 644; Match(CloseBracket);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementListContext : ParserRuleContext {
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterElementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitElementList(this);
		}
	}

	[RuleVersion(0)]
	public ElementListContext elementList() {
		ElementListContext _localctx = new ElementListContext(Context, State);
		EnterRule(_localctx, 100, RULE_elementList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 646; Match(Comma);
					}
					} 
				}
				State = 651;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			State = 653;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << OpenTag) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OctalIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
				{
				State = 652; arrayElement();
				}
			}

			State = 663;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 656;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 655; Match(Comma);
						}
						}
						State = 658;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Comma );
					State = 660; arrayElement();
					}
					} 
				}
				State = 665;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,73,Context);
			}
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 666; Match(Comma);
				}
				}
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(Context, State);
		EnterRule(_localctx, 102, RULE_arrayElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 672; Match(Ellipsis);
				}
			}

			State = 675; singleExpression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAssignmentContext : ParserRuleContext {
		public PropertyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAssignment; } }
	 
		public PropertyAssignmentContext() { }
		public virtual void CopyFrom(PropertyAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PropertyExpressionAssignmentContext : PropertyAssignmentContext {
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyExpressionAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyExpressionAssignment(this);
		}
	}
	public partial class ComputedPropertyExpressionAssignmentContext : PropertyAssignmentContext {
		public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterComputedPropertyExpressionAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitComputedPropertyExpressionAssignment(this);
		}
	}
	public partial class PropertyShorthandContext : PropertyAssignmentContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public PropertyShorthandContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyShorthand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyShorthand(this);
		}
	}
	public partial class PropertySetterContext : PropertyAssignmentContext {
		public SetterContext setter() {
			return GetRuleContext<SetterContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public FormalParameterArgContext formalParameterArg() {
			return GetRuleContext<FormalParameterArgContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public PropertySetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertySetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertySetter(this);
		}
	}
	public partial class PropertyGetterContext : PropertyAssignmentContext {
		public GetterContext getter() {
			return GetRuleContext<GetterContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public PropertyGetterContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyGetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyGetter(this);
		}
	}
	public partial class FunctionPropertyContext : PropertyAssignmentContext {
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FunctionPropertyContext(PropertyAssignmentContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAssignmentContext propertyAssignment() {
		PropertyAssignmentContext _localctx = new PropertyAssignmentContext(Context, State);
		EnterRule(_localctx, 104, RULE_propertyAssignment);
		int _la;
		try {
			State = 722;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				_localctx = new PropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 677; propertyName();
				State = 678; Match(Colon);
				State = 679; singleExpression(0);
				}
				break;
			case 2:
				_localctx = new ComputedPropertyExpressionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 681; Match(OpenBracket);
				State = 682; singleExpression(0);
				State = 683; Match(CloseBracket);
				State = 684; Match(Colon);
				State = 685; singleExpression(0);
				}
				break;
			case 3:
				_localctx = new FunctionPropertyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 688;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 687; Match(Async);
					}
					break;
				}
				State = 691;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 690; Match(Multiply);
					}
				}

				State = 693; propertyName();
				State = 694; Match(OpenParen);
				State = 696;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (Async - 106)) | (1L << (NonStrictLet - 106)) | (1L << (Identifier - 106)))) != 0)) {
					{
					State = 695; formalParameterList();
					}
				}

				State = 698; Match(CloseParen);
				State = 699; Match(OpenBrace);
				State = 700; functionBody();
				State = 701; Match(CloseBrace);
				}
				break;
			case 4:
				_localctx = new PropertyGetterContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 703; getter();
				State = 704; Match(OpenParen);
				State = 705; Match(CloseParen);
				State = 706; Match(OpenBrace);
				State = 707; functionBody();
				State = 708; Match(CloseBrace);
				}
				break;
			case 5:
				_localctx = new PropertySetterContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 710; setter();
				State = 711; Match(OpenParen);
				State = 712; formalParameterArg();
				State = 713; Match(CloseParen);
				State = 714; Match(OpenBrace);
				State = 715; functionBody();
				State = 716; Match(CloseBrace);
				}
				break;
			case 6:
				_localctx = new PropertyShorthandContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 719;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 718; Match(Ellipsis);
					}
				}

				State = 721; singleExpression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyNameContext : ParserRuleContext {
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public PropertyNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPropertyName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPropertyName(this);
		}
	}

	[RuleVersion(0)]
	public PropertyNameContext propertyName() {
		PropertyNameContext _localctx = new PropertyNameContext(Context, State);
		EnterRule(_localctx, 106, RULE_propertyName);
		try {
			State = 731;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
			case BooleanLiteral:
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 724; identifierName();
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 725; Match(StringLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 726; numericLiteral();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 4);
				{
				State = 727; Match(OpenBracket);
				State = 728; singleExpression(0);
				State = 729; Match(CloseBracket);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 108, RULE_arguments);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; Match(OpenParen);
			State = 745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << OpenTag) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OctalIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Typeof - 64)) | (1L << (New - 64)) | (1L << (Void - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (Delete - 64)) | (1L << (Class - 64)) | (1L << (Super - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
				{
				State = 734; argument();
				State = 739;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 735; Match(Comma);
						State = 736; argument();
						}
						} 
					}
					State = 741;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,82,Context);
				}
				State = 743;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 742; Match(Comma);
					}
				}

				}
			}

			State = 747; Match(CloseParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(JavaScriptParser.Ellipsis, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 110, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 750;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 749; Match(Ellipsis);
				}
			}

			State = 754;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				{
				State = 752; singleExpression(0);
				}
				break;
			case 2:
				{
				State = 753; identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionSequenceContext : ParserRuleContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionSequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterExpressionSequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitExpressionSequence(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionSequenceContext expressionSequence() {
		ExpressionSequenceContext _localctx = new ExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 112, RULE_expressionSequence);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 756; singleExpression(0);
			State = 761;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 757; Match(Comma);
					State = 758; singleExpression(0);
					}
					} 
				}
				State = 763;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,87,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleExpressionContext : ParserRuleContext {
		public SingleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleExpression; } }
	 
		public SingleExpressionContext() { }
		public virtual void CopyFrom(SingleExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TemplateStringExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode TemplateStringLiteral() { return GetToken(JavaScriptParser.TemplateStringLiteral, 0); }
		public TemplateStringExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTemplateStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTemplateStringExpression(this);
		}
	}
	public partial class TernaryExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode QuestionMark() { return GetToken(JavaScriptParser.QuestionMark, 0); }
		public ITerminalNode Colon() { return GetToken(JavaScriptParser.Colon, 0); }
		public TernaryExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTernaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTernaryExpression(this);
		}
	}
	public partial class LogicalAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode And() { return GetToken(JavaScriptParser.And, 0); }
		public LogicalAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
	}
	public partial class PowerExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Power() { return GetToken(JavaScriptParser.Power, 0); }
		public PowerExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPowerExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPowerExpression(this);
		}
	}
	public partial class PreIncrementExpressionContext : SingleExpressionContext {
		public ITerminalNode PlusPlus() { return GetToken(JavaScriptParser.PlusPlus, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
	}
	public partial class ObjectLiteralExpressionContext : SingleExpressionContext {
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public ObjectLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteralExpression(this);
		}
	}
	public partial class MetaExpressionContext : SingleExpressionContext {
		public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		public ITerminalNode Dot() { return GetToken(JavaScriptParser.Dot, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MetaExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMetaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMetaExpression(this);
		}
	}
	public partial class InExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		public InExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
	}
	public partial class LogicalOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Or() { return GetToken(JavaScriptParser.Or, 0); }
		public LogicalOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
	}
	public partial class NotExpressionContext : SingleExpressionContext {
		public ITerminalNode Not() { return GetToken(JavaScriptParser.Not, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public NotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
	}
	public partial class PreDecreaseExpressionContext : SingleExpressionContext {
		public ITerminalNode MinusMinus() { return GetToken(JavaScriptParser.MinusMinus, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public PreDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPreDecreaseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPreDecreaseExpression(this);
		}
	}
	public partial class ArgumentsExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ArgumentsExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArgumentsExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArgumentsExpression(this);
		}
	}
	public partial class AwaitExpressionContext : SingleExpressionContext {
		public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public AwaitExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
	}
	public partial class ThisExpressionContext : SingleExpressionContext {
		public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		public ThisExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterThisExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitThisExpression(this);
		}
	}
	public partial class FunctionExpressionContext : SingleExpressionContext {
		public AnoymousFunctionContext anoymousFunction() {
			return GetRuleContext<AnoymousFunctionContext>(0);
		}
		public FunctionExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionExpression(this);
		}
	}
	public partial class UnaryMinusExpressionContext : SingleExpressionContext {
		public ITerminalNode Minus() { return GetToken(JavaScriptParser.Minus, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryMinusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Assign() { return GetToken(JavaScriptParser.Assign, 0); }
		public AssignmentExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class PostDecreaseExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode MinusMinus() { return GetToken(JavaScriptParser.MinusMinus, 0); }
		public PostDecreaseExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPostDecreaseExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPostDecreaseExpression(this);
		}
	}
	public partial class TypeofExpressionContext : SingleExpressionContext {
		public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public TypeofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
	}
	public partial class InstanceofExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		public InstanceofExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterInstanceofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitInstanceofExpression(this);
		}
	}
	public partial class UnaryPlusExpressionContext : SingleExpressionContext {
		public ITerminalNode Plus() { return GetToken(JavaScriptParser.Plus, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public UnaryPlusExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterUnaryPlusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitUnaryPlusExpression(this);
		}
	}
	public partial class DeleteExpressionContext : SingleExpressionContext {
		public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public DeleteExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
	}
	public partial class ImportExpressionContext : SingleExpressionContext {
		public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ImportExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterImportExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitImportExpression(this);
		}
	}
	public partial class EqualityExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Equals_() { return GetToken(JavaScriptParser.Equals_, 0); }
		public ITerminalNode NotEquals() { return GetToken(JavaScriptParser.NotEquals, 0); }
		public ITerminalNode IdentityEquals() { return GetToken(JavaScriptParser.IdentityEquals, 0); }
		public ITerminalNode IdentityNotEquals() { return GetToken(JavaScriptParser.IdentityNotEquals, 0); }
		public EqualityExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}
	public partial class BitXOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode BitXOr() { return GetToken(JavaScriptParser.BitXOr, 0); }
		public BitXOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitXOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitXOrExpression(this);
		}
	}
	public partial class SuperExpressionContext : SingleExpressionContext {
		public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		public SuperExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class MultiplicativeExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(JavaScriptParser.Divide, 0); }
		public ITerminalNode Modulus() { return GetToken(JavaScriptParser.Modulus, 0); }
		public MultiplicativeExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}
	public partial class HtmlElementExpressionContext : SingleExpressionContext {
		public HtmlElementsContext htmlElements() {
			return GetRuleContext<HtmlElementsContext>(0);
		}
		public HtmlElementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlElementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlElementExpression(this);
		}
	}
	public partial class BitShiftExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode LeftShiftArithmetic() { return GetToken(JavaScriptParser.LeftShiftArithmetic, 0); }
		public ITerminalNode RightShiftArithmetic() { return GetToken(JavaScriptParser.RightShiftArithmetic, 0); }
		public ITerminalNode RightShiftLogical() { return GetToken(JavaScriptParser.RightShiftLogical, 0); }
		public BitShiftExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitShiftExpression(this);
		}
	}
	public partial class ParenthesizedExpressionContext : SingleExpressionContext {
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ParenthesizedExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
	}
	public partial class AdditiveExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode Plus() { return GetToken(JavaScriptParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(JavaScriptParser.Minus, 0); }
		public AdditiveExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}
	public partial class RelationalExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode LessThan() { return GetToken(JavaScriptParser.LessThan, 0); }
		public ITerminalNode MoreThan() { return GetToken(JavaScriptParser.MoreThan, 0); }
		public ITerminalNode LessThanEquals() { return GetToken(JavaScriptParser.LessThanEquals, 0); }
		public ITerminalNode GreaterThanEquals() { return GetToken(JavaScriptParser.GreaterThanEquals, 0); }
		public RelationalExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}
	public partial class PostIncrementExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode PlusPlus() { return GetToken(JavaScriptParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterPostIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitPostIncrementExpression(this);
		}
	}
	public partial class YieldExpressionContext : SingleExpressionContext {
		public YieldStatementContext yieldStatement() {
			return GetRuleContext<YieldStatementContext>(0);
		}
		public YieldExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterYieldExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitYieldExpression(this);
		}
	}
	public partial class BitNotExpressionContext : SingleExpressionContext {
		public ITerminalNode BitNot() { return GetToken(JavaScriptParser.BitNot, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public BitNotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitNotExpression(this);
		}
	}
	public partial class NewExpressionContext : SingleExpressionContext {
		public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public NewExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}
	public partial class LiteralExpressionContext : SingleExpressionContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class ArrayLiteralExpressionContext : SingleExpressionContext {
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ArrayLiteralExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrayLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrayLiteralExpression(this);
		}
	}
	public partial class MemberDotExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode Dot() { return GetToken(JavaScriptParser.Dot, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode QuestionMark() { return GetToken(JavaScriptParser.QuestionMark, 0); }
		public ITerminalNode Hashtag() { return GetToken(JavaScriptParser.Hashtag, 0); }
		public MemberDotExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberDotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberDotExpression(this);
		}
	}
	public partial class ClassExpressionContext : SingleExpressionContext {
		public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		public ClassTailContext classTail() {
			return GetRuleContext<ClassTailContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterClassExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitClassExpression(this);
		}
	}
	public partial class MemberIndexExpressionContext : SingleExpressionContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode OpenBracket() { return GetToken(JavaScriptParser.OpenBracket, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseBracket() { return GetToken(JavaScriptParser.CloseBracket, 0); }
		public MemberIndexExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterMemberIndexExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitMemberIndexExpression(this);
		}
	}
	public partial class IdentifierExpressionContext : SingleExpressionContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
	}
	public partial class BitAndExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode BitAnd() { return GetToken(JavaScriptParser.BitAnd, 0); }
		public BitAndExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitAndExpression(this);
		}
	}
	public partial class BitOrExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode BitOr() { return GetToken(JavaScriptParser.BitOr, 0); }
		public BitOrExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBitOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBitOrExpression(this);
		}
	}
	public partial class AssignmentOperatorExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public AssignmentOperatorExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperatorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperatorExpression(this);
		}
	}
	public partial class VoidExpressionContext : SingleExpressionContext {
		public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public VoidExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterVoidExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitVoidExpression(this);
		}
	}
	public partial class CoalesceExpressionContext : SingleExpressionContext {
		public SingleExpressionContext[] singleExpression() {
			return GetRuleContexts<SingleExpressionContext>();
		}
		public SingleExpressionContext singleExpression(int i) {
			return GetRuleContext<SingleExpressionContext>(i);
		}
		public ITerminalNode NullCoalesce() { return GetToken(JavaScriptParser.NullCoalesce, 0); }
		public CoalesceExpressionContext(SingleExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterCoalesceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitCoalesceExpression(this);
		}
	}

	[RuleVersion(0)]
	public SingleExpressionContext singleExpression() {
		return singleExpression(0);
	}

	private SingleExpressionContext singleExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SingleExpressionContext _localctx = new SingleExpressionContext(Context, _parentState);
		SingleExpressionContext _prevctx = _localctx;
		int _startState = 114;
		EnterRecursionRule(_localctx, 114, RULE_singleExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 765; anoymousFunction();
				}
				break;
			case 2:
				{
				_localctx = new ClassExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 766; Match(Class);
				State = 768;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (Async - 106)) | (1L << (NonStrictLet - 106)) | (1L << (Identifier - 106)))) != 0)) {
					{
					State = 767; identifier();
					}
				}

				State = 770; classTail();
				}
				break;
			case 3:
				{
				_localctx = new NewExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 771; Match(New);
				State = 772; singleExpression(0);
				State = 774;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
				case 1:
					{
					State = 773; arguments();
					}
					break;
				}
				}
				break;
			case 4:
				{
				_localctx = new MetaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 776; Match(New);
				State = 777; Match(Dot);
				State = 778; identifier();
				}
				break;
			case 5:
				{
				_localctx = new DeleteExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 779; Match(Delete);
				State = 780; singleExpression(38);
				}
				break;
			case 6:
				{
				_localctx = new VoidExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 781; Match(Void);
				State = 782; singleExpression(37);
				}
				break;
			case 7:
				{
				_localctx = new TypeofExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 783; Match(Typeof);
				State = 784; singleExpression(36);
				}
				break;
			case 8:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 785; Match(PlusPlus);
				State = 786; singleExpression(35);
				}
				break;
			case 9:
				{
				_localctx = new PreDecreaseExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 787; Match(MinusMinus);
				State = 788; singleExpression(34);
				}
				break;
			case 10:
				{
				_localctx = new UnaryPlusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 789; Match(Plus);
				State = 790; singleExpression(33);
				}
				break;
			case 11:
				{
				_localctx = new UnaryMinusExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 791; Match(Minus);
				State = 792; singleExpression(32);
				}
				break;
			case 12:
				{
				_localctx = new BitNotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 793; Match(BitNot);
				State = 794; singleExpression(31);
				}
				break;
			case 13:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 795; Match(Not);
				State = 796; singleExpression(30);
				}
				break;
			case 14:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 797; Match(Await);
				State = 798; singleExpression(29);
				}
				break;
			case 15:
				{
				_localctx = new ImportExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 799; Match(Import);
				State = 800; Match(OpenParen);
				State = 801; singleExpression(0);
				State = 802; Match(CloseParen);
				}
				break;
			case 16:
				{
				_localctx = new YieldExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 804; yieldStatement();
				}
				break;
			case 17:
				{
				_localctx = new ThisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 805; Match(This);
				}
				break;
			case 18:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 806; identifier();
				}
				break;
			case 19:
				{
				_localctx = new SuperExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 807; Match(Super);
				}
				break;
			case 20:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 808; literal();
				}
				break;
			case 21:
				{
				_localctx = new ArrayLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 809; arrayLiteral();
				}
				break;
			case 22:
				{
				_localctx = new ObjectLiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 810; objectLiteral();
				}
				break;
			case 23:
				{
				_localctx = new HtmlElementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 811; htmlElements();
				}
				break;
			case 24:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 812; Match(OpenParen);
				State = 813; expressionSequence();
				State = 814; Match(CloseParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 899;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 897;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
					case 1:
						{
						_localctx = new PowerExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 818;
						if (!(Precpred(Context, 28))) throw new FailedPredicateException(this, "Precpred(Context, 28)");
						State = 819; Match(Power);
						State = 820; singleExpression(28);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 821;
						if (!(Precpred(Context, 27))) throw new FailedPredicateException(this, "Precpred(Context, 27)");
						State = 822;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Modulus))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 823; singleExpression(28);
						}
						break;
					case 3:
						{
						_localctx = new AdditiveExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 824;
						if (!(Precpred(Context, 26))) throw new FailedPredicateException(this, "Precpred(Context, 26)");
						State = 825;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 826; singleExpression(27);
						}
						break;
					case 4:
						{
						_localctx = new CoalesceExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 827;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 828; Match(NullCoalesce);
						State = 829; singleExpression(26);
						}
						break;
					case 5:
						{
						_localctx = new BitShiftExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 830;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 831;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RightShiftArithmetic) | (1L << LeftShiftArithmetic) | (1L << RightShiftLogical))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 832; singleExpression(25);
						}
						break;
					case 6:
						{
						_localctx = new RelationalExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 833;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 834;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LessThan) | (1L << MoreThan) | (1L << LessThanEquals) | (1L << GreaterThanEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 835; singleExpression(24);
						}
						break;
					case 7:
						{
						_localctx = new InstanceofExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 836;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 837; Match(Instanceof);
						State = 838; singleExpression(23);
						}
						break;
					case 8:
						{
						_localctx = new InExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 839;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 840; Match(In);
						State = 841; singleExpression(22);
						}
						break;
					case 9:
						{
						_localctx = new EqualityExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 842;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 843;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals_) | (1L << NotEquals) | (1L << IdentityEquals) | (1L << IdentityNotEquals))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 844; singleExpression(21);
						}
						break;
					case 10:
						{
						_localctx = new BitAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 845;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 846; Match(BitAnd);
						State = 847; singleExpression(20);
						}
						break;
					case 11:
						{
						_localctx = new BitXOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 848;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 849; Match(BitXOr);
						State = 850; singleExpression(19);
						}
						break;
					case 12:
						{
						_localctx = new BitOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 851;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 852; Match(BitOr);
						State = 853; singleExpression(18);
						}
						break;
					case 13:
						{
						_localctx = new LogicalAndExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 854;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 855; Match(And);
						State = 856; singleExpression(17);
						}
						break;
					case 14:
						{
						_localctx = new LogicalOrExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 857;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 858; Match(Or);
						State = 859; singleExpression(16);
						}
						break;
					case 15:
						{
						_localctx = new TernaryExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 860;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 861; Match(QuestionMark);
						State = 862; singleExpression(0);
						State = 863; Match(Colon);
						State = 864; singleExpression(15);
						}
						break;
					case 16:
						{
						_localctx = new AssignmentExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 866;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 867; Match(Assign);
						State = 868; singleExpression(13);
						}
						break;
					case 17:
						{
						_localctx = new AssignmentOperatorExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 869;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 870; assignmentOperator();
						State = 871; singleExpression(12);
						}
						break;
					case 18:
						{
						_localctx = new MemberIndexExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 873;
						if (!(Precpred(Context, 45))) throw new FailedPredicateException(this, "Precpred(Context, 45)");
						State = 874; Match(OpenBracket);
						State = 875; expressionSequence();
						State = 876; Match(CloseBracket);
						}
						break;
					case 19:
						{
						_localctx = new MemberDotExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 878;
						if (!(Precpred(Context, 44))) throw new FailedPredicateException(this, "Precpred(Context, 44)");
						State = 880;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==QuestionMark) {
							{
							State = 879; Match(QuestionMark);
							}
						}

						State = 882; Match(Dot);
						State = 884;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Hashtag) {
							{
							State = 883; Match(Hashtag);
							}
						}

						State = 886; identifierName();
						}
						break;
					case 20:
						{
						_localctx = new ArgumentsExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 887;
						if (!(Precpred(Context, 43))) throw new FailedPredicateException(this, "Precpred(Context, 43)");
						State = 888; arguments();
						}
						break;
					case 21:
						{
						_localctx = new PostIncrementExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 889;
						if (!(Precpred(Context, 40))) throw new FailedPredicateException(this, "Precpred(Context, 40)");
						State = 890;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 891; Match(PlusPlus);
						}
						break;
					case 22:
						{
						_localctx = new PostDecreaseExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 892;
						if (!(Precpred(Context, 39))) throw new FailedPredicateException(this, "Precpred(Context, 39)");
						State = 893;
						if (!(this.notLineTerminator())) throw new FailedPredicateException(this, "this.notLineTerminator()");
						State = 894; Match(MinusMinus);
						}
						break;
					case 23:
						{
						_localctx = new TemplateStringExpressionContext(new SingleExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_singleExpression);
						State = 895;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 896; Match(TemplateStringLiteral);
						}
						break;
					}
					} 
				}
				State = 901;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class HtmlElementsContext : ParserRuleContext {
		public HtmlElementContext[] htmlElement() {
			return GetRuleContexts<HtmlElementContext>();
		}
		public HtmlElementContext htmlElement(int i) {
			return GetRuleContext<HtmlElementContext>(i);
		}
		public HtmlElementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElements; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlElements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlElements(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementsContext htmlElements() {
		HtmlElementsContext _localctx = new HtmlElementsContext(Context, State);
		EnterRule(_localctx, 116, RULE_htmlElements);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 903;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 902; htmlElement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 905;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,95,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlElementContext : ParserRuleContext {
		public ITerminalNode[] OpenTag() { return GetTokens(JavaScriptParser.OpenTag); }
		public ITerminalNode OpenTag(int i) {
			return GetToken(JavaScriptParser.OpenTag, i);
		}
		public HtmlTagStartNameContext htmlTagStartName() {
			return GetRuleContext<HtmlTagStartNameContext>(0);
		}
		public ITerminalNode[] TagClose() { return GetTokens(JavaScriptParser.TagClose); }
		public ITerminalNode TagClose(int i) {
			return GetToken(JavaScriptParser.TagClose, i);
		}
		public HtmlContentContext htmlContent() {
			return GetRuleContext<HtmlContentContext>(0);
		}
		public ITerminalNode TagSlash() { return GetToken(JavaScriptParser.TagSlash, 0); }
		public HtmlTagClosingNameContext htmlTagClosingName() {
			return GetRuleContext<HtmlTagClosingNameContext>(0);
		}
		public HtmlAttributeContext[] htmlAttribute() {
			return GetRuleContexts<HtmlAttributeContext>();
		}
		public HtmlAttributeContext htmlAttribute(int i) {
			return GetRuleContext<HtmlAttributeContext>(i);
		}
		public HtmlTagNameContext htmlTagName() {
			return GetRuleContext<HtmlTagNameContext>(0);
		}
		public ITerminalNode TagSlashClose() { return GetToken(JavaScriptParser.TagSlashClose, 0); }
		public HtmlElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlElement(this);
		}
	}

	[RuleVersion(0)]
	public HtmlElementContext htmlElement() {
		HtmlElementContext _localctx = new HtmlElementContext(Context, State);
		EnterRule(_localctx, 118, RULE_htmlElement);
		int _la;
		try {
			int _alt;
			State = 943;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 907; Match(OpenTag);
				State = 908; htmlTagStartName();
				State = 912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TagName) {
					{
					{
					State = 909; htmlAttribute();
					}
					}
					State = 914;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 915; Match(TagClose);
				State = 916; htmlContent();
				State = 917; Match(OpenTag);
				State = 918; Match(TagSlash);
				State = 919; htmlTagClosingName();
				State = 920; Match(TagClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 922; Match(OpenTag);
				State = 923; htmlTagName();
				State = 927;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 924; htmlAttribute();
						}
						} 
					}
					State = 929;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,97,Context);
				}
				State = 930; htmlContent();
				State = 931; Match(TagSlashClose);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 933; Match(OpenTag);
				State = 934; htmlTagName();
				State = 938;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==TagName) {
					{
					{
					State = 935; htmlAttribute();
					}
					}
					State = 940;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 941; Match(TagSlashClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlContentContext : ParserRuleContext {
		public HtmlChardataContext[] htmlChardata() {
			return GetRuleContexts<HtmlChardataContext>();
		}
		public HtmlChardataContext htmlChardata(int i) {
			return GetRuleContext<HtmlChardataContext>(i);
		}
		public HtmlElementContext[] htmlElement() {
			return GetRuleContexts<HtmlElementContext>();
		}
		public HtmlElementContext htmlElement(int i) {
			return GetRuleContext<HtmlElementContext>(i);
		}
		public ObjectExpressionSequenceContext[] objectExpressionSequence() {
			return GetRuleContexts<ObjectExpressionSequenceContext>();
		}
		public ObjectExpressionSequenceContext objectExpressionSequence(int i) {
			return GetRuleContext<ObjectExpressionSequenceContext>(i);
		}
		public HtmlContentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlContent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlContent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlContent(this);
		}
	}

	[RuleVersion(0)]
	public HtmlContentContext htmlContent() {
		HtmlContentContext _localctx = new HtmlContentContext(Context, State);
		EnterRule(_localctx, 120, RULE_htmlContent);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 946;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 945; htmlChardata();
				}
				break;
			}
			State = 957;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 950;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OpenTag:
						{
						State = 948; htmlElement();
						}
						break;
					case OpenBrace:
						{
						State = 949; objectExpressionSequence();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 953;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
					case 1:
						{
						State = 952; htmlChardata();
						}
						break;
					}
					}
					} 
				}
				State = 959;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagStartNameContext : ParserRuleContext {
		public HtmlTagNameContext _htmlTagName;
		public HtmlTagNameContext htmlTagName() {
			return GetRuleContext<HtmlTagNameContext>(0);
		}
		public HtmlTagStartNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagStartName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagStartName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagStartName(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagStartNameContext htmlTagStartName() {
		HtmlTagStartNameContext _localctx = new HtmlTagStartNameContext(Context, State);
		EnterRule(_localctx, 122, RULE_htmlTagStartName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 960; _localctx._htmlTagName = htmlTagName();
			this.pushHtmlTagName((_localctx._htmlTagName!=null?TokenStream.GetText(_localctx._htmlTagName.Start,_localctx._htmlTagName.Stop):null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagClosingNameContext : ParserRuleContext {
		public HtmlTagNameContext _htmlTagName;
		public HtmlTagNameContext htmlTagName() {
			return GetRuleContext<HtmlTagNameContext>(0);
		}
		public HtmlTagClosingNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagClosingName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagClosingName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagClosingName(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagClosingNameContext htmlTagClosingName() {
		HtmlTagClosingNameContext _localctx = new HtmlTagClosingNameContext(Context, State);
		EnterRule(_localctx, 124, RULE_htmlTagClosingName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963; _localctx._htmlTagName = htmlTagName();
			State = 964;
			if (!(this.popHtmlTagName((_localctx._htmlTagName!=null?TokenStream.GetText(_localctx._htmlTagName.Start,_localctx._htmlTagName.Stop):null)))) throw new FailedPredicateException(this, "this.popHtmlTagName($htmlTagName.text)");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlTagNameContext : ParserRuleContext {
		public ITerminalNode TagName() { return GetToken(JavaScriptParser.TagName, 0); }
		public HtmlTagNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlTagName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlTagName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlTagName(this);
		}
	}

	[RuleVersion(0)]
	public HtmlTagNameContext htmlTagName() {
		HtmlTagNameContext _localctx = new HtmlTagNameContext(Context, State);
		EnterRule(_localctx, 126, RULE_htmlTagName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 966; Match(TagName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeContext : ParserRuleContext {
		public HtmlAttributeNameContext htmlAttributeName() {
			return GetRuleContext<HtmlAttributeNameContext>(0);
		}
		public ITerminalNode TagEquals() { return GetToken(JavaScriptParser.TagEquals, 0); }
		public HtmlAttributeValueContext htmlAttributeValue() {
			return GetRuleContext<HtmlAttributeValueContext>(0);
		}
		public HtmlAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttribute(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeContext htmlAttribute() {
		HtmlAttributeContext _localctx = new HtmlAttributeContext(Context, State);
		EnterRule(_localctx, 128, RULE_htmlAttribute);
		try {
			State = 973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 968; htmlAttributeName();
				State = 969; Match(TagEquals);
				State = 970; htmlAttributeValue();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 972; htmlAttributeName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeNameContext : ParserRuleContext {
		public ITerminalNode TagName() { return GetToken(JavaScriptParser.TagName, 0); }
		public HtmlAttributeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttributeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeName(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeNameContext htmlAttributeName() {
		HtmlAttributeNameContext _localctx = new HtmlAttributeNameContext(Context, State);
		EnterRule(_localctx, 130, RULE_htmlAttributeName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975; Match(TagName);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlChardataContext : ParserRuleContext {
		public ITerminalNode[] OpenTag() { return GetTokens(JavaScriptParser.OpenTag); }
		public ITerminalNode OpenTag(int i) {
			return GetToken(JavaScriptParser.OpenTag, i);
		}
		public ITerminalNode[] OpenBrace() { return GetTokens(JavaScriptParser.OpenBrace); }
		public ITerminalNode OpenBrace(int i) {
			return GetToken(JavaScriptParser.OpenBrace, i);
		}
		public HtmlChardataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlChardata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlChardata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlChardata(this);
		}
	}

	[RuleVersion(0)]
	public HtmlChardataContext htmlChardata() {
		HtmlChardataContext _localctx = new HtmlChardataContext(Context, State);
		EnterRule(_localctx, 132, RULE_htmlChardata);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 977;
					_la = TokenStream.LA(1);
					if ( _la <= 0 || (_la==OpenBrace || _la==OpenTag) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 980;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,105,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HtmlAttributeValueContext : ParserRuleContext {
		public ITerminalNode AttributeValue() { return GetToken(JavaScriptParser.AttributeValue, 0); }
		public ObjectExpressionSequenceContext objectExpressionSequence() {
			return GetRuleContext<ObjectExpressionSequenceContext>(0);
		}
		public HtmlAttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlAttributeValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterHtmlAttributeValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitHtmlAttributeValue(this);
		}
	}

	[RuleVersion(0)]
	public HtmlAttributeValueContext htmlAttributeValue() {
		HtmlAttributeValueContext _localctx = new HtmlAttributeValueContext(Context, State);
		EnterRule(_localctx, 134, RULE_htmlAttributeValue);
		try {
			State = 984;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AttributeValue:
				EnterOuterAlt(_localctx, 1);
				{
				State = 982; Match(AttributeValue);
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 983; objectExpressionSequence();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignableContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArrayLiteralContext arrayLiteral() {
			return GetRuleContext<ArrayLiteralContext>(0);
		}
		public ObjectLiteralContext objectLiteral() {
			return GetRuleContext<ObjectLiteralContext>(0);
		}
		public AssignableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignable(this);
		}
	}

	[RuleVersion(0)]
	public AssignableContext assignable() {
		AssignableContext _localctx = new AssignableContext(Context, State);
		EnterRule(_localctx, 136, RULE_assignable);
		try {
			State = 989;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 986; identifier();
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 987; arrayLiteral();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 988; objectLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectLiteralContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public PropertyAssignmentContext[] propertyAssignment() {
			return GetRuleContexts<PropertyAssignmentContext>();
		}
		public PropertyAssignmentContext propertyAssignment(int i) {
			return GetRuleContext<PropertyAssignmentContext>(i);
		}
		public ITerminalNode[] Comma() { return GetTokens(JavaScriptParser.Comma); }
		public ITerminalNode Comma(int i) {
			return GetToken(JavaScriptParser.Comma, i);
		}
		public ObjectLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectLiteral(this);
		}
	}

	[RuleVersion(0)]
	public ObjectLiteralContext objectLiteral() {
		ObjectLiteralContext _localctx = new ObjectLiteralContext(Context, State);
		EnterRule(_localctx, 138, RULE_objectLiteral);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 991; Match(OpenBrace);
			State = 1000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RegularExpressionLiteral) | (1L << OpenBracket) | (1L << OpenParen) | (1L << OpenBrace) | (1L << Ellipsis) | (1L << PlusPlus) | (1L << MinusMinus) | (1L << Plus) | (1L << Minus) | (1L << BitNot) | (1L << Not) | (1L << Multiply) | (1L << OpenTag) | (1L << NullLiteral) | (1L << BooleanLiteral) | (1L << DecimalLiteral) | (1L << HexIntegerLiteral))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (OctalIntegerLiteral - 64)) | (1L << (OctalIntegerLiteral2 - 64)) | (1L << (BinaryIntegerLiteral - 64)) | (1L << (BigHexIntegerLiteral - 64)) | (1L << (BigOctalIntegerLiteral - 64)) | (1L << (BigBinaryIntegerLiteral - 64)) | (1L << (BigDecimalIntegerLiteral - 64)) | (1L << (Break - 64)) | (1L << (Do - 64)) | (1L << (Instanceof - 64)) | (1L << (Typeof - 64)) | (1L << (Case - 64)) | (1L << (Else - 64)) | (1L << (New - 64)) | (1L << (Var - 64)) | (1L << (Catch - 64)) | (1L << (Finally - 64)) | (1L << (Return - 64)) | (1L << (Void - 64)) | (1L << (Continue - 64)) | (1L << (For - 64)) | (1L << (Switch - 64)) | (1L << (While - 64)) | (1L << (Debugger - 64)) | (1L << (Function - 64)) | (1L << (This - 64)) | (1L << (With - 64)) | (1L << (Default - 64)) | (1L << (If - 64)) | (1L << (Throw - 64)) | (1L << (Delete - 64)) | (1L << (In - 64)) | (1L << (Try - 64)) | (1L << (As - 64)) | (1L << (From - 64)) | (1L << (Class - 64)) | (1L << (Enum - 64)) | (1L << (Extends - 64)) | (1L << (Super - 64)) | (1L << (Const - 64)) | (1L << (Export - 64)) | (1L << (Import - 64)) | (1L << (Async - 64)) | (1L << (Await - 64)) | (1L << (Implements - 64)) | (1L << (StrictLet - 64)) | (1L << (NonStrictLet - 64)) | (1L << (Private - 64)) | (1L << (Public - 64)) | (1L << (Interface - 64)) | (1L << (Package - 64)) | (1L << (Protected - 64)) | (1L << (Static - 64)) | (1L << (Yield - 64)) | (1L << (Identifier - 64)) | (1L << (StringLiteral - 64)) | (1L << (TemplateStringLiteral - 64)))) != 0)) {
				{
				State = 992; propertyAssignment();
				State = 997;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 993; Match(Comma);
						State = 994; propertyAssignment();
						}
						} 
					}
					State = 999;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,108,Context);
				}
				}
			}

			State = 1003;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Comma) {
				{
				State = 1002; Match(Comma);
				}
			}

			State = 1005; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectExpressionSequenceContext : ParserRuleContext {
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public ExpressionSequenceContext expressionSequence() {
			return GetRuleContext<ExpressionSequenceContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ObjectExpressionSequenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectExpressionSequence; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterObjectExpressionSequence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitObjectExpressionSequence(this);
		}
	}

	[RuleVersion(0)]
	public ObjectExpressionSequenceContext objectExpressionSequence() {
		ObjectExpressionSequenceContext _localctx = new ObjectExpressionSequenceContext(Context, State);
		EnterRule(_localctx, 140, RULE_objectExpressionSequence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1007; Match(OpenBrace);
			State = 1008; expressionSequence();
			State = 1009; Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnoymousFunctionContext : ParserRuleContext {
		public AnoymousFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anoymousFunction; } }
	 
		public AnoymousFunctionContext() { }
		public virtual void CopyFrom(AnoymousFunctionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AnoymousFunctionDeclContext : AnoymousFunctionContext {
		public ITerminalNode Function() { return GetToken(JavaScriptParser.Function, 0); }
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode Multiply() { return GetToken(JavaScriptParser.Multiply, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public AnoymousFunctionDeclContext(AnoymousFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAnoymousFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAnoymousFunctionDecl(this);
		}
	}
	public partial class ArrowFunctionContext : AnoymousFunctionContext {
		public ArrowFunctionParametersContext arrowFunctionParameters() {
			return GetRuleContext<ArrowFunctionParametersContext>(0);
		}
		public ITerminalNode ARROW() { return GetToken(JavaScriptParser.ARROW, 0); }
		public ArrowFunctionBodyContext arrowFunctionBody() {
			return GetRuleContext<ArrowFunctionBodyContext>(0);
		}
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ArrowFunctionContext(AnoymousFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunction(this);
		}
	}
	public partial class FunctionDeclContext : AnoymousFunctionContext {
		public FunctionDeclarationContext functionDeclaration() {
			return GetRuleContext<FunctionDeclarationContext>(0);
		}
		public FunctionDeclContext(AnoymousFunctionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterFunctionDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitFunctionDecl(this);
		}
	}

	[RuleVersion(0)]
	public AnoymousFunctionContext anoymousFunction() {
		AnoymousFunctionContext _localctx = new AnoymousFunctionContext(Context, State);
		EnterRule(_localctx, 142, RULE_anoymousFunction);
		int _la;
		try {
			State = 1035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				_localctx = new FunctionDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1011; functionDeclaration();
				}
				break;
			case 2:
				_localctx = new AnoymousFunctionDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Async) {
					{
					State = 1012; Match(Async);
					}
				}

				State = 1015; Match(Function);
				State = 1017;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Multiply) {
					{
					State = 1016; Match(Multiply);
					}
				}

				State = 1019; Match(OpenParen);
				State = 1021;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (Async - 106)) | (1L << (NonStrictLet - 106)) | (1L << (Identifier - 106)))) != 0)) {
					{
					State = 1020; formalParameterList();
					}
				}

				State = 1023; Match(CloseParen);
				State = 1024; Match(OpenBrace);
				State = 1025; functionBody();
				State = 1026; Match(CloseBrace);
				}
				break;
			case 3:
				_localctx = new ArrowFunctionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1029;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
				case 1:
					{
					State = 1028; Match(Async);
					}
					break;
				}
				State = 1031; arrowFunctionParameters();
				State = 1032; Match(ARROW);
				State = 1033; arrowFunctionBody();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionParametersContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OpenParen() { return GetToken(JavaScriptParser.OpenParen, 0); }
		public ITerminalNode CloseParen() { return GetToken(JavaScriptParser.CloseParen, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ArrowFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionParametersContext arrowFunctionParameters() {
		ArrowFunctionParametersContext _localctx = new ArrowFunctionParametersContext(Context, State);
		EnterRule(_localctx, 144, RULE_arrowFunctionParameters);
		int _la;
		try {
			State = 1043;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Async:
			case NonStrictLet:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1037; identifier();
				}
				break;
			case OpenParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1038; Match(OpenParen);
				State = 1040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OpenBracket) | (1L << OpenBrace) | (1L << Ellipsis))) != 0) || ((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (Async - 106)) | (1L << (NonStrictLet - 106)) | (1L << (Identifier - 106)))) != 0)) {
					{
					State = 1039; formalParameterList();
					}
				}

				State = 1042; Match(CloseParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrowFunctionBodyContext : ParserRuleContext {
		public SingleExpressionContext singleExpression() {
			return GetRuleContext<SingleExpressionContext>(0);
		}
		public ITerminalNode OpenBrace() { return GetToken(JavaScriptParser.OpenBrace, 0); }
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public ITerminalNode CloseBrace() { return GetToken(JavaScriptParser.CloseBrace, 0); }
		public ArrowFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrowFunctionBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterArrowFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitArrowFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public ArrowFunctionBodyContext arrowFunctionBody() {
		ArrowFunctionBodyContext _localctx = new ArrowFunctionBodyContext(Context, State);
		EnterRule(_localctx, 146, RULE_arrowFunctionBody);
		try {
			State = 1050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1045; singleExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1046; Match(OpenBrace);
				State = 1047; functionBody();
				State = 1048; Match(CloseBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode MultiplyAssign() { return GetToken(JavaScriptParser.MultiplyAssign, 0); }
		public ITerminalNode DivideAssign() { return GetToken(JavaScriptParser.DivideAssign, 0); }
		public ITerminalNode ModulusAssign() { return GetToken(JavaScriptParser.ModulusAssign, 0); }
		public ITerminalNode PlusAssign() { return GetToken(JavaScriptParser.PlusAssign, 0); }
		public ITerminalNode MinusAssign() { return GetToken(JavaScriptParser.MinusAssign, 0); }
		public ITerminalNode LeftShiftArithmeticAssign() { return GetToken(JavaScriptParser.LeftShiftArithmeticAssign, 0); }
		public ITerminalNode RightShiftArithmeticAssign() { return GetToken(JavaScriptParser.RightShiftArithmeticAssign, 0); }
		public ITerminalNode RightShiftLogicalAssign() { return GetToken(JavaScriptParser.RightShiftLogicalAssign, 0); }
		public ITerminalNode BitAndAssign() { return GetToken(JavaScriptParser.BitAndAssign, 0); }
		public ITerminalNode BitXorAssign() { return GetToken(JavaScriptParser.BitXorAssign, 0); }
		public ITerminalNode BitOrAssign() { return GetToken(JavaScriptParser.BitOrAssign, 0); }
		public ITerminalNode PowerAssign() { return GetToken(JavaScriptParser.PowerAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext assignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 148, RULE_assignmentOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MultiplyAssign) | (1L << DivideAssign) | (1L << ModulusAssign) | (1L << PlusAssign) | (1L << MinusAssign) | (1L << LeftShiftArithmeticAssign) | (1L << RightShiftArithmeticAssign) | (1L << RightShiftLogicalAssign) | (1L << BitAndAssign) | (1L << BitXorAssign) | (1L << BitOrAssign) | (1L << PowerAssign))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(JavaScriptParser.StringLiteral, 0); }
		public ITerminalNode TemplateStringLiteral() { return GetToken(JavaScriptParser.TemplateStringLiteral, 0); }
		public ITerminalNode RegularExpressionLiteral() { return GetToken(JavaScriptParser.RegularExpressionLiteral, 0); }
		public NumericLiteralContext numericLiteral() {
			return GetRuleContext<NumericLiteralContext>(0);
		}
		public BigintLiteralContext bigintLiteral() {
			return GetRuleContext<BigintLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 150, RULE_literal);
		try {
			State = 1061;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NullLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1054; Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1055; Match(BooleanLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1056; Match(StringLiteral);
				}
				break;
			case TemplateStringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1057; Match(TemplateStringLiteral);
				}
				break;
			case RegularExpressionLiteral:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1058; Match(RegularExpressionLiteral);
				}
				break;
			case DecimalLiteral:
			case HexIntegerLiteral:
			case OctalIntegerLiteral:
			case OctalIntegerLiteral2:
			case BinaryIntegerLiteral:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1059; numericLiteral();
				}
				break;
			case BigHexIntegerLiteral:
			case BigOctalIntegerLiteral:
			case BigBinaryIntegerLiteral:
			case BigDecimalIntegerLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1060; bigintLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalLiteral() { return GetToken(JavaScriptParser.DecimalLiteral, 0); }
		public ITerminalNode HexIntegerLiteral() { return GetToken(JavaScriptParser.HexIntegerLiteral, 0); }
		public ITerminalNode OctalIntegerLiteral() { return GetToken(JavaScriptParser.OctalIntegerLiteral, 0); }
		public ITerminalNode OctalIntegerLiteral2() { return GetToken(JavaScriptParser.OctalIntegerLiteral2, 0); }
		public ITerminalNode BinaryIntegerLiteral() { return GetToken(JavaScriptParser.BinaryIntegerLiteral, 0); }
		public NumericLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumericLiteralContext numericLiteral() {
		NumericLiteralContext _localctx = new NumericLiteralContext(Context, State);
		EnterRule(_localctx, 152, RULE_numericLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & ((1L << (DecimalLiteral - 62)) | (1L << (HexIntegerLiteral - 62)) | (1L << (OctalIntegerLiteral - 62)) | (1L << (OctalIntegerLiteral2 - 62)) | (1L << (BinaryIntegerLiteral - 62)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BigintLiteralContext : ParserRuleContext {
		public ITerminalNode BigDecimalIntegerLiteral() { return GetToken(JavaScriptParser.BigDecimalIntegerLiteral, 0); }
		public ITerminalNode BigHexIntegerLiteral() { return GetToken(JavaScriptParser.BigHexIntegerLiteral, 0); }
		public ITerminalNode BigOctalIntegerLiteral() { return GetToken(JavaScriptParser.BigOctalIntegerLiteral, 0); }
		public ITerminalNode BigBinaryIntegerLiteral() { return GetToken(JavaScriptParser.BigBinaryIntegerLiteral, 0); }
		public BigintLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bigintLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterBigintLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitBigintLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BigintLiteralContext bigintLiteral() {
		BigintLiteralContext _localctx = new BigintLiteralContext(Context, State);
		EnterRule(_localctx, 154, RULE_bigintLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1065;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (BigHexIntegerLiteral - 67)) | (1L << (BigOctalIntegerLiteral - 67)) | (1L << (BigBinaryIntegerLiteral - 67)) | (1L << (BigDecimalIntegerLiteral - 67)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public GetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterGetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitGetter(this);
		}
	}

	[RuleVersion(0)]
	public GetterContext getter() {
		GetterContext _localctx = new GetterContext(Context, State);
		EnterRule(_localctx, 156, RULE_getter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067; identifier();
			State = 1068;
			if (!(this.p("get"))) throw new FailedPredicateException(this, "this.p(\"get\")");
			State = 1069; propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PropertyNameContext propertyName() {
			return GetRuleContext<PropertyNameContext>(0);
		}
		public SetterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterSetter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitSetter(this);
		}
	}

	[RuleVersion(0)]
	public SetterContext setter() {
		SetterContext _localctx = new SetterContext(Context, State);
		EnterRule(_localctx, 158, RULE_setter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071; identifier();
			State = 1072;
			if (!(this.p("set"))) throw new FailedPredicateException(this, "this.p(\"set\")");
			State = 1073; propertyName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReservedWordContext reservedWord() {
			return GetRuleContext<ReservedWordContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(Context, State);
		EnterRule(_localctx, 160, RULE_identifierName);
		try {
			State = 1077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1075; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1076; reservedWord();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(JavaScriptParser.Identifier, 0); }
		public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 162, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1079;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (Async - 106)) | (1L << (NonStrictLet - 106)) | (1L << (Identifier - 106)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReservedWordContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public ITerminalNode NullLiteral() { return GetToken(JavaScriptParser.NullLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(JavaScriptParser.BooleanLiteral, 0); }
		public ReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reservedWord; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterReservedWord(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitReservedWord(this);
		}
	}

	[RuleVersion(0)]
	public ReservedWordContext reservedWord() {
		ReservedWordContext _localctx = new ReservedWordContext(Context, State);
		EnterRule(_localctx, 164, RULE_reservedWord);
		try {
			State = 1084;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
			case Do:
			case Instanceof:
			case Typeof:
			case Case:
			case Else:
			case New:
			case Var:
			case Catch:
			case Finally:
			case Return:
			case Void:
			case Continue:
			case For:
			case Switch:
			case While:
			case Debugger:
			case Function:
			case This:
			case With:
			case Default:
			case If:
			case Throw:
			case Delete:
			case In:
			case Try:
			case As:
			case From:
			case Class:
			case Enum:
			case Extends:
			case Super:
			case Const:
			case Export:
			case Import:
			case Async:
			case Await:
			case Implements:
			case StrictLet:
			case NonStrictLet:
			case Private:
			case Public:
			case Interface:
			case Package:
			case Protected:
			case Static:
			case Yield:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1081; keyword();
				}
				break;
			case NullLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1082; Match(NullLiteral);
				}
				break;
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1083; Match(BooleanLiteral);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(JavaScriptParser.Break, 0); }
		public ITerminalNode Do() { return GetToken(JavaScriptParser.Do, 0); }
		public ITerminalNode Instanceof() { return GetToken(JavaScriptParser.Instanceof, 0); }
		public ITerminalNode Typeof() { return GetToken(JavaScriptParser.Typeof, 0); }
		public ITerminalNode Case() { return GetToken(JavaScriptParser.Case, 0); }
		public ITerminalNode Else() { return GetToken(JavaScriptParser.Else, 0); }
		public ITerminalNode New() { return GetToken(JavaScriptParser.New, 0); }
		public ITerminalNode Var() { return GetToken(JavaScriptParser.Var, 0); }
		public ITerminalNode Catch() { return GetToken(JavaScriptParser.Catch, 0); }
		public ITerminalNode Finally() { return GetToken(JavaScriptParser.Finally, 0); }
		public ITerminalNode Return() { return GetToken(JavaScriptParser.Return, 0); }
		public ITerminalNode Void() { return GetToken(JavaScriptParser.Void, 0); }
		public ITerminalNode Continue() { return GetToken(JavaScriptParser.Continue, 0); }
		public ITerminalNode For() { return GetToken(JavaScriptParser.For, 0); }
		public ITerminalNode Switch() { return GetToken(JavaScriptParser.Switch, 0); }
		public ITerminalNode While() { return GetToken(JavaScriptParser.While, 0); }
		public ITerminalNode Debugger() { return GetToken(JavaScriptParser.Debugger, 0); }
		public ITerminalNode Function() { return GetToken(JavaScriptParser.Function, 0); }
		public ITerminalNode This() { return GetToken(JavaScriptParser.This, 0); }
		public ITerminalNode With() { return GetToken(JavaScriptParser.With, 0); }
		public ITerminalNode Default() { return GetToken(JavaScriptParser.Default, 0); }
		public ITerminalNode If() { return GetToken(JavaScriptParser.If, 0); }
		public ITerminalNode Throw() { return GetToken(JavaScriptParser.Throw, 0); }
		public ITerminalNode Delete() { return GetToken(JavaScriptParser.Delete, 0); }
		public ITerminalNode In() { return GetToken(JavaScriptParser.In, 0); }
		public ITerminalNode Try() { return GetToken(JavaScriptParser.Try, 0); }
		public ITerminalNode Class() { return GetToken(JavaScriptParser.Class, 0); }
		public ITerminalNode Enum() { return GetToken(JavaScriptParser.Enum, 0); }
		public ITerminalNode Extends() { return GetToken(JavaScriptParser.Extends, 0); }
		public ITerminalNode Super() { return GetToken(JavaScriptParser.Super, 0); }
		public ITerminalNode Const() { return GetToken(JavaScriptParser.Const, 0); }
		public ITerminalNode Export() { return GetToken(JavaScriptParser.Export, 0); }
		public ITerminalNode Import() { return GetToken(JavaScriptParser.Import, 0); }
		public ITerminalNode Implements() { return GetToken(JavaScriptParser.Implements, 0); }
		public LetContext let() {
			return GetRuleContext<LetContext>(0);
		}
		public ITerminalNode Private() { return GetToken(JavaScriptParser.Private, 0); }
		public ITerminalNode Public() { return GetToken(JavaScriptParser.Public, 0); }
		public ITerminalNode Interface() { return GetToken(JavaScriptParser.Interface, 0); }
		public ITerminalNode Package() { return GetToken(JavaScriptParser.Package, 0); }
		public ITerminalNode Protected() { return GetToken(JavaScriptParser.Protected, 0); }
		public ITerminalNode Static() { return GetToken(JavaScriptParser.Static, 0); }
		public ITerminalNode Yield() { return GetToken(JavaScriptParser.Yield, 0); }
		public ITerminalNode Async() { return GetToken(JavaScriptParser.Async, 0); }
		public ITerminalNode Await() { return GetToken(JavaScriptParser.Await, 0); }
		public ITerminalNode From() { return GetToken(JavaScriptParser.From, 0); }
		public ITerminalNode As() { return GetToken(JavaScriptParser.As, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 166, RULE_keyword);
		try {
			State = 1132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Break:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1086; Match(Break);
				}
				break;
			case Do:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1087; Match(Do);
				}
				break;
			case Instanceof:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1088; Match(Instanceof);
				}
				break;
			case Typeof:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1089; Match(Typeof);
				}
				break;
			case Case:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1090; Match(Case);
				}
				break;
			case Else:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1091; Match(Else);
				}
				break;
			case New:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1092; Match(New);
				}
				break;
			case Var:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1093; Match(Var);
				}
				break;
			case Catch:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1094; Match(Catch);
				}
				break;
			case Finally:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1095; Match(Finally);
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1096; Match(Return);
				}
				break;
			case Void:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1097; Match(Void);
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1098; Match(Continue);
				}
				break;
			case For:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1099; Match(For);
				}
				break;
			case Switch:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1100; Match(Switch);
				}
				break;
			case While:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1101; Match(While);
				}
				break;
			case Debugger:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1102; Match(Debugger);
				}
				break;
			case Function:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1103; Match(Function);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1104; Match(This);
				}
				break;
			case With:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1105; Match(With);
				}
				break;
			case Default:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1106; Match(Default);
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1107; Match(If);
				}
				break;
			case Throw:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1108; Match(Throw);
				}
				break;
			case Delete:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1109; Match(Delete);
				}
				break;
			case In:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1110; Match(In);
				}
				break;
			case Try:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1111; Match(Try);
				}
				break;
			case Class:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1112; Match(Class);
				}
				break;
			case Enum:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1113; Match(Enum);
				}
				break;
			case Extends:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1114; Match(Extends);
				}
				break;
			case Super:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1115; Match(Super);
				}
				break;
			case Const:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1116; Match(Const);
				}
				break;
			case Export:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1117; Match(Export);
				}
				break;
			case Import:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1118; Match(Import);
				}
				break;
			case Implements:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1119; Match(Implements);
				}
				break;
			case StrictLet:
			case NonStrictLet:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1120; let();
				}
				break;
			case Private:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1121; Match(Private);
				}
				break;
			case Public:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1122; Match(Public);
				}
				break;
			case Interface:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1123; Match(Interface);
				}
				break;
			case Package:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1124; Match(Package);
				}
				break;
			case Protected:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1125; Match(Protected);
				}
				break;
			case Static:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1126; Match(Static);
				}
				break;
			case Yield:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1127; Match(Yield);
				}
				break;
			case Async:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1128; Match(Async);
				}
				break;
			case Await:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1129; Match(Await);
				}
				break;
			case From:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1130; Match(From);
				}
				break;
			case As:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1131; Match(As);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetContext : ParserRuleContext {
		public ITerminalNode NonStrictLet() { return GetToken(JavaScriptParser.NonStrictLet, 0); }
		public ITerminalNode StrictLet() { return GetToken(JavaScriptParser.StrictLet, 0); }
		public LetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterLet(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitLet(this);
		}
	}

	[RuleVersion(0)]
	public LetContext let() {
		LetContext _localctx = new LetContext(Context, State);
		EnterRule(_localctx, 168, RULE_let);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1134;
			_la = TokenStream.LA(1);
			if ( !(_la==StrictLet || _la==NonStrictLet) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : ParserRuleContext {
		public ITerminalNode SemiColon() { return GetToken(JavaScriptParser.SemiColon, 0); }
		public ITerminalNode Eof() { return GetToken(JavaScriptParser.Eof, 0); }
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaScriptParserListener typedListener = listener as IJavaScriptParserListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(Context, State);
		EnterRule(_localctx, 170, RULE_eos);
		try {
			State = 1140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1136; Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1137; Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1138;
				if (!(this.lineTerminatorAhead())) throw new FailedPredicateException(this, "this.lineTerminatorAhead()");
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1139;
				if (!(this.closeBrace())) throw new FailedPredicateException(this, "this.closeBrace()");
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 19: return expressionStatement_sempred((ExpressionStatementContext)_localctx, predIndex);
		case 21: return iterationStatement_sempred((IterationStatementContext)_localctx, predIndex);
		case 23: return continueStatement_sempred((ContinueStatementContext)_localctx, predIndex);
		case 24: return breakStatement_sempred((BreakStatementContext)_localctx, predIndex);
		case 25: return returnStatement_sempred((ReturnStatementContext)_localctx, predIndex);
		case 26: return yieldStatement_sempred((YieldStatementContext)_localctx, predIndex);
		case 34: return throwStatement_sempred((ThrowStatementContext)_localctx, predIndex);
		case 42: return classElement_sempred((ClassElementContext)_localctx, predIndex);
		case 57: return singleExpression_sempred((SingleExpressionContext)_localctx, predIndex);
		case 62: return htmlTagClosingName_sempred((HtmlTagClosingNameContext)_localctx, predIndex);
		case 78: return getter_sempred((GetterContext)_localctx, predIndex);
		case 79: return setter_sempred((SetterContext)_localctx, predIndex);
		case 85: return eos_sempred((EosContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expressionStatement_sempred(ExpressionStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.notOpenBraceAndNotFunction();
		}
		return true;
	}
	private bool iterationStatement_sempred(IterationStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.p("of");
		}
		return true;
	}
	private bool continueStatement_sempred(ContinueStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.notLineTerminator();
		}
		return true;
	}
	private bool breakStatement_sempred(BreakStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return this.notLineTerminator();
		}
		return true;
	}
	private bool returnStatement_sempred(ReturnStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 4: return this.notLineTerminator();
		}
		return true;
	}
	private bool yieldStatement_sempred(YieldStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return this.notLineTerminator();
		}
		return true;
	}
	private bool throwStatement_sempred(ThrowStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 6: return this.notLineTerminator();
		}
		return true;
	}
	private bool classElement_sempred(ClassElementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return this.n("static");
		}
		return true;
	}
	private bool singleExpression_sempred(SingleExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 28);
		case 9: return Precpred(Context, 27);
		case 10: return Precpred(Context, 26);
		case 11: return Precpred(Context, 25);
		case 12: return Precpred(Context, 24);
		case 13: return Precpred(Context, 23);
		case 14: return Precpred(Context, 22);
		case 15: return Precpred(Context, 21);
		case 16: return Precpred(Context, 20);
		case 17: return Precpred(Context, 19);
		case 18: return Precpred(Context, 18);
		case 19: return Precpred(Context, 17);
		case 20: return Precpred(Context, 16);
		case 21: return Precpred(Context, 15);
		case 22: return Precpred(Context, 14);
		case 23: return Precpred(Context, 13);
		case 24: return Precpred(Context, 12);
		case 25: return Precpred(Context, 45);
		case 26: return Precpred(Context, 44);
		case 27: return Precpred(Context, 43);
		case 28: return Precpred(Context, 40);
		case 29: return this.notLineTerminator();
		case 30: return Precpred(Context, 39);
		case 31: return this.notLineTerminator();
		case 32: return Precpred(Context, 10);
		}
		return true;
	}
	private bool htmlTagClosingName_sempred(HtmlTagClosingNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 33: return this.popHtmlTagName((_localctx._htmlTagName!=null?TokenStream.GetText(_localctx._htmlTagName.Start,_localctx._htmlTagName.Stop):null));
		}
		return true;
	}
	private bool getter_sempred(GetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.p("get");
		}
		return true;
	}
	private bool setter_sempred(SetterContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return this.p("set");
		}
		return true;
	}
	private bool eos_sempred(EosContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return this.lineTerminatorAhead();
		case 37: return this.closeBrace();
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x89', '\x479', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x3', '\x2', 
		'\x5', '\x2', '\xB0', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\xB3', 
		'\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '\xCD', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\xD1', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x6', 
		'\x6', '\xD6', '\n', '\x6', '\r', '\x6', '\xE', '\x6', '\xD7', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x5', '\b', '\xDE', '\n', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xE2', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\xE9', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\a', '\t', '\xEF', '\n', '\t', '\f', '\t', '\xE', '\t', '\xF2', '\v', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xF6', '\n', '\t', '\x5', 
		'\t', '\xF8', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x101', '\n', 
		'\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x105', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\x10D', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x5', '\xE', '\x112', '\n', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x11B', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x123', '\n', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x127', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x12C', '\n', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\x135', '\n', '\x12', 
		'\f', '\x12', '\xE', '\x12', '\x138', '\v', '\x12', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\x13D', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x14C', '\n', '\x16', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x160', '\n', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x164', '\n', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\x168', '\n', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x170', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', 
		'\x17', '\x179', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\x17E', '\n', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x186', 
		'\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', 
		'\x18B', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', 
		'\x19', '\x190', '\n', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x197', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', 
		'\x1B', '\x19E', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x1A7', '\n', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x1AC', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1BE', '\n', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x5', '\x1F', '\x1C2', '\n', '\x1F', 
		'\x5', '\x1F', '\x1C4', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x6', ' ', '\x1C9', '\n', ' ', '\r', ' ', '\xE', ' ', '\x1CA', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x1D1', '\n', '!', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x1D6', '\n', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x5', '%', '\x1E5', '\n', '%', '\x3', '%', '\x5', '%', '\x1E8', 
		'\n', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x1ED', '\n', 
		'&', '\x3', '&', '\x5', '&', '\x1F0', '\n', '&', '\x3', '&', '\x3', '&', 
		'\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', 
		'(', '\x3', ')', '\x5', ')', '\x1FB', '\n', ')', '\x3', ')', '\x3', ')', 
		'\x5', ')', '\x1FF', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', 
		')', '\x204', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '+', 
		'\x3', '+', '\x5', '+', '\x211', '\n', '+', '\x3', '+', '\x3', '+', '\a', 
		'+', '\x215', '\n', '+', '\f', '+', '\xE', '+', '\x218', '\v', '+', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', 
		',', '\x220', '\n', ',', '\f', ',', '\xE', ',', '\x223', '\v', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', 
		',', '\x22B', '\n', ',', '\x3', ',', '\x3', ',', '\x5', ',', '\x22F', 
		'\n', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x5', ',', 
		'\x235', '\n', ',', '\x3', '-', '\x5', '-', '\x238', '\n', '-', '\x3', 
		'-', '\x5', '-', '\x23B', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\x5', '-', '\x240', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x5', '-', '\x248', '\n', '-', '\x3', '-', 
		'\x5', '-', '\x24B', '\n', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x255', 
		'\n', '-', '\x3', '-', '\x5', '-', '\x258', '\n', '-', '\x3', '-', '\x3', 
		'-', '\x3', '-', '\x5', '-', '\x25D', '\n', '-', '\x3', '-', '\x3', '-', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\x5', '-', '\x264', '\n', '-', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\a', '.', '\x269', '\n', '.', '\f', '.', 
		'\xE', '.', '\x26C', '\v', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x270', 
		'\n', '.', '\x3', '.', '\x5', '.', '\x273', '\n', '.', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x5', '/', '\x278', '\n', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x31', '\x5', '\x31', '\x27E', '\n', '\x31', 
		'\x3', '\x32', '\x6', '\x32', '\x281', '\n', '\x32', '\r', '\x32', '\xE', 
		'\x32', '\x282', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', 
		'\x3', '\x34', '\a', '\x34', '\x28A', '\n', '\x34', '\f', '\x34', '\xE', 
		'\x34', '\x28D', '\v', '\x34', '\x3', '\x34', '\x5', '\x34', '\x290', 
		'\n', '\x34', '\x3', '\x34', '\x6', '\x34', '\x293', '\n', '\x34', '\r', 
		'\x34', '\xE', '\x34', '\x294', '\x3', '\x34', '\a', '\x34', '\x298', 
		'\n', '\x34', '\f', '\x34', '\xE', '\x34', '\x29B', '\v', '\x34', '\x3', 
		'\x34', '\a', '\x34', '\x29E', '\n', '\x34', '\f', '\x34', '\xE', '\x34', 
		'\x2A1', '\v', '\x34', '\x3', '\x35', '\x5', '\x35', '\x2A4', '\n', '\x35', 
		'\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x2B3', '\n', 
		'\x36', '\x3', '\x36', '\x5', '\x36', '\x2B6', '\n', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x2BB', '\n', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x5', '\x36', '\x2D2', '\n', '\x36', '\x3', '\x36', '\x5', '\x36', 
		'\x2D5', '\n', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x2DE', 
		'\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', 
		'\a', '\x38', '\x2E4', '\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x2E7', 
		'\v', '\x38', '\x3', '\x38', '\x5', '\x38', '\x2EA', '\n', '\x38', '\x5', 
		'\x38', '\x2EC', '\n', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x39', 
		'\x5', '\x39', '\x2F1', '\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', 
		'\x39', '\x2F5', '\n', '\x39', '\x3', ':', '\x3', ':', '\x3', ':', '\a', 
		':', '\x2FA', '\n', ':', '\f', ':', '\xE', ':', '\x2FD', '\v', ':', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x303', '\n', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x309', '\n', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x333', 
		'\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x373', '\n', ';', '\x3', 
		';', '\x3', ';', '\x5', ';', '\x377', '\n', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x3', ';', '\x3', ';', '\a', ';', '\x384', '\n', ';', '\f', 
		';', '\xE', ';', '\x387', '\v', ';', '\x3', '<', '\x6', '<', '\x38A', 
		'\n', '<', '\r', '<', '\xE', '<', '\x38B', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\a', '=', '\x391', '\n', '=', '\f', '=', '\xE', '=', '\x394', '\v', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x3A0', 
		'\n', '=', '\f', '=', '\xE', '=', '\x3A3', '\v', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\a', '=', '\x3AB', 
		'\n', '=', '\f', '=', '\xE', '=', '\x3AE', '\v', '=', '\x3', '=', '\x3', 
		'=', '\x5', '=', '\x3B2', '\n', '=', '\x3', '>', '\x5', '>', '\x3B5', 
		'\n', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x3B9', '\n', '>', '\x3', 
		'>', '\x5', '>', '\x3BC', '\n', '>', '\a', '>', '\x3BE', '\n', '>', '\f', 
		'>', '\xE', '>', '\x3C1', '\v', '>', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', 
		'\x42', '\x3D0', '\n', '\x42', '\x3', '\x43', '\x3', '\x43', '\x3', '\x44', 
		'\x6', '\x44', '\x3D5', '\n', '\x44', '\r', '\x44', '\xE', '\x44', '\x3D6', 
		'\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x3DB', '\n', '\x45', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x3E0', '\n', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\a', 'G', '\x3E6', '\n', 
		'G', '\f', 'G', '\xE', 'G', '\x3E9', '\v', 'G', '\x5', 'G', '\x3EB', '\n', 
		'G', '\x3', 'G', '\x5', 'G', '\x3EE', '\n', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', 
		'\x5', 'I', '\x3F8', '\n', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x3FC', 
		'\n', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x400', '\n', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 
		'I', '\x408', '\n', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x5', 'I', '\x40E', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\x5', 
		'J', '\x413', '\n', 'J', '\x3', 'J', '\x5', 'J', '\x416', '\n', 'J', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x5', 'K', '\x41D', 
		'\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x428', '\n', 
		'M', '\x3', 'N', '\x3', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'P', '\x3', 
		'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x438', '\n', 'R', '\x3', 'S', 
		'\x3', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x43F', '\n', 
		'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x46F', 
		'\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x5', 'W', '\x477', '\n', 'W', '\x3', 'W', '\x2', '\x3', 
		't', 'X', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\x2', '\r', '\x3', '\x2', '\x1A', '\x1C', '\x3', '\x2', '\x16', '\x17', 
		'\x3', '\x2', ' ', '\"', '\x4', '\x2', '#', '#', '%', '\'', '\x3', '\x2', 
		'(', '+', '\x4', '\x2', '\v', '\v', '$', '$', '\x3', '\x2', '\x31', '<', 
		'\x3', '\x2', '@', '\x44', '\x3', '\x2', '\x45', 'H', '\x5', '\x2', 'l', 
		'l', 'p', 'p', 'x', 'x', '\x3', '\x2', 'o', 'p', '\x2', '\x521', '\x2', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\x4', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\xCC', '\x3', '\x2', '\x2', '\x2', '\b', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\xD5', '\x3', '\x2', '\x2', '\x2', '\f', '\xD9', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xE8', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xEA', '\x3', '\x2', '\x2', '\x2', '\x12', '\xFB', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x100', '\x3', '\x2', '\x2', '\x2', '\x16', '\x106', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x109', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x126', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x12B', '\x3', '\x2', '\x2', '\x2', ' ', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x139', '\x3', '\x2', '\x2', '\x2', '&', '\x13E', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x140', '\x3', '\x2', '\x2', '\x2', '*', '\x144', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x30', '\x18C', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x193', '\x3', '\x2', '\x2', '\x2', '\x34', '\x1A6', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x1AF', '\x3', '\x2', '\x2', '\x2', ':', '\x1B5', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1BB', '\x3', '\x2', '\x2', '\x2', '>', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1CC', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1D2', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1D7', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1DB', '\x3', '\x2', '\x2', '\x2', 'H', '\x1E0', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x1E9', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x1F3', '\x3', '\x2', '\x2', '\x2', 'N', '\x1F6', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x1FA', '\x3', '\x2', '\x2', '\x2', 'R', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x234', '\x3', '\x2', '\x2', '\x2', 'X', '\x263', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x272', '\x3', '\x2', '\x2', '\x2', '\\', '\x274', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x279', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x62', '\x280', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x284', '\x3', '\x2', '\x2', '\x2', '\x66', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x2A3', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x2D4', '\x3', '\x2', '\x2', '\x2', 'l', '\x2DD', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x2DF', '\x3', '\x2', '\x2', '\x2', 'p', '\x2F0', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x2F6', '\x3', '\x2', '\x2', '\x2', 
		't', '\x332', '\x3', '\x2', '\x2', '\x2', 'v', '\x389', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x3B1', '\x3', '\x2', '\x2', '\x2', 'z', '\x3B4', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x3C2', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x3C5', '\x3', '\x2', '\x2', '\x2', '\x80', '\x3C8', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\x84', '\x3D1', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x3D4', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x3DA', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x3DF', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x3F1', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x40D', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x415', '\x3', '\x2', '\x2', '\x2', '\x94', '\x41C', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x41E', '\x3', '\x2', '\x2', '\x2', '\x98', '\x427', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x429', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x42B', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x42D', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x431', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x437', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x439', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x43E', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x46E', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x470', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x476', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xB0', '\a', '\x3', '\x2', '\x2', 
		'\xAF', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB3', 
		'\x5', '\x62', '\x32', '\x2', '\xB2', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\xB5', '\a', '\x2', '\x2', '\x3', '\xB5', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\x5', '\x6', '\x4', '\x2', 
		'\xB7', '\x5', '\x3', '\x2', '\x2', '\x2', '\xB8', '\xCD', '\x5', '\b', 
		'\x5', '\x2', '\xB9', '\xCD', '\x5', ' ', '\x11', '\x2', '\xBA', '\xCD', 
		'\x5', '\f', '\a', '\x2', '\xBB', '\xCD', '\x5', '\x1A', '\xE', '\x2', 
		'\xBC', '\xCD', '\x5', '&', '\x14', '\x2', '\xBD', '\xCD', '\x5', 'R', 
		'*', '\x2', '\xBE', '\xCD', '\x5', '(', '\x15', '\x2', '\xBF', '\xCD', 
		'\x5', '*', '\x16', '\x2', '\xC0', '\xCD', '\x5', ',', '\x17', '\x2', 
		'\xC1', '\xCD', '\x5', '\x30', '\x19', '\x2', '\xC2', '\xCD', '\x5', '\x32', 
		'\x1A', '\x2', '\xC3', '\xCD', '\x5', '\x34', '\x1B', '\x2', '\xC4', '\xCD', 
		'\x5', '\x36', '\x1C', '\x2', '\xC5', '\xCD', '\x5', '\x38', '\x1D', '\x2', 
		'\xC6', '\xCD', '\x5', '\x44', '#', '\x2', '\xC7', '\xCD', '\x5', ':', 
		'\x1E', '\x2', '\xC8', '\xCD', '\x5', '\x46', '$', '\x2', '\xC9', '\xCD', 
		'\x5', 'H', '%', '\x2', '\xCA', '\xCD', '\x5', 'N', '(', '\x2', '\xCB', 
		'\xCD', '\x5', 'P', ')', '\x2', '\xCC', '\xB8', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xBA', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xBC', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xBD', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xBF', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC1', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xC2', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC4', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC9', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCB', 
		'\x3', '\x2', '\x2', '\x2', '\xCD', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\xD0', '\a', '\v', '\x2', '\x2', '\xCF', '\xD1', '\x5', '\n', 
		'\x6', '\x2', '\xD0', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD1', '\xD2', '\x3', '\x2', '\x2', '\x2', 
		'\xD2', '\xD3', '\a', '\f', '\x2', '\x2', '\xD3', '\t', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD6', '\x5', '\x6', '\x4', '\x2', '\xD5', '\xD4', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xD8', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\v', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDA', 
		'\a', 'k', '\x2', '\x2', '\xDA', '\xDB', '\x5', '\xE', '\b', '\x2', '\xDB', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDE', '\x5', '\x12', '\n', 
		'\x2', '\xDD', '\xDC', '\x3', '\x2', '\x2', '\x2', '\xDD', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\xE2', '\x5', '\x14', '\v', '\x2', '\xE0', '\xE2', '\x5', '\x10', '\t', 
		'\x2', '\xE1', '\xDF', '\x3', '\x2', '\x2', '\x2', '\xE1', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x5', '\x16', '\f', '\x2', '\xE4', '\xE5', '\x5', '\xAC', 'W', 
		'\x2', '\xE5', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', '\a', 
		'y', '\x2', '\x2', '\xE7', '\xE9', '\x5', '\xAC', 'W', '\x2', '\xE8', 
		'\xDD', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xF', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xF0', '\a', 
		'\v', '\x2', '\x2', '\xEB', '\xEC', '\x5', '\x18', '\r', '\x2', '\xEC', 
		'\xED', '\a', '\xE', '\x2', '\x2', '\xED', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xEE', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF2', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF7', '\x3', '\x2', '\x2', 
		'\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xF5', '\x5', 
		'\x18', '\r', '\x2', '\xF4', '\xF6', '\a', '\xE', '\x2', '\x2', '\xF5', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF7', '\xF3', '\x3', 
		'\x2', '\x2', '\x2', '\xF7', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xFA', '\a', '\f', '\x2', 
		'\x2', '\xFA', '\x11', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xFC', '\x5', 
		'\x18', '\r', '\x2', '\xFC', '\xFD', '\a', '\xE', '\x2', '\x2', '\xFD', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x101', '\a', '\x1A', '\x2', 
		'\x2', '\xFF', '\x101', '\x5', '\xA2', 'R', '\x2', '\x100', '\xFE', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x104', '\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\a', '\x63', '\x2', 
		'\x2', '\x103', '\x105', '\x5', '\xA2', 'R', '\x2', '\x104', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x104', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x105', '\x15', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\a', '\x64', 
		'\x2', '\x2', '\x107', '\x108', '\a', 'y', '\x2', '\x2', '\x108', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x10C', '\x5', '\xA2', 'R', '\x2', 
		'\x10A', '\x10B', '\a', '\x63', '\x2', '\x2', '\x10B', '\x10D', '\x5', 
		'\xA2', 'R', '\x2', '\x10C', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x10E', '\x111', '\a', 'j', '\x2', '\x2', '\x10F', '\x112', '\x5', 
		'\x1C', '\xF', '\x2', '\x110', '\x112', '\x5', '\x1E', '\x10', '\x2', 
		'\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x111', '\x110', '\x3', 
		'\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', '\x2', '\x113', 
		'\x114', '\x5', '\xAC', 'W', '\x2', '\x114', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x115', '\x116', '\a', 'j', '\x2', '\x2', '\x116', '\x117', '\a', 
		']', '\x2', '\x2', '\x117', '\x118', '\x5', 't', ';', '\x2', '\x118', 
		'\x119', '\x5', '\xAC', 'W', '\x2', '\x119', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x10E', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x115', 
		'\x3', '\x2', '\x2', '\x2', '\x11B', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x11C', '\x11D', '\x5', '\x14', '\v', '\x2', '\x11D', '\x11E', '\x5', 
		'\x16', '\f', '\x2', '\x11E', '\x11F', '\x5', '\xAC', 'W', '\x2', '\x11F', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x120', '\x122', '\x5', '\x10', 
		'\t', '\x2', '\x121', '\x123', '\x5', '\x16', '\f', '\x2', '\x122', '\x121', 
		'\x3', '\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x123', '\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\x5', 
		'\xAC', 'W', '\x2', '\x125', '\x127', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x126', '\x120', '\x3', '\x2', '\x2', 
		'\x2', '\x127', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x128', '\x12C', 
		'\x5', ' ', '\x11', '\x2', '\x129', '\x12C', '\x5', 'R', '*', '\x2', '\x12A', 
		'\x12C', '\x5', 'P', ')', '\x2', '\x12B', '\x128', '\x3', '\x2', '\x2', 
		'\x2', '\x12B', '\x129', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12A', 
		'\x3', '\x2', '\x2', '\x2', '\x12C', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\x12D', '\x12E', '\x5', '\"', '\x12', '\x2', '\x12E', '\x12F', '\x5', 
		'\xAC', 'W', '\x2', '\x12F', '!', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x131', '\x5', '.', '\x18', '\x2', '\x131', '\x136', '\x5', '$', '\x13', 
		'\x2', '\x132', '\x133', '\a', '\xE', '\x2', '\x2', '\x133', '\x135', 
		'\x5', '$', '\x13', '\x2', '\x134', '\x132', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x138', '\x3', '\x2', '\x2', '\x2', '\x136', '\x134', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x138', '\x136', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13C', '\x5', '\x8A', '\x46', '\x2', '\x13A', '\x13B', 
		'\a', '\xF', '\x2', '\x2', '\x13B', '\x13D', '\x5', 't', ';', '\x2', '\x13C', 
		'\x13A', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', '\x3', '\x2', '\x2', 
		'\x2', '\x13D', '%', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x13F', '\a', 
		'\r', '\x2', '\x2', '\x13F', '\'', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\x6', '\x15', '\x2', '\x2', '\x141', '\x142', '\x5', 'r', ':', 
		'\x2', '\x142', '\x143', '\x5', '\xAC', 'W', '\x2', '\x143', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x145', '\a', '^', '\x2', '\x2', '\x145', 
		'\x146', '\a', '\t', '\x2', '\x2', '\x146', '\x147', '\x5', 'r', ':', 
		'\x2', '\x147', '\x148', '\a', '\n', '\x2', '\x2', '\x148', '\x14B', '\x5', 
		'\x6', '\x4', '\x2', '\x149', '\x14A', '\a', 'N', '\x2', '\x2', '\x14A', 
		'\x14C', '\x5', '\x6', '\x4', '\x2', '\x14B', '\x149', '\x3', '\x2', '\x2', 
		'\x2', '\x14B', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14C', '+', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14E', '\a', 'J', '\x2', '\x2', '\x14E', 
		'\x14F', '\x5', '\x6', '\x4', '\x2', '\x14F', '\x150', '\a', 'X', '\x2', 
		'\x2', '\x150', '\x151', '\a', '\t', '\x2', '\x2', '\x151', '\x152', '\x5', 
		'r', ':', '\x2', '\x152', '\x153', '\a', '\n', '\x2', '\x2', '\x153', 
		'\x154', '\x5', '\xAC', 'W', '\x2', '\x154', '\x186', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x156', '\a', 'X', '\x2', '\x2', '\x156', '\x157', '\a', 
		'\t', '\x2', '\x2', '\x157', '\x158', '\x5', 'r', ':', '\x2', '\x158', 
		'\x159', '\a', '\n', '\x2', '\x2', '\x159', '\x15A', '\x5', '\x6', '\x4', 
		'\x2', '\x15A', '\x186', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x15C', 
		'\a', 'V', '\x2', '\x2', '\x15C', '\x15F', '\a', '\t', '\x2', '\x2', '\x15D', 
		'\x160', '\x5', 'r', ':', '\x2', '\x15E', '\x160', '\x5', '\"', '\x12', 
		'\x2', '\x15F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x15F', '\x15E', 
		'\x3', '\x2', '\x2', '\x2', '\x15F', '\x160', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', '\x163', '\a', 
		'\r', '\x2', '\x2', '\x162', '\x164', '\x5', 'r', ':', '\x2', '\x163', 
		'\x162', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\x3', '\x2', '\x2', 
		'\x2', '\x164', '\x165', '\x3', '\x2', '\x2', '\x2', '\x165', '\x167', 
		'\a', '\r', '\x2', '\x2', '\x166', '\x168', '\x5', 'r', ':', '\x2', '\x167', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x167', '\x168', '\x3', '\x2', '\x2', 
		'\x2', '\x168', '\x169', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16A', 
		'\a', '\n', '\x2', '\x2', '\x16A', '\x186', '\x5', '\x6', '\x4', '\x2', 
		'\x16B', '\x16C', '\a', 'V', '\x2', '\x2', '\x16C', '\x16F', '\a', '\t', 
		'\x2', '\x2', '\x16D', '\x170', '\x5', 't', ';', '\x2', '\x16E', '\x170', 
		'\x5', '\"', '\x12', '\x2', '\x16F', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x16F', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x170', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x171', '\x172', '\a', '\x61', '\x2', '\x2', '\x172', 
		'\x173', '\x5', 'r', ':', '\x2', '\x173', '\x174', '\a', '\n', '\x2', 
		'\x2', '\x174', '\x175', '\x5', '\x6', '\x4', '\x2', '\x175', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x176', '\x178', '\a', 'V', '\x2', '\x2', 
		'\x177', '\x179', '\a', 'm', '\x2', '\x2', '\x178', '\x177', '\x3', '\x2', 
		'\x2', '\x2', '\x178', '\x179', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', 
		'\x3', '\x2', '\x2', '\x2', '\x17A', '\x17D', '\a', '\t', '\x2', '\x2', 
		'\x17B', '\x17E', '\x5', 't', ';', '\x2', '\x17C', '\x17E', '\x5', '\"', 
		'\x12', '\x2', '\x17D', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x17D', 
		'\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', 
		'\x2', '\x17F', '\x180', '\x5', '\xA4', 'S', '\x2', '\x180', '\x181', 
		'\x6', '\x17', '\x3', '\x2', '\x181', '\x182', '\x5', 'r', ':', '\x2', 
		'\x182', '\x183', '\a', '\n', '\x2', '\x2', '\x183', '\x184', '\x5', '\x6', 
		'\x4', '\x2', '\x184', '\x186', '\x3', '\x2', '\x2', '\x2', '\x185', '\x14D', 
		'\x3', '\x2', '\x2', '\x2', '\x185', '\x155', '\x3', '\x2', '\x2', '\x2', 
		'\x185', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x185', '\x16B', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x176', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'-', '\x3', '\x2', '\x2', '\x2', '\x187', '\x18B', '\a', 'P', '\x2', '\x2', 
		'\x188', '\x18B', '\x5', '\xAA', 'V', '\x2', '\x189', '\x18B', '\a', 'i', 
		'\x2', '\x2', '\x18A', '\x187', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x188', 
		'\x3', '\x2', '\x2', '\x2', '\x18A', '\x189', '\x3', '\x2', '\x2', '\x2', 
		'\x18B', '/', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x18F', '\a', 'U', 
		'\x2', '\x2', '\x18D', '\x18E', '\x6', '\x19', '\x4', '\x2', '\x18E', 
		'\x190', '\x5', '\xA4', 'S', '\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x190', '\x3', '\x2', '\x2', '\x2', '\x190', '\x191', 
		'\x3', '\x2', '\x2', '\x2', '\x191', '\x192', '\x5', '\xAC', 'W', '\x2', 
		'\x192', '\x31', '\x3', '\x2', '\x2', '\x2', '\x193', '\x196', '\a', 'I', 
		'\x2', '\x2', '\x194', '\x195', '\x6', '\x1A', '\x5', '\x2', '\x195', 
		'\x197', '\x5', '\xA4', 'S', '\x2', '\x196', '\x194', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x197', '\x3', '\x2', '\x2', '\x2', '\x197', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x199', '\x5', '\xAC', 'W', '\x2', 
		'\x199', '\x33', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19D', '\a', 'S', 
		'\x2', '\x2', '\x19B', '\x19C', '\x6', '\x1B', '\x6', '\x2', '\x19C', 
		'\x19E', '\x5', 'r', ':', '\x2', '\x19D', '\x19B', '\x3', '\x2', '\x2', 
		'\x2', '\x19D', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x19E', '\x19F', 
		'\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A7', '\x5', '\xAC', 'W', '\x2', 
		'\x1A0', '\x1A1', '\a', 'S', '\x2', '\x2', '\x1A1', '\x1A2', '\a', '\t', 
		'\x2', '\x2', '\x1A2', '\x1A3', '\x5', 'v', '<', '\x2', '\x1A3', '\x1A4', 
		'\a', '\n', '\x2', '\x2', '\x1A4', '\x1A5', '\x5', '\xAC', 'W', '\x2', 
		'\x1A5', '\x1A7', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x19A', '\x3', 
		'\x2', '\x2', '\x2', '\x1A6', '\x1A0', '\x3', '\x2', '\x2', '\x2', '\x1A7', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AB', '\a', 'w', '\x2', 
		'\x2', '\x1A9', '\x1AA', '\x6', '\x1C', '\a', '\x2', '\x1AA', '\x1AC', 
		'\x5', 'r', ':', '\x2', '\x1AB', '\x1A9', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1AC', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1AD', '\x3', 
		'\x2', '\x2', '\x2', '\x1AD', '\x1AE', '\x5', '\xAC', 'W', '\x2', '\x1AE', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x1AF', '\x1B0', '\a', '\\', '\x2', 
		'\x2', '\x1B0', '\x1B1', '\a', '\t', '\x2', '\x2', '\x1B1', '\x1B2', '\x5', 
		'r', ':', '\x2', '\x1B2', '\x1B3', '\a', '\n', '\x2', '\x2', '\x1B3', 
		'\x1B4', '\x5', '\x6', '\x4', '\x2', '\x1B4', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x1B5', '\x1B6', '\a', 'W', '\x2', '\x2', '\x1B6', '\x1B7', '\a', 
		'\t', '\x2', '\x2', '\x1B7', '\x1B8', '\x5', 'r', ':', '\x2', '\x1B8', 
		'\x1B9', '\a', '\n', '\x2', '\x2', '\x1B9', '\x1BA', '\x5', '<', '\x1F', 
		'\x2', '\x1BA', ';', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BD', '\a', 
		'\v', '\x2', '\x2', '\x1BC', '\x1BE', '\x5', '>', ' ', '\x2', '\x1BD', 
		'\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1BD', '\x1BE', '\x3', '\x2', '\x2', 
		'\x2', '\x1BE', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C1', 
		'\x5', '\x42', '\"', '\x2', '\x1C0', '\x1C2', '\x5', '>', ' ', '\x2', 
		'\x1C1', '\x1C0', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x3', 
		'\x2', '\x2', '\x2', '\x1C2', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C4', '\x3', '\x2', '\x2', 
		'\x2', '\x1C4', '\x1C5', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C6', 
		'\a', '\f', '\x2', '\x2', '\x1C6', '=', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1C9', '\x5', '@', '!', '\x2', '\x1C8', '\x1C7', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CB', '\x3', '\x2', '\x2', '\x2', 
		'\x1CB', '?', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\a', 'M', 
		'\x2', '\x2', '\x1CD', '\x1CE', '\x5', 'r', ':', '\x2', '\x1CE', '\x1D0', 
		'\a', '\x11', '\x2', '\x2', '\x1CF', '\x1D1', '\x5', '\n', '\x6', '\x2', 
		'\x1D0', '\x1CF', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1D2', 
		'\x1D3', '\a', ']', '\x2', '\x2', '\x1D3', '\x1D5', '\a', '\x11', '\x2', 
		'\x2', '\x1D4', '\x1D6', '\x5', '\n', '\x6', '\x2', '\x1D5', '\x1D4', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x43', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D8', '\x5', 
		'\xA4', 'S', '\x2', '\x1D8', '\x1D9', '\a', '\x11', '\x2', '\x2', '\x1D9', 
		'\x1DA', '\x5', '\x6', '\x4', '\x2', '\x1DA', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\x1DB', '\x1DC', '\a', '_', '\x2', '\x2', '\x1DC', '\x1DD', '\x6', 
		'$', '\b', '\x2', '\x1DD', '\x1DE', '\x5', 'r', ':', '\x2', '\x1DE', '\x1DF', 
		'\x5', '\xAC', 'W', '\x2', '\x1DF', 'G', '\x3', '\x2', '\x2', '\x2', '\x1E0', 
		'\x1E1', '\a', '\x62', '\x2', '\x2', '\x1E1', '\x1E7', '\x5', '\b', '\x5', 
		'\x2', '\x1E2', '\x1E4', '\x5', 'J', '&', '\x2', '\x1E3', '\x1E5', '\x5', 
		'L', '\'', '\x2', '\x1E4', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E8', '\x3', '\x2', '\x2', 
		'\x2', '\x1E6', '\x1E8', '\x5', 'L', '\'', '\x2', '\x1E7', '\x1E2', '\x3', 
		'\x2', '\x2', '\x2', '\x1E7', '\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1EF', '\a', 'Q', '\x2', '\x2', 
		'\x1EA', '\x1EC', '\a', '\t', '\x2', '\x2', '\x1EB', '\x1ED', '\x5', '\x8A', 
		'\x46', '\x2', '\x1EC', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EC', 
		'\x1ED', '\x3', '\x2', '\x2', '\x2', '\x1ED', '\x1EE', '\x3', '\x2', '\x2', 
		'\x2', '\x1EE', '\x1F0', '\a', '\n', '\x2', '\x2', '\x1EF', '\x1EA', '\x3', 
		'\x2', '\x2', '\x2', '\x1EF', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\x5', '\b', '\x5', 
		'\x2', '\x1F2', 'K', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\a', 
		'R', '\x2', '\x2', '\x1F4', '\x1F5', '\x5', '\b', '\x5', '\x2', '\x1F5', 
		'M', '\x3', '\x2', '\x2', '\x2', '\x1F6', '\x1F7', '\a', 'Y', '\x2', '\x2', 
		'\x1F7', '\x1F8', '\x5', '\xAC', 'W', '\x2', '\x1F8', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x1F9', '\x1FB', '\a', 'l', '\x2', '\x2', '\x1FA', '\x1F9', 
		'\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x1FE', '\a', 
		'Z', '\x2', '\x2', '\x1FD', '\x1FF', '\a', '\x1A', '\x2', '\x2', '\x1FE', 
		'\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FE', '\x1FF', '\x3', '\x2', '\x2', 
		'\x2', '\x1FF', '\x200', '\x3', '\x2', '\x2', '\x2', '\x200', '\x201', 
		'\x5', '\xA4', 'S', '\x2', '\x201', '\x203', '\a', '\t', '\x2', '\x2', 
		'\x202', '\x204', '\x5', 'Z', '.', '\x2', '\x203', '\x202', '\x3', '\x2', 
		'\x2', '\x2', '\x203', '\x204', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', 
		'\x3', '\x2', '\x2', '\x2', '\x205', '\x206', '\a', '\n', '\x2', '\x2', 
		'\x206', '\x207', '\a', '\v', '\x2', '\x2', '\x207', '\x208', '\x5', '`', 
		'\x31', '\x2', '\x208', '\x209', '\a', '\f', '\x2', '\x2', '\x209', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x20B', '\a', '\x65', '\x2', '\x2', 
		'\x20B', '\x20C', '\x5', '\xA4', 'S', '\x2', '\x20C', '\x20D', '\x5', 
		'T', '+', '\x2', '\x20D', 'S', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x20F', 
		'\a', 'g', '\x2', '\x2', '\x20F', '\x211', '\x5', 't', ';', '\x2', '\x210', 
		'\x20E', '\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\x3', '\x2', '\x2', 
		'\x2', '\x211', '\x212', '\x3', '\x2', '\x2', '\x2', '\x212', '\x216', 
		'\a', '\v', '\x2', '\x2', '\x213', '\x215', '\x5', 'V', ',', '\x2', '\x214', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x215', '\x218', '\x3', '\x2', '\x2', 
		'\x2', '\x216', '\x214', '\x3', '\x2', '\x2', '\x2', '\x216', '\x217', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x219', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x216', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', '\a', 
		'\f', '\x2', '\x2', '\x21A', 'U', '\x3', '\x2', '\x2', '\x2', '\x21B', 
		'\x220', '\a', 'v', '\x2', '\x2', '\x21C', '\x21D', '\x6', ',', '\t', 
		'\x2', '\x21D', '\x220', '\x5', '\xA4', 'S', '\x2', '\x21E', '\x220', 
		'\a', 'l', '\x2', '\x2', '\x21F', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21F', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x21E', '\x3', 
		'\x2', '\x2', '\x2', '\x220', '\x223', '\x3', '\x2', '\x2', '\x2', '\x221', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x221', '\x222', '\x3', '\x2', '\x2', 
		'\x2', '\x222', '\x22A', '\x3', '\x2', '\x2', '\x2', '\x223', '\x221', 
		'\x3', '\x2', '\x2', '\x2', '\x224', '\x22B', '\x5', 'X', '-', '\x2', 
		'\x225', '\x226', '\x5', '\x8A', '\x46', '\x2', '\x226', '\x227', '\a', 
		'\xF', '\x2', '\x2', '\x227', '\x228', '\x5', '\x8C', 'G', '\x2', '\x228', 
		'\x229', '\a', '\r', '\x2', '\x2', '\x229', '\x22B', '\x3', '\x2', '\x2', 
		'\x2', '\x22A', '\x224', '\x3', '\x2', '\x2', '\x2', '\x22A', '\x225', 
		'\x3', '\x2', '\x2', '\x2', '\x22B', '\x235', '\x3', '\x2', '\x2', '\x2', 
		'\x22C', '\x235', '\x5', '&', '\x14', '\x2', '\x22D', '\x22F', '\a', '\x1F', 
		'\x2', '\x2', '\x22E', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', 
		'\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\x3', '\x2', '\x2', '\x2', 
		'\x230', '\x231', '\x5', 'l', '\x37', '\x2', '\x231', '\x232', '\a', '\xF', 
		'\x2', '\x2', '\x232', '\x233', '\x5', 't', ';', '\x2', '\x233', '\x235', 
		'\x3', '\x2', '\x2', '\x2', '\x234', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x234', '\x22C', '\x3', '\x2', '\x2', '\x2', '\x234', '\x22E', '\x3', 
		'\x2', '\x2', '\x2', '\x235', 'W', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x238', '\a', '\x1A', '\x2', '\x2', '\x237', '\x236', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x238', '\x3', '\x2', '\x2', '\x2', '\x238', '\x23A', 
		'\x3', '\x2', '\x2', '\x2', '\x239', '\x23B', '\a', '\x1F', '\x2', '\x2', 
		'\x23A', '\x239', '\x3', '\x2', '\x2', '\x2', '\x23A', '\x23B', '\x3', 
		'\x2', '\x2', '\x2', '\x23B', '\x23C', '\x3', '\x2', '\x2', '\x2', '\x23C', 
		'\x23D', '\x5', 'l', '\x37', '\x2', '\x23D', '\x23F', '\a', '\t', '\x2', 
		'\x2', '\x23E', '\x240', '\x5', 'Z', '.', '\x2', '\x23F', '\x23E', '\x3', 
		'\x2', '\x2', '\x2', '\x23F', '\x240', '\x3', '\x2', '\x2', '\x2', '\x240', 
		'\x241', '\x3', '\x2', '\x2', '\x2', '\x241', '\x242', '\a', '\n', '\x2', 
		'\x2', '\x242', '\x243', '\a', '\v', '\x2', '\x2', '\x243', '\x244', '\x5', 
		'`', '\x31', '\x2', '\x244', '\x245', '\a', '\f', '\x2', '\x2', '\x245', 
		'\x264', '\x3', '\x2', '\x2', '\x2', '\x246', '\x248', '\a', '\x1A', '\x2', 
		'\x2', '\x247', '\x246', '\x3', '\x2', '\x2', '\x2', '\x247', '\x248', 
		'\x3', '\x2', '\x2', '\x2', '\x248', '\x24A', '\x3', '\x2', '\x2', '\x2', 
		'\x249', '\x24B', '\a', '\x1F', '\x2', '\x2', '\x24A', '\x249', '\x3', 
		'\x2', '\x2', '\x2', '\x24A', '\x24B', '\x3', '\x2', '\x2', '\x2', '\x24B', 
		'\x24C', '\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\x5', '\x9E', 
		'P', '\x2', '\x24D', '\x24E', '\a', '\t', '\x2', '\x2', '\x24E', '\x24F', 
		'\a', '\n', '\x2', '\x2', '\x24F', '\x250', '\a', '\v', '\x2', '\x2', 
		'\x250', '\x251', '\x5', '`', '\x31', '\x2', '\x251', '\x252', '\a', '\f', 
		'\x2', '\x2', '\x252', '\x264', '\x3', '\x2', '\x2', '\x2', '\x253', '\x255', 
		'\a', '\x1A', '\x2', '\x2', '\x254', '\x253', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x255', '\x3', '\x2', '\x2', '\x2', '\x255', '\x257', '\x3', 
		'\x2', '\x2', '\x2', '\x256', '\x258', '\a', '\x1F', '\x2', '\x2', '\x257', 
		'\x256', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', '\x3', '\x2', '\x2', 
		'\x2', '\x258', '\x259', '\x3', '\x2', '\x2', '\x2', '\x259', '\x25A', 
		'\x5', '\xA0', 'Q', '\x2', '\x25A', '\x25C', '\a', '\t', '\x2', '\x2', 
		'\x25B', '\x25D', '\x5', 'Z', '.', '\x2', '\x25C', '\x25B', '\x3', '\x2', 
		'\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\x25F', '\a', '\n', '\x2', '\x2', 
		'\x25F', '\x260', '\a', '\v', '\x2', '\x2', '\x260', '\x261', '\x5', '`', 
		'\x31', '\x2', '\x261', '\x262', '\a', '\f', '\x2', '\x2', '\x262', '\x264', 
		'\x3', '\x2', '\x2', '\x2', '\x263', '\x237', '\x3', '\x2', '\x2', '\x2', 
		'\x263', '\x247', '\x3', '\x2', '\x2', '\x2', '\x263', '\x254', '\x3', 
		'\x2', '\x2', '\x2', '\x264', 'Y', '\x3', '\x2', '\x2', '\x2', '\x265', 
		'\x26A', '\x5', '\\', '/', '\x2', '\x266', '\x267', '\a', '\xE', '\x2', 
		'\x2', '\x267', '\x269', '\x5', '\\', '/', '\x2', '\x268', '\x266', '\x3', 
		'\x2', '\x2', '\x2', '\x269', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x268', '\x3', '\x2', '\x2', '\x2', '\x26A', '\x26B', '\x3', '\x2', '\x2', 
		'\x2', '\x26B', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x26C', '\x26A', 
		'\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\a', '\xE', '\x2', '\x2', 
		'\x26E', '\x270', '\x5', '^', '\x30', '\x2', '\x26F', '\x26D', '\x3', 
		'\x2', '\x2', '\x2', '\x26F', '\x270', '\x3', '\x2', '\x2', '\x2', '\x270', 
		'\x273', '\x3', '\x2', '\x2', '\x2', '\x271', '\x273', '\x5', '^', '\x30', 
		'\x2', '\x272', '\x265', '\x3', '\x2', '\x2', '\x2', '\x272', '\x271', 
		'\x3', '\x2', '\x2', '\x2', '\x273', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x274', '\x277', '\x5', '\x8A', '\x46', '\x2', '\x275', '\x276', '\a', 
		'\xF', '\x2', '\x2', '\x276', '\x278', '\x5', 't', ';', '\x2', '\x277', 
		'\x275', '\x3', '\x2', '\x2', '\x2', '\x277', '\x278', '\x3', '\x2', '\x2', 
		'\x2', '\x278', ']', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27A', '\a', 
		'\x12', '\x2', '\x2', '\x27A', '\x27B', '\x5', 't', ';', '\x2', '\x27B', 
		'_', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27E', '\x5', '\x62', '\x32', 
		'\x2', '\x27D', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27E', 
		'\x3', '\x2', '\x2', '\x2', '\x27E', '\x61', '\x3', '\x2', '\x2', '\x2', 
		'\x27F', '\x281', '\x5', '\x4', '\x3', '\x2', '\x280', '\x27F', '\x3', 
		'\x2', '\x2', '\x2', '\x281', '\x282', '\x3', '\x2', '\x2', '\x2', '\x282', 
		'\x280', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\x3', '\x2', '\x2', 
		'\x2', '\x283', '\x63', '\x3', '\x2', '\x2', '\x2', '\x284', '\x285', 
		'\a', '\a', '\x2', '\x2', '\x285', '\x286', '\x5', '\x66', '\x34', '\x2', 
		'\x286', '\x287', '\a', '\b', '\x2', '\x2', '\x287', '\x65', '\x3', '\x2', 
		'\x2', '\x2', '\x288', '\x28A', '\a', '\xE', '\x2', '\x2', '\x289', '\x288', 
		'\x3', '\x2', '\x2', '\x2', '\x28A', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		'\x28B', '\x289', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28C', '\x3', 
		'\x2', '\x2', '\x2', '\x28C', '\x28F', '\x3', '\x2', '\x2', '\x2', '\x28D', 
		'\x28B', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x290', '\x5', 'h', '\x35', 
		'\x2', '\x28F', '\x28E', '\x3', '\x2', '\x2', '\x2', '\x28F', '\x290', 
		'\x3', '\x2', '\x2', '\x2', '\x290', '\x299', '\x3', '\x2', '\x2', '\x2', 
		'\x291', '\x293', '\a', '\xE', '\x2', '\x2', '\x292', '\x291', '\x3', 
		'\x2', '\x2', '\x2', '\x293', '\x294', '\x3', '\x2', '\x2', '\x2', '\x294', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\x3', '\x2', '\x2', 
		'\x2', '\x295', '\x296', '\x3', '\x2', '\x2', '\x2', '\x296', '\x298', 
		'\x5', 'h', '\x35', '\x2', '\x297', '\x292', '\x3', '\x2', '\x2', '\x2', 
		'\x298', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x299', '\x297', '\x3', 
		'\x2', '\x2', '\x2', '\x299', '\x29A', '\x3', '\x2', '\x2', '\x2', '\x29A', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x299', '\x3', '\x2', '\x2', 
		'\x2', '\x29C', '\x29E', '\a', '\xE', '\x2', '\x2', '\x29D', '\x29C', 
		'\x3', '\x2', '\x2', '\x2', '\x29E', '\x2A1', '\x3', '\x2', '\x2', '\x2', 
		'\x29F', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A0', '\x3', 
		'\x2', '\x2', '\x2', '\x2A0', 'g', '\x3', '\x2', '\x2', '\x2', '\x2A1', 
		'\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2A4', '\a', '\x12', '\x2', 
		'\x2', '\x2A3', '\x2A2', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', 
		'\x3', '\x2', '\x2', '\x2', '\x2A4', '\x2A5', '\x3', '\x2', '\x2', '\x2', 
		'\x2A5', '\x2A6', '\x5', 't', ';', '\x2', '\x2A6', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x2A7', '\x2A8', '\x5', 'l', '\x37', '\x2', '\x2A8', '\x2A9', 
		'\a', '\x11', '\x2', '\x2', '\x2A9', '\x2AA', '\x5', 't', ';', '\x2', 
		'\x2AA', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x2AC', '\a', 
		'\a', '\x2', '\x2', '\x2AC', '\x2AD', '\x5', 't', ';', '\x2', '\x2AD', 
		'\x2AE', '\a', '\b', '\x2', '\x2', '\x2AE', '\x2AF', '\a', '\x11', '\x2', 
		'\x2', '\x2AF', '\x2B0', '\x5', 't', ';', '\x2', '\x2B0', '\x2D5', '\x3', 
		'\x2', '\x2', '\x2', '\x2B1', '\x2B3', '\a', 'l', '\x2', '\x2', '\x2B2', 
		'\x2B1', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\x3', '\x2', '\x2', 
		'\x2', '\x2B3', '\x2B5', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B6', 
		'\a', '\x1A', '\x2', '\x2', '\x2B5', '\x2B4', '\x3', '\x2', '\x2', '\x2', 
		'\x2B5', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B6', '\x2B7', '\x3', 
		'\x2', '\x2', '\x2', '\x2B7', '\x2B8', '\x5', 'l', '\x37', '\x2', '\x2B8', 
		'\x2BA', '\a', '\t', '\x2', '\x2', '\x2B9', '\x2BB', '\x5', 'Z', '.', 
		'\x2', '\x2BA', '\x2B9', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2BB', 
		'\x3', '\x2', '\x2', '\x2', '\x2BB', '\x2BC', '\x3', '\x2', '\x2', '\x2', 
		'\x2BC', '\x2BD', '\a', '\n', '\x2', '\x2', '\x2BD', '\x2BE', '\a', '\v', 
		'\x2', '\x2', '\x2BE', '\x2BF', '\x5', '`', '\x31', '\x2', '\x2BF', '\x2C0', 
		'\a', '\f', '\x2', '\x2', '\x2C0', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\x2C1', '\x2C2', '\x5', '\x9E', 'P', '\x2', '\x2C2', '\x2C3', '\a', '\t', 
		'\x2', '\x2', '\x2C3', '\x2C4', '\a', '\n', '\x2', '\x2', '\x2C4', '\x2C5', 
		'\a', '\v', '\x2', '\x2', '\x2C5', '\x2C6', '\x5', '`', '\x31', '\x2', 
		'\x2C6', '\x2C7', '\a', '\f', '\x2', '\x2', '\x2C7', '\x2D5', '\x3', '\x2', 
		'\x2', '\x2', '\x2C8', '\x2C9', '\x5', '\xA0', 'Q', '\x2', '\x2C9', '\x2CA', 
		'\a', '\t', '\x2', '\x2', '\x2CA', '\x2CB', '\x5', '\\', '/', '\x2', '\x2CB', 
		'\x2CC', '\a', '\n', '\x2', '\x2', '\x2CC', '\x2CD', '\a', '\v', '\x2', 
		'\x2', '\x2CD', '\x2CE', '\x5', '`', '\x31', '\x2', '\x2CE', '\x2CF', 
		'\a', '\f', '\x2', '\x2', '\x2CF', '\x2D5', '\x3', '\x2', '\x2', '\x2', 
		'\x2D0', '\x2D2', '\a', '\x12', '\x2', '\x2', '\x2D1', '\x2D0', '\x3', 
		'\x2', '\x2', '\x2', '\x2D1', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D2', 
		'\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D5', '\x5', 't', ';', 
		'\x2', '\x2D4', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2B2', '\x3', '\x2', '\x2', '\x2', 
		'\x2D4', '\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2C8', '\x3', 
		'\x2', '\x2', '\x2', '\x2D4', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D5', 
		'k', '\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2DE', '\x5', '\xA2', 'R', 
		'\x2', '\x2D7', '\x2DE', '\a', 'y', '\x2', '\x2', '\x2D8', '\x2DE', '\x5', 
		'\x9A', 'N', '\x2', '\x2D9', '\x2DA', '\a', '\a', '\x2', '\x2', '\x2DA', 
		'\x2DB', '\x5', 't', ';', '\x2', '\x2DB', '\x2DC', '\a', '\b', '\x2', 
		'\x2', '\x2DC', '\x2DE', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2D6', 
		'\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'\x2DD', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2DD', '\x2D9', '\x3', 
		'\x2', '\x2', '\x2', '\x2DE', 'm', '\x3', '\x2', '\x2', '\x2', '\x2DF', 
		'\x2EB', '\a', '\t', '\x2', '\x2', '\x2E0', '\x2E5', '\x5', 'p', '\x39', 
		'\x2', '\x2E1', '\x2E2', '\a', '\xE', '\x2', '\x2', '\x2E2', '\x2E4', 
		'\x5', 'p', '\x39', '\x2', '\x2E3', '\x2E1', '\x3', '\x2', '\x2', '\x2', 
		'\x2E4', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E6', 
		'\x2E9', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E5', '\x3', '\x2', '\x2', 
		'\x2', '\x2E8', '\x2EA', '\a', '\xE', '\x2', '\x2', '\x2E9', '\x2E8', 
		'\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', '\x3', '\x2', '\x2', '\x2', 
		'\x2EA', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E0', '\x3', 
		'\x2', '\x2', '\x2', '\x2EB', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2EC', 
		'\x2ED', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EE', '\a', '\n', '\x2', 
		'\x2', '\x2EE', 'o', '\x3', '\x2', '\x2', '\x2', '\x2EF', '\x2F1', '\a', 
		'\x12', '\x2', '\x2', '\x2F0', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F0', 
		'\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F1', '\x2F4', '\x3', '\x2', '\x2', 
		'\x2', '\x2F2', '\x2F5', '\x5', 't', ';', '\x2', '\x2F3', '\x2F5', '\x5', 
		'\xA4', 'S', '\x2', '\x2F4', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F4', 
		'\x2F3', '\x3', '\x2', '\x2', '\x2', '\x2F5', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x2F6', '\x2FB', '\x5', 't', ';', '\x2', '\x2F7', '\x2F8', '\a', 
		'\xE', '\x2', '\x2', '\x2F8', '\x2FA', '\x5', 't', ';', '\x2', '\x2F9', 
		'\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x2FB', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x2FB', '\x2FC', 
		'\x3', '\x2', '\x2', '\x2', '\x2FC', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x2FD', '\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x2FF', '\b', 
		';', '\x1', '\x2', '\x2FF', '\x333', '\x5', '\x90', 'I', '\x2', '\x300', 
		'\x302', '\a', '\x65', '\x2', '\x2', '\x301', '\x303', '\x5', '\xA4', 
		'S', '\x2', '\x302', '\x301', '\x3', '\x2', '\x2', '\x2', '\x302', '\x303', 
		'\x3', '\x2', '\x2', '\x2', '\x303', '\x304', '\x3', '\x2', '\x2', '\x2', 
		'\x304', '\x333', '\x5', 'T', '+', '\x2', '\x305', '\x306', '\a', 'O', 
		'\x2', '\x2', '\x306', '\x308', '\x5', 't', ';', '\x2', '\x307', '\x309', 
		'\x5', 'n', '\x38', '\x2', '\x308', '\x307', '\x3', '\x2', '\x2', '\x2', 
		'\x308', '\x309', '\x3', '\x2', '\x2', '\x2', '\x309', '\x333', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x30B', '\a', 'O', '\x2', '\x2', '\x30B', 
		'\x30C', '\a', '\x13', '\x2', '\x2', '\x30C', '\x333', '\x5', '\xA4', 
		'S', '\x2', '\x30D', '\x30E', '\a', '`', '\x2', '\x2', '\x30E', '\x333', 
		'\x5', 't', ';', '(', '\x30F', '\x310', '\a', 'T', '\x2', '\x2', '\x310', 
		'\x333', '\x5', 't', ';', '\'', '\x311', '\x312', '\a', 'L', '\x2', '\x2', 
		'\x312', '\x333', '\x5', 't', ';', '&', '\x313', '\x314', '\a', '\x14', 
		'\x2', '\x2', '\x314', '\x333', '\x5', 't', ';', '%', '\x315', '\x316', 
		'\a', '\x15', '\x2', '\x2', '\x316', '\x333', '\x5', 't', ';', '$', '\x317', 
		'\x318', '\a', '\x16', '\x2', '\x2', '\x318', '\x333', '\x5', 't', ';', 
		'#', '\x319', '\x31A', '\a', '\x17', '\x2', '\x2', '\x31A', '\x333', '\x5', 
		't', ';', '\"', '\x31B', '\x31C', '\a', '\x18', '\x2', '\x2', '\x31C', 
		'\x333', '\x5', 't', ';', '!', '\x31D', '\x31E', '\a', '\x19', '\x2', 
		'\x2', '\x31E', '\x333', '\x5', 't', ';', ' ', '\x31F', '\x320', '\a', 
		'm', '\x2', '\x2', '\x320', '\x333', '\x5', 't', ';', '\x1F', '\x321', 
		'\x322', '\a', 'k', '\x2', '\x2', '\x322', '\x323', '\a', '\t', '\x2', 
		'\x2', '\x323', '\x324', '\x5', 't', ';', '\x2', '\x324', '\x325', '\a', 
		'\n', '\x2', '\x2', '\x325', '\x333', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x333', '\x5', '\x36', '\x1C', '\x2', '\x327', '\x333', '\a', '[', '\x2', 
		'\x2', '\x328', '\x333', '\x5', '\xA4', 'S', '\x2', '\x329', '\x333', 
		'\a', 'h', '\x2', '\x2', '\x32A', '\x333', '\x5', '\x98', 'M', '\x2', 
		'\x32B', '\x333', '\x5', '\x64', '\x33', '\x2', '\x32C', '\x333', '\x5', 
		'\x8C', 'G', '\x2', '\x32D', '\x333', '\x5', 'v', '<', '\x2', '\x32E', 
		'\x32F', '\a', '\t', '\x2', '\x2', '\x32F', '\x330', '\x5', 'r', ':', 
		'\x2', '\x330', '\x331', '\a', '\n', '\x2', '\x2', '\x331', '\x333', '\x3', 
		'\x2', '\x2', '\x2', '\x332', '\x2FE', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x300', '\x3', '\x2', '\x2', '\x2', '\x332', '\x305', '\x3', '\x2', '\x2', 
		'\x2', '\x332', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x332', '\x30D', 
		'\x3', '\x2', '\x2', '\x2', '\x332', '\x30F', '\x3', '\x2', '\x2', '\x2', 
		'\x332', '\x311', '\x3', '\x2', '\x2', '\x2', '\x332', '\x313', '\x3', 
		'\x2', '\x2', '\x2', '\x332', '\x315', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x317', '\x3', '\x2', '\x2', '\x2', '\x332', '\x319', '\x3', '\x2', '\x2', 
		'\x2', '\x332', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x332', '\x31D', 
		'\x3', '\x2', '\x2', '\x2', '\x332', '\x31F', '\x3', '\x2', '\x2', '\x2', 
		'\x332', '\x321', '\x3', '\x2', '\x2', '\x2', '\x332', '\x326', '\x3', 
		'\x2', '\x2', '\x2', '\x332', '\x327', '\x3', '\x2', '\x2', '\x2', '\x332', 
		'\x328', '\x3', '\x2', '\x2', '\x2', '\x332', '\x329', '\x3', '\x2', '\x2', 
		'\x2', '\x332', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x332', '\x32B', 
		'\x3', '\x2', '\x2', '\x2', '\x332', '\x32C', '\x3', '\x2', '\x2', '\x2', 
		'\x332', '\x32D', '\x3', '\x2', '\x2', '\x2', '\x332', '\x32E', '\x3', 
		'\x2', '\x2', '\x2', '\x333', '\x385', '\x3', '\x2', '\x2', '\x2', '\x334', 
		'\x335', '\f', '\x1E', '\x2', '\x2', '\x335', '\x336', '\a', '\x1D', '\x2', 
		'\x2', '\x336', '\x384', '\x5', 't', ';', '\x1E', '\x337', '\x338', '\f', 
		'\x1D', '\x2', '\x2', '\x338', '\x339', '\t', '\x2', '\x2', '\x2', '\x339', 
		'\x384', '\x5', 't', ';', '\x1E', '\x33A', '\x33B', '\f', '\x1C', '\x2', 
		'\x2', '\x33B', '\x33C', '\t', '\x3', '\x2', '\x2', '\x33C', '\x384', 
		'\x5', 't', ';', '\x1D', '\x33D', '\x33E', '\f', '\x1B', '\x2', '\x2', 
		'\x33E', '\x33F', '\a', '\x1E', '\x2', '\x2', '\x33F', '\x384', '\x5', 
		't', ';', '\x1C', '\x340', '\x341', '\f', '\x1A', '\x2', '\x2', '\x341', 
		'\x342', '\t', '\x4', '\x2', '\x2', '\x342', '\x384', '\x5', 't', ';', 
		'\x1B', '\x343', '\x344', '\f', '\x19', '\x2', '\x2', '\x344', '\x345', 
		'\t', '\x5', '\x2', '\x2', '\x345', '\x384', '\x5', 't', ';', '\x1A', 
		'\x346', '\x347', '\f', '\x18', '\x2', '\x2', '\x347', '\x348', '\a', 
		'K', '\x2', '\x2', '\x348', '\x384', '\x5', 't', ';', '\x19', '\x349', 
		'\x34A', '\f', '\x17', '\x2', '\x2', '\x34A', '\x34B', '\a', '\x61', '\x2', 
		'\x2', '\x34B', '\x384', '\x5', 't', ';', '\x18', '\x34C', '\x34D', '\f', 
		'\x16', '\x2', '\x2', '\x34D', '\x34E', '\t', '\x6', '\x2', '\x2', '\x34E', 
		'\x384', '\x5', 't', ';', '\x17', '\x34F', '\x350', '\f', '\x15', '\x2', 
		'\x2', '\x350', '\x351', '\a', ',', '\x2', '\x2', '\x351', '\x384', '\x5', 
		't', ';', '\x16', '\x352', '\x353', '\f', '\x14', '\x2', '\x2', '\x353', 
		'\x354', '\a', '-', '\x2', '\x2', '\x354', '\x384', '\x5', 't', ';', '\x15', 
		'\x355', '\x356', '\f', '\x13', '\x2', '\x2', '\x356', '\x357', '\a', 
		'.', '\x2', '\x2', '\x357', '\x384', '\x5', 't', ';', '\x14', '\x358', 
		'\x359', '\f', '\x12', '\x2', '\x2', '\x359', '\x35A', '\a', '/', '\x2', 
		'\x2', '\x35A', '\x384', '\x5', 't', ';', '\x13', '\x35B', '\x35C', '\f', 
		'\x11', '\x2', '\x2', '\x35C', '\x35D', '\a', '\x30', '\x2', '\x2', '\x35D', 
		'\x384', '\x5', 't', ';', '\x12', '\x35E', '\x35F', '\f', '\x10', '\x2', 
		'\x2', '\x35F', '\x360', '\a', '\x10', '\x2', '\x2', '\x360', '\x361', 
		'\x5', 't', ';', '\x2', '\x361', '\x362', '\a', '\x11', '\x2', '\x2', 
		'\x362', '\x363', '\x5', 't', ';', '\x11', '\x363', '\x384', '\x3', '\x2', 
		'\x2', '\x2', '\x364', '\x365', '\f', '\xF', '\x2', '\x2', '\x365', '\x366', 
		'\a', '\xF', '\x2', '\x2', '\x366', '\x384', '\x5', 't', ';', '\xF', '\x367', 
		'\x368', '\f', '\xE', '\x2', '\x2', '\x368', '\x369', '\x5', '\x96', 'L', 
		'\x2', '\x369', '\x36A', '\x5', 't', ';', '\xE', '\x36A', '\x384', '\x3', 
		'\x2', '\x2', '\x2', '\x36B', '\x36C', '\f', '/', '\x2', '\x2', '\x36C', 
		'\x36D', '\a', '\a', '\x2', '\x2', '\x36D', '\x36E', '\x5', 'r', ':', 
		'\x2', '\x36E', '\x36F', '\a', '\b', '\x2', '\x2', '\x36F', '\x384', '\x3', 
		'\x2', '\x2', '\x2', '\x370', '\x372', '\f', '.', '\x2', '\x2', '\x371', 
		'\x373', '\a', '\x10', '\x2', '\x2', '\x372', '\x371', '\x3', '\x2', '\x2', 
		'\x2', '\x372', '\x373', '\x3', '\x2', '\x2', '\x2', '\x373', '\x374', 
		'\x3', '\x2', '\x2', '\x2', '\x374', '\x376', '\a', '\x13', '\x2', '\x2', 
		'\x375', '\x377', '\a', '\x1F', '\x2', '\x2', '\x376', '\x375', '\x3', 
		'\x2', '\x2', '\x2', '\x376', '\x377', '\x3', '\x2', '\x2', '\x2', '\x377', 
		'\x378', '\x3', '\x2', '\x2', '\x2', '\x378', '\x384', '\x5', '\xA2', 
		'R', '\x2', '\x379', '\x37A', '\f', '-', '\x2', '\x2', '\x37A', '\x384', 
		'\x5', 'n', '\x38', '\x2', '\x37B', '\x37C', '\f', '*', '\x2', '\x2', 
		'\x37C', '\x37D', '\x6', ';', '\x1F', '\x2', '\x37D', '\x384', '\a', '\x14', 
		'\x2', '\x2', '\x37E', '\x37F', '\f', ')', '\x2', '\x2', '\x37F', '\x380', 
		'\x6', ';', '!', '\x2', '\x380', '\x384', '\a', '\x15', '\x2', '\x2', 
		'\x381', '\x382', '\f', '\f', '\x2', '\x2', '\x382', '\x384', '\a', 'z', 
		'\x2', '\x2', '\x383', '\x334', '\x3', '\x2', '\x2', '\x2', '\x383', '\x337', 
		'\x3', '\x2', '\x2', '\x2', '\x383', '\x33A', '\x3', '\x2', '\x2', '\x2', 
		'\x383', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x383', '\x340', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x343', '\x3', '\x2', '\x2', '\x2', '\x383', 
		'\x346', '\x3', '\x2', '\x2', '\x2', '\x383', '\x349', '\x3', '\x2', '\x2', 
		'\x2', '\x383', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x383', '\x34F', 
		'\x3', '\x2', '\x2', '\x2', '\x383', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\x383', '\x355', '\x3', '\x2', '\x2', '\x2', '\x383', '\x358', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x383', 
		'\x35E', '\x3', '\x2', '\x2', '\x2', '\x383', '\x364', '\x3', '\x2', '\x2', 
		'\x2', '\x383', '\x367', '\x3', '\x2', '\x2', '\x2', '\x383', '\x36B', 
		'\x3', '\x2', '\x2', '\x2', '\x383', '\x370', '\x3', '\x2', '\x2', '\x2', 
		'\x383', '\x379', '\x3', '\x2', '\x2', '\x2', '\x383', '\x37B', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x383', 
		'\x381', '\x3', '\x2', '\x2', '\x2', '\x384', '\x387', '\x3', '\x2', '\x2', 
		'\x2', '\x385', '\x383', '\x3', '\x2', '\x2', '\x2', '\x385', '\x386', 
		'\x3', '\x2', '\x2', '\x2', '\x386', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x387', '\x385', '\x3', '\x2', '\x2', '\x2', '\x388', '\x38A', '\x5', 
		'x', '=', '\x2', '\x389', '\x388', '\x3', '\x2', '\x2', '\x2', '\x38A', 
		'\x38B', '\x3', '\x2', '\x2', '\x2', '\x38B', '\x389', '\x3', '\x2', '\x2', 
		'\x2', '\x38B', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x38C', 'w', '\x3', 
		'\x2', '\x2', '\x2', '\x38D', '\x38E', '\a', '$', '\x2', '\x2', '\x38E', 
		'\x392', '\x5', '|', '?', '\x2', '\x38F', '\x391', '\x5', '\x82', '\x42', 
		'\x2', '\x390', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x391', '\x394', 
		'\x3', '\x2', '\x2', '\x2', '\x392', '\x390', '\x3', '\x2', '\x2', '\x2', 
		'\x392', '\x393', '\x3', '\x2', '\x2', '\x2', '\x393', '\x395', '\x3', 
		'\x2', '\x2', '\x2', '\x394', '\x392', '\x3', '\x2', '\x2', '\x2', '\x395', 
		'\x396', '\a', '\x82', '\x2', '\x2', '\x396', '\x397', '\x5', 'z', '>', 
		'\x2', '\x397', '\x398', '\a', '$', '\x2', '\x2', '\x398', '\x399', '\a', 
		'\x84', '\x2', '\x2', '\x399', '\x39A', '\x5', '~', '@', '\x2', '\x39A', 
		'\x39B', '\a', '\x82', '\x2', '\x2', '\x39B', '\x3B2', '\x3', '\x2', '\x2', 
		'\x2', '\x39C', '\x39D', '\a', '$', '\x2', '\x2', '\x39D', '\x3A1', '\x5', 
		'\x80', '\x41', '\x2', '\x39E', '\x3A0', '\x5', '\x82', '\x42', '\x2', 
		'\x39F', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x3A0', '\x3A3', '\x3', 
		'\x2', '\x2', '\x2', '\x3A1', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x3A1', 
		'\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A4', '\x3', '\x2', '\x2', 
		'\x2', '\x3A3', '\x3A1', '\x3', '\x2', '\x2', '\x2', '\x3A4', '\x3A5', 
		'\x5', 'z', '>', '\x2', '\x3A5', '\x3A6', '\a', '\x83', '\x2', '\x2', 
		'\x3A6', '\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A8', '\a', 
		'$', '\x2', '\x2', '\x3A8', '\x3AC', '\x5', '\x80', '\x41', '\x2', '\x3A9', 
		'\x3AB', '\x5', '\x82', '\x42', '\x2', '\x3AA', '\x3A9', '\x3', '\x2', 
		'\x2', '\x2', '\x3AB', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AA', 
		'\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', '\x3', '\x2', '\x2', '\x2', 
		'\x3AD', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3AE', '\x3AC', '\x3', 
		'\x2', '\x2', '\x2', '\x3AF', '\x3B0', '\a', '\x83', '\x2', '\x2', '\x3B0', 
		'\x3B2', '\x3', '\x2', '\x2', '\x2', '\x3B1', '\x38D', '\x3', '\x2', '\x2', 
		'\x2', '\x3B1', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3A7', 
		'\x3', '\x2', '\x2', '\x2', '\x3B2', 'y', '\x3', '\x2', '\x2', '\x2', 
		'\x3B3', '\x3B5', '\x5', '\x86', '\x44', '\x2', '\x3B4', '\x3B3', '\x3', 
		'\x2', '\x2', '\x2', '\x3B4', '\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B5', 
		'\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B9', '\x5', 'x', '=', 
		'\x2', '\x3B7', '\x3B9', '\x5', '\x8E', 'H', '\x2', '\x3B8', '\x3B6', 
		'\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3B7', '\x3', '\x2', '\x2', '\x2', 
		'\x3B9', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3BA', '\x3BC', '\x5', 
		'\x86', '\x44', '\x2', '\x3BB', '\x3BA', '\x3', '\x2', '\x2', '\x2', '\x3BB', 
		'\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BE', '\x3', '\x2', '\x2', 
		'\x2', '\x3BD', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3BE', '\x3C1', 
		'\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3BD', '\x3', '\x2', '\x2', '\x2', 
		'\x3BF', '\x3C0', '\x3', '\x2', '\x2', '\x2', '\x3C0', '{', '\x3', '\x2', 
		'\x2', '\x2', '\x3C1', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C3', 
		'\x5', '\x80', '\x41', '\x2', '\x3C3', '\x3C4', '\b', '?', '\x1', '\x2', 
		'\x3C4', '}', '\x3', '\x2', '\x2', '\x2', '\x3C5', '\x3C6', '\x5', '\x80', 
		'\x41', '\x2', '\x3C6', '\x3C7', '\x6', '@', '#', '\x3', '\x3C7', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x3C8', '\x3C9', '\a', '\x85', '\x2', '\x2', 
		'\x3C9', '\x81', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CB', '\x5', 
		'\x84', '\x43', '\x2', '\x3CB', '\x3CC', '\a', '\x86', '\x2', '\x2', '\x3CC', 
		'\x3CD', '\x5', '\x88', '\x45', '\x2', '\x3CD', '\x3D0', '\x3', '\x2', 
		'\x2', '\x2', '\x3CE', '\x3D0', '\x5', '\x84', '\x43', '\x2', '\x3CF', 
		'\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3CE', '\x3', '\x2', '\x2', 
		'\x2', '\x3D0', '\x83', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3D2', 
		'\a', '\x85', '\x2', '\x2', '\x3D2', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x3D3', '\x3D5', '\n', '\a', '\x2', '\x2', '\x3D4', '\x3D3', '\x3', '\x2', 
		'\x2', '\x2', '\x3D5', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D4', 
		'\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D7', '\x3', '\x2', '\x2', '\x2', 
		'\x3D7', '\x87', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3DB', '\a', '\x88', 
		'\x2', '\x2', '\x3D9', '\x3DB', '\x5', '\x8E', 'H', '\x2', '\x3DA', '\x3D8', 
		'\x3', '\x2', '\x2', '\x2', '\x3DA', '\x3D9', '\x3', '\x2', '\x2', '\x2', 
		'\x3DB', '\x89', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3E0', '\x5', 
		'\xA4', 'S', '\x2', '\x3DD', '\x3E0', '\x5', '\x64', '\x33', '\x2', '\x3DE', 
		'\x3E0', '\x5', '\x8C', 'G', '\x2', '\x3DF', '\x3DC', '\x3', '\x2', '\x2', 
		'\x2', '\x3DF', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3DE', 
		'\x3', '\x2', '\x2', '\x2', '\x3E0', '\x8B', '\x3', '\x2', '\x2', '\x2', 
		'\x3E1', '\x3EA', '\a', '\v', '\x2', '\x2', '\x3E2', '\x3E7', '\x5', 'j', 
		'\x36', '\x2', '\x3E3', '\x3E4', '\a', '\xE', '\x2', '\x2', '\x3E4', '\x3E6', 
		'\x5', 'j', '\x36', '\x2', '\x3E5', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\x3E6', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3E7', '\x3E5', '\x3', 
		'\x2', '\x2', '\x2', '\x3E7', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3E8', 
		'\x3EB', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3E7', '\x3', '\x2', '\x2', 
		'\x2', '\x3EA', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3EB', 
		'\x3', '\x2', '\x2', '\x2', '\x3EB', '\x3ED', '\x3', '\x2', '\x2', '\x2', 
		'\x3EC', '\x3EE', '\a', '\xE', '\x2', '\x2', '\x3ED', '\x3EC', '\x3', 
		'\x2', '\x2', '\x2', '\x3ED', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3EE', 
		'\x3EF', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x3F0', '\a', '\f', '\x2', 
		'\x2', '\x3F0', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3F2', 
		'\a', '\v', '\x2', '\x2', '\x3F2', '\x3F3', '\x5', 'r', ':', '\x2', '\x3F3', 
		'\x3F4', '\a', '\f', '\x2', '\x2', '\x3F4', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x3F5', '\x40E', '\x5', 'P', ')', '\x2', '\x3F6', '\x3F8', '\a', 
		'l', '\x2', '\x2', '\x3F7', '\x3F6', '\x3', '\x2', '\x2', '\x2', '\x3F7', 
		'\x3F8', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3F9', '\x3', '\x2', '\x2', 
		'\x2', '\x3F9', '\x3FB', '\a', 'Z', '\x2', '\x2', '\x3FA', '\x3FC', '\a', 
		'\x1A', '\x2', '\x2', '\x3FB', '\x3FA', '\x3', '\x2', '\x2', '\x2', '\x3FB', 
		'\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\x3', '\x2', '\x2', 
		'\x2', '\x3FD', '\x3FF', '\a', '\t', '\x2', '\x2', '\x3FE', '\x400', '\x5', 
		'Z', '.', '\x2', '\x3FF', '\x3FE', '\x3', '\x2', '\x2', '\x2', '\x3FF', 
		'\x400', '\x3', '\x2', '\x2', '\x2', '\x400', '\x401', '\x3', '\x2', '\x2', 
		'\x2', '\x401', '\x402', '\a', '\n', '\x2', '\x2', '\x402', '\x403', '\a', 
		'\v', '\x2', '\x2', '\x403', '\x404', '\x5', '`', '\x31', '\x2', '\x404', 
		'\x405', '\a', '\f', '\x2', '\x2', '\x405', '\x40E', '\x3', '\x2', '\x2', 
		'\x2', '\x406', '\x408', '\a', 'l', '\x2', '\x2', '\x407', '\x406', '\x3', 
		'\x2', '\x2', '\x2', '\x407', '\x408', '\x3', '\x2', '\x2', '\x2', '\x408', 
		'\x409', '\x3', '\x2', '\x2', '\x2', '\x409', '\x40A', '\x5', '\x92', 
		'J', '\x2', '\x40A', '\x40B', '\a', '=', '\x2', '\x2', '\x40B', '\x40C', 
		'\x5', '\x94', 'K', '\x2', '\x40C', '\x40E', '\x3', '\x2', '\x2', '\x2', 
		'\x40D', '\x3F5', '\x3', '\x2', '\x2', '\x2', '\x40D', '\x3F7', '\x3', 
		'\x2', '\x2', '\x2', '\x40D', '\x407', '\x3', '\x2', '\x2', '\x2', '\x40E', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x40F', '\x416', '\x5', '\xA4', 'S', 
		'\x2', '\x410', '\x412', '\a', '\t', '\x2', '\x2', '\x411', '\x413', '\x5', 
		'Z', '.', '\x2', '\x412', '\x411', '\x3', '\x2', '\x2', '\x2', '\x412', 
		'\x413', '\x3', '\x2', '\x2', '\x2', '\x413', '\x414', '\x3', '\x2', '\x2', 
		'\x2', '\x414', '\x416', '\a', '\n', '\x2', '\x2', '\x415', '\x40F', '\x3', 
		'\x2', '\x2', '\x2', '\x415', '\x410', '\x3', '\x2', '\x2', '\x2', '\x416', 
		'\x93', '\x3', '\x2', '\x2', '\x2', '\x417', '\x41D', '\x5', 't', ';', 
		'\x2', '\x418', '\x419', '\a', '\v', '\x2', '\x2', '\x419', '\x41A', '\x5', 
		'`', '\x31', '\x2', '\x41A', '\x41B', '\a', '\f', '\x2', '\x2', '\x41B', 
		'\x41D', '\x3', '\x2', '\x2', '\x2', '\x41C', '\x417', '\x3', '\x2', '\x2', 
		'\x2', '\x41C', '\x418', '\x3', '\x2', '\x2', '\x2', '\x41D', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x41E', '\x41F', '\t', '\b', '\x2', '\x2', 
		'\x41F', '\x97', '\x3', '\x2', '\x2', '\x2', '\x420', '\x428', '\a', '>', 
		'\x2', '\x2', '\x421', '\x428', '\a', '?', '\x2', '\x2', '\x422', '\x428', 
		'\a', 'y', '\x2', '\x2', '\x423', '\x428', '\a', 'z', '\x2', '\x2', '\x424', 
		'\x428', '\a', '\x6', '\x2', '\x2', '\x425', '\x428', '\x5', '\x9A', 'N', 
		'\x2', '\x426', '\x428', '\x5', '\x9C', 'O', '\x2', '\x427', '\x420', 
		'\x3', '\x2', '\x2', '\x2', '\x427', '\x421', '\x3', '\x2', '\x2', '\x2', 
		'\x427', '\x422', '\x3', '\x2', '\x2', '\x2', '\x427', '\x423', '\x3', 
		'\x2', '\x2', '\x2', '\x427', '\x424', '\x3', '\x2', '\x2', '\x2', '\x427', 
		'\x425', '\x3', '\x2', '\x2', '\x2', '\x427', '\x426', '\x3', '\x2', '\x2', 
		'\x2', '\x428', '\x99', '\x3', '\x2', '\x2', '\x2', '\x429', '\x42A', 
		'\t', '\t', '\x2', '\x2', '\x42A', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x42B', '\x42C', '\t', '\n', '\x2', '\x2', '\x42C', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x42D', '\x42E', '\x5', '\xA4', 'S', '\x2', '\x42E', '\x42F', 
		'\x6', 'P', '$', '\x2', '\x42F', '\x430', '\x5', 'l', '\x37', '\x2', '\x430', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\x431', '\x432', '\x5', '\xA4', 'S', 
		'\x2', '\x432', '\x433', '\x6', 'Q', '%', '\x2', '\x433', '\x434', '\x5', 
		'l', '\x37', '\x2', '\x434', '\xA1', '\x3', '\x2', '\x2', '\x2', '\x435', 
		'\x438', '\x5', '\xA4', 'S', '\x2', '\x436', '\x438', '\x5', '\xA6', 'T', 
		'\x2', '\x437', '\x435', '\x3', '\x2', '\x2', '\x2', '\x437', '\x436', 
		'\x3', '\x2', '\x2', '\x2', '\x438', '\xA3', '\x3', '\x2', '\x2', '\x2', 
		'\x439', '\x43A', '\t', '\v', '\x2', '\x2', '\x43A', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\x43B', '\x43F', '\x5', '\xA8', 'U', '\x2', '\x43C', '\x43F', 
		'\a', '>', '\x2', '\x2', '\x43D', '\x43F', '\a', '?', '\x2', '\x2', '\x43E', 
		'\x43B', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x43C', '\x3', '\x2', '\x2', 
		'\x2', '\x43E', '\x43D', '\x3', '\x2', '\x2', '\x2', '\x43F', '\xA7', 
		'\x3', '\x2', '\x2', '\x2', '\x440', '\x46F', '\a', 'I', '\x2', '\x2', 
		'\x441', '\x46F', '\a', 'J', '\x2', '\x2', '\x442', '\x46F', '\a', 'K', 
		'\x2', '\x2', '\x443', '\x46F', '\a', 'L', '\x2', '\x2', '\x444', '\x46F', 
		'\a', 'M', '\x2', '\x2', '\x445', '\x46F', '\a', 'N', '\x2', '\x2', '\x446', 
		'\x46F', '\a', 'O', '\x2', '\x2', '\x447', '\x46F', '\a', 'P', '\x2', 
		'\x2', '\x448', '\x46F', '\a', 'Q', '\x2', '\x2', '\x449', '\x46F', '\a', 
		'R', '\x2', '\x2', '\x44A', '\x46F', '\a', 'S', '\x2', '\x2', '\x44B', 
		'\x46F', '\a', 'T', '\x2', '\x2', '\x44C', '\x46F', '\a', 'U', '\x2', 
		'\x2', '\x44D', '\x46F', '\a', 'V', '\x2', '\x2', '\x44E', '\x46F', '\a', 
		'W', '\x2', '\x2', '\x44F', '\x46F', '\a', 'X', '\x2', '\x2', '\x450', 
		'\x46F', '\a', 'Y', '\x2', '\x2', '\x451', '\x46F', '\a', 'Z', '\x2', 
		'\x2', '\x452', '\x46F', '\a', '[', '\x2', '\x2', '\x453', '\x46F', '\a', 
		'\\', '\x2', '\x2', '\x454', '\x46F', '\a', ']', '\x2', '\x2', '\x455', 
		'\x46F', '\a', '^', '\x2', '\x2', '\x456', '\x46F', '\a', '_', '\x2', 
		'\x2', '\x457', '\x46F', '\a', '`', '\x2', '\x2', '\x458', '\x46F', '\a', 
		'\x61', '\x2', '\x2', '\x459', '\x46F', '\a', '\x62', '\x2', '\x2', '\x45A', 
		'\x46F', '\a', '\x65', '\x2', '\x2', '\x45B', '\x46F', '\a', '\x66', '\x2', 
		'\x2', '\x45C', '\x46F', '\a', 'g', '\x2', '\x2', '\x45D', '\x46F', '\a', 
		'h', '\x2', '\x2', '\x45E', '\x46F', '\a', 'i', '\x2', '\x2', '\x45F', 
		'\x46F', '\a', 'j', '\x2', '\x2', '\x460', '\x46F', '\a', 'k', '\x2', 
		'\x2', '\x461', '\x46F', '\a', 'n', '\x2', '\x2', '\x462', '\x46F', '\x5', 
		'\xAA', 'V', '\x2', '\x463', '\x46F', '\a', 'q', '\x2', '\x2', '\x464', 
		'\x46F', '\a', 'r', '\x2', '\x2', '\x465', '\x46F', '\a', 's', '\x2', 
		'\x2', '\x466', '\x46F', '\a', 't', '\x2', '\x2', '\x467', '\x46F', '\a', 
		'u', '\x2', '\x2', '\x468', '\x46F', '\a', 'v', '\x2', '\x2', '\x469', 
		'\x46F', '\a', 'w', '\x2', '\x2', '\x46A', '\x46F', '\a', 'l', '\x2', 
		'\x2', '\x46B', '\x46F', '\a', 'm', '\x2', '\x2', '\x46C', '\x46F', '\a', 
		'\x64', '\x2', '\x2', '\x46D', '\x46F', '\a', '\x63', '\x2', '\x2', '\x46E', 
		'\x440', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x441', '\x3', '\x2', '\x2', 
		'\x2', '\x46E', '\x442', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x443', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x444', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x445', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x446', '\x3', 
		'\x2', '\x2', '\x2', '\x46E', '\x447', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x448', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x449', '\x3', '\x2', '\x2', 
		'\x2', '\x46E', '\x44A', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x44B', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x44C', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x44D', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x44E', '\x3', 
		'\x2', '\x2', '\x2', '\x46E', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x450', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x451', '\x3', '\x2', '\x2', 
		'\x2', '\x46E', '\x452', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x453', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x454', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x455', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x456', '\x3', 
		'\x2', '\x2', '\x2', '\x46E', '\x457', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x458', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x459', '\x3', '\x2', '\x2', 
		'\x2', '\x46E', '\x45A', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x45B', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x45C', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x45E', '\x3', 
		'\x2', '\x2', '\x2', '\x46E', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x460', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x461', '\x3', '\x2', '\x2', 
		'\x2', '\x46E', '\x462', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x463', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x464', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x465', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x466', '\x3', 
		'\x2', '\x2', '\x2', '\x46E', '\x467', '\x3', '\x2', '\x2', '\x2', '\x46E', 
		'\x468', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x469', '\x3', '\x2', '\x2', 
		'\x2', '\x46E', '\x46A', '\x3', '\x2', '\x2', '\x2', '\x46E', '\x46B', 
		'\x3', '\x2', '\x2', '\x2', '\x46E', '\x46C', '\x3', '\x2', '\x2', '\x2', 
		'\x46E', '\x46D', '\x3', '\x2', '\x2', '\x2', '\x46F', '\xA9', '\x3', 
		'\x2', '\x2', '\x2', '\x470', '\x471', '\t', '\f', '\x2', '\x2', '\x471', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\x472', '\x477', '\a', '\r', '\x2', 
		'\x2', '\x473', '\x477', '\a', '\x2', '\x2', '\x3', '\x474', '\x477', 
		'\x6', 'W', '&', '\x2', '\x475', '\x477', '\x6', 'W', '\'', '\x2', '\x476', 
		'\x472', '\x3', '\x2', '\x2', '\x2', '\x476', '\x473', '\x3', '\x2', '\x2', 
		'\x2', '\x476', '\x474', '\x3', '\x2', '\x2', '\x2', '\x476', '\x475', 
		'\x3', '\x2', '\x2', '\x2', '\x477', '\xAD', '\x3', '\x2', '\x2', '\x2', 
		'~', '\xAF', '\xB2', '\xCC', '\xD0', '\xD7', '\xDD', '\xE1', '\xE8', '\xF0', 
		'\xF5', '\xF7', '\x100', '\x104', '\x10C', '\x111', '\x11A', '\x122', 
		'\x126', '\x12B', '\x136', '\x13C', '\x14B', '\x15F', '\x163', '\x167', 
		'\x16F', '\x178', '\x17D', '\x185', '\x18A', '\x18F', '\x196', '\x19D', 
		'\x1A6', '\x1AB', '\x1BD', '\x1C1', '\x1C3', '\x1CA', '\x1D0', '\x1D5', 
		'\x1E4', '\x1E7', '\x1EC', '\x1EF', '\x1FA', '\x1FE', '\x203', '\x210', 
		'\x216', '\x21F', '\x221', '\x22A', '\x22E', '\x234', '\x237', '\x23A', 
		'\x23F', '\x247', '\x24A', '\x254', '\x257', '\x25C', '\x263', '\x26A', 
		'\x26F', '\x272', '\x277', '\x27D', '\x282', '\x28B', '\x28F', '\x294', 
		'\x299', '\x29F', '\x2A3', '\x2B2', '\x2B5', '\x2BA', '\x2D1', '\x2D4', 
		'\x2DD', '\x2E5', '\x2E9', '\x2EB', '\x2F0', '\x2F4', '\x2FB', '\x302', 
		'\x308', '\x332', '\x372', '\x376', '\x383', '\x385', '\x38B', '\x392', 
		'\x3A1', '\x3AC', '\x3B1', '\x3B4', '\x3B8', '\x3BB', '\x3BF', '\x3CF', 
		'\x3D6', '\x3DA', '\x3DF', '\x3E7', '\x3EA', '\x3ED', '\x3F7', '\x3FB', 
		'\x3FF', '\x407', '\x40D', '\x412', '\x415', '\x41C', '\x427', '\x437', 
		'\x43E', '\x46E', '\x476',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
