<?xml version="1.0" encoding="utf-8"?>
<class id="2d5d0432-69ab-46c5-9aa3-78efad0bea4e" type="Package Extension" typeId="ab4152df-3add-4a08-81b6-0fefc7cbb204">
  <name>Services Extension</name>
  <display>Services Extension: Services Package</display>
  <isAbstract>false</isAbstract>
  <sort-children>by-type-then-by-name</sort-children>
  <genericTypes />
  <typeReference id="45c48daa-e5d9-49c2-9b19-5ecdb512fecc">
    <typeId>df45eaf6-9202-4c25-8dd5-677e9ba1e906</typeId>
    <isNavigable>true</isNavigable>
    <isNullable>false</isNullable>
    <isCollection>false</isCollection>
    <isRequired>true</isRequired>
    <typePackageName>Intent.Modelers.Services</typePackageName>
    <typePackageId>4ba53041-59f9-4446-a207-6da4fbdf86fe</typePackageId>
    <stereotypes />
    <genericTypeParameters />
  </typeReference>
  <isMapped>false</isMapped>
  <parentFolderId>f36cb21a-faf9-46ff-85e7-41f38345253d</parentFolderId>
  <packageId>bff48d8d-9246-4ad7-9dda-9703b7139b86</packageId>
  <packageName>Intent.Modelers.Services.DomainInteractions</packageName>
  <stereotypes />
  <metadata />
  <childElements>
    <childElement id="c6be2321-5bf0-4a2a-8718-18b99b881791" type="Context Menu" typeId="d45e383d-90ba-4b64-aca7-34ca100cea21">
      <name>[context menu]</name>
      <display>[context menu]</display>
      <isAbstract>false</isAbstract>
      <sort-children>by-type-then-manually</sort-children>
      <genericTypes />
      <isMapped>false</isMapped>
      <parentFolderId>2d5d0432-69ab-46c5-9aa3-78efad0bea4e</parentFolderId>
      <packageId>bff48d8d-9246-4ad7-9dda-9703b7139b86</packageId>
      <packageName>Intent.Modelers.Services.DomainInteractions</packageName>
      <stereotypes />
      <metadata />
      <childElements>
        <childElement id="ca791e1c-d9f4-44a0-a977-75193467d511" type="Run Script Option" typeId="345d46fb-c500-409a-88c7-26720572c9af">
          <name>Create CRUD CQRS Services</name>
          <display>Create CRUD CQRS Services: Script</display>
          <isAbstract>false</isAbstract>
          <genericTypes />
          <typeReference id="9a9dbb45-55da-42da-80ef-9f3c3b37f62a">
            <typeId>043eee26-1591-42ac-9f2c-fc911b070eb1</typeId>
            <isNavigable>true</isNavigable>
            <isNullable>false</isNullable>
            <isCollection>false</isCollection>
            <isRequired>true</isRequired>
            <typePackageName>Intent.ModuleBuilder</typePackageName>
            <typePackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</typePackageId>
            <stereotypes />
            <genericTypeParameters />
          </typeReference>
          <isMapped>false</isMapped>
          <parentFolderId>c6be2321-5bf0-4a2a-8718-18b99b881791</parentFolderId>
          <packageId>bff48d8d-9246-4ad7-9dda-9703b7139b86</packageId>
          <packageName>Intent.Modelers.Services.DomainInteractions</packageName>
          <stereotypes>
            <stereotype stereotypeDefinitionId="56bc0465-c1fe-4bca-9493-2a3ce88a4047" name="Script Settings">
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="73a4088f-626e-4d31-b0b2-113167f015b2" display="Script" value="/// &lt;reference path=&quot;../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;function getSurrogateKeyType() {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const commonTypes = {&#xD;&#xA;        guid: &quot;6b649125-18ea-48fd-a6ba-0bfff0d8f488&quot;,&#xD;&#xA;        long: &quot;33013006-E404-48C2-AC46-24EF5A5774FD&quot;,&#xD;&#xA;        int: &quot;fb0a362d-e9e2-40de-b6ff-5ce8167cbe74&quot;&#xD;&#xA;    };&#xD;&#xA;    const javaTypes = {&#xD;&#xA;        long: &quot;e9e575eb-f8de-4ce4-9838-2d09665a752d&quot;,&#xD;&#xA;        int: &quot;b3e5cb3b-8a26-4346-810b-9789afa25a82&quot;&#xD;&#xA;    };&#xD;&#xA;    const typeNameToIdMap = new Map();&#xD;&#xA;    typeNameToIdMap.set(&quot;guid&quot;, commonTypes.guid);&#xD;&#xA;    typeNameToIdMap.set(&quot;int&quot;, lookup(javaTypes.int) != null ? javaTypes.int : commonTypes.int);&#xD;&#xA;    typeNameToIdMap.set(&quot;long&quot;, lookup(javaTypes.long) != null ? javaTypes.long : commonTypes.long);&#xD;&#xA;    let typeName = (_c = (_b = (_a = application.getSettings(&quot;ac0a788e-d8b3-4eea-b56d-538608f1ded9&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Key Type&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;int&quot;;&#xD;&#xA;    if (typeNameToIdMap.has(typeName)) {&#xD;&#xA;        return typeNameToIdMap.get(typeName);&#xD;&#xA;    }&#xD;&#xA;    return typeNameToIdMap.get(&quot;guid&quot;);&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;getSurrogateKeyType.ts&quot;/&gt;&#xD;&#xA;class DomainHelper {&#xD;&#xA;    static async openSelectEntityDialog(options) {&#xD;&#xA;        let classes = lookupTypesOf(&quot;Class&quot;).filter(x =&gt; DomainHelper.isAggregateRoot(x) || ((options === null || options === void 0 ? void 0 : options.includeOwnedRelationships) != false &amp;&amp; DomainHelper.ownerIsAggregateRoot(x)) || x.hasStereotype(&quot;Repository&quot;));&#xD;&#xA;        if (classes.length == 0) {&#xD;&#xA;            await dialogService.info(&quot;No Domain types could be found. Please ensure that you have a reference to the Domain package and that at least one class exists in it.&quot;);&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        let classId = await dialogService.lookupFromOptions(classes.map((x) =&gt; ({&#xD;&#xA;            id: x.id,&#xD;&#xA;            name: this.getFriendlyDisplayNameForClassSelection(x)&#xD;&#xA;        })));&#xD;&#xA;        if (classId == null) {&#xD;&#xA;            await dialogService.error(`No class found with id &quot;${classId}&quot;.`);&#xD;&#xA;            return null;&#xD;&#xA;        }&#xD;&#xA;        let foundEntity = lookup(classId);&#xD;&#xA;        return foundEntity;&#xD;&#xA;    }&#xD;&#xA;    static getFriendlyDisplayNameForClassSelection(element) {&#xD;&#xA;        let found = DomainHelper.getOwningAggregate(element);&#xD;&#xA;        return !found ? element.getName() : `${element.getName()} (${found.getName()})`;&#xD;&#xA;    }&#xD;&#xA;    static isAggregateRoot(element) {&#xD;&#xA;        let result = !element.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .some(x =&gt; x.isSourceEnd() &amp;&amp; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable);&#xD;&#xA;        return result;&#xD;&#xA;    }&#xD;&#xA;    static getOwningAggregate(entity) {&#xD;&#xA;        var _a;&#xD;&#xA;        let result = (_a = entity.getAssociations(&quot;Association&quot;)&#xD;&#xA;            .filter(x =&gt; this.isAggregateRoot(x.typeReference.getType()) &amp;&amp; isOwnedBy(x) &amp;&amp;&#xD;&#xA;            // Let's only target collections for now as part of the nested compositional crud support&#xD;&#xA;            // as one-to-one relationships are more expensive to address and possibly not going to&#xD;&#xA;            // be needed.&#xD;&#xA;            x.getOtherEnd().typeReference.isCollection)[0]) === null || _a === void 0 ? void 0 : _a.typeReference.getType();&#xD;&#xA;        return result;&#xD;&#xA;        function isOwnedBy(association) {&#xD;&#xA;            return association.isSourceEnd() &amp;&amp;&#xD;&#xA;                !association.typeReference.isNullable &amp;&amp;&#xD;&#xA;                !association.typeReference.isCollection;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static ownerIsAggregateRoot(entity) {&#xD;&#xA;        let result = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        return result ? true : false;&#xD;&#xA;    }&#xD;&#xA;    static getPrimaryKeys(entity) {&#xD;&#xA;        if (!entity) {&#xD;&#xA;            throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;        }&#xD;&#xA;        let primaryKeys = DomainHelper.getPrimaryKeysMap(entity);&#xD;&#xA;        if (Object.keys(primaryKeys).length == 0) {&#xD;&#xA;            return [&#xD;&#xA;                {&#xD;&#xA;                    id: null,&#xD;&#xA;                    name: DomainHelper.getAttributeNameFormat(&quot;Id&quot;),&#xD;&#xA;                    typeId: DomainHelper.getSurrogateKeyType(),&#xD;&#xA;                    mapPath: null,&#xD;&#xA;                    isNullable: false,&#xD;&#xA;                    isCollection: false&#xD;&#xA;                }&#xD;&#xA;            ];&#xD;&#xA;        }&#xD;&#xA;        return Object.values(primaryKeys);&#xD;&#xA;    }&#xD;&#xA;    static getPrimaryKeysMap(entity) {&#xD;&#xA;        let keydict = Object.create(null);&#xD;&#xA;        let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        keys.forEach(key =&gt; keydict[key.id] = {&#xD;&#xA;            id: key.id,&#xD;&#xA;            name: key.getName(),&#xD;&#xA;            typeId: key.typeReference.typeId,&#xD;&#xA;            mapPath: [key.id],&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);&#xD;&#xA;        return keydict;&#xD;&#xA;        function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {&#xD;&#xA;            if (!curEntity) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;            if (generalizations.length == 0) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalization = generalizations[0];&#xD;&#xA;            generalizationStack.push(generalization.id);&#xD;&#xA;            let nextEntity = generalization.typeReference.getType();&#xD;&#xA;            let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;            baseKeys.forEach(key =&gt; {&#xD;&#xA;                keydict[key.id] = {&#xD;&#xA;                    id: key.id,&#xD;&#xA;                    name: key.getName(),&#xD;&#xA;                    typeId: key.typeReference.typeId,&#xD;&#xA;                    mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                    isNullable: key.typeReference.isNullable,&#xD;&#xA;                    isCollection: key.typeReference.isCollection&#xD;&#xA;                };&#xD;&#xA;            });&#xD;&#xA;            traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static getForeignKeys(entity, owningAggregate) {&#xD;&#xA;        var _a;&#xD;&#xA;        if (!entity) {&#xD;&#xA;            throw new Error(&quot;entity not specified&quot;);&#xD;&#xA;        }&#xD;&#xA;        if (!owningAggregate) {&#xD;&#xA;            throw new Error(&quot;nestedCompOwner not specified&quot;);&#xD;&#xA;        }&#xD;&#xA;        // Use the new Associated property on the FK stereotype method for FK Attribute lookup&#xD;&#xA;        let foreignKeys = [];&#xD;&#xA;        for (let attr of entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Foreign Key&quot;))) {&#xD;&#xA;            let associationId = (_a = attr.getStereotype(&quot;Foreign Key&quot;).getProperty(&quot;Association&quot;)) === null || _a === void 0 ? void 0 : _a.getValue();&#xD;&#xA;            if (owningAggregate.getAssociations(&quot;Association&quot;).some(x =&gt; x.id == associationId)) {&#xD;&#xA;                foreignKeys.push(attr);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        // Backward compatible lookup method&#xD;&#xA;        if (foreignKeys.length == 0) {&#xD;&#xA;            let foundFk = entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;                .filter(x =&gt; x.getName().toLowerCase().indexOf(owningAggregate.getName().toLowerCase()) &gt;= 0 &amp;&amp; x.hasStereotype(&quot;Foreign Key&quot;))[0];&#xD;&#xA;            if (foundFk) {&#xD;&#xA;                foreignKeys.push(foundFk);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        if (foreignKeys.length &gt; 0) {&#xD;&#xA;            return foreignKeys.map(x =&gt; ({&#xD;&#xA;                name: DomainHelper.getAttributeNameFormat(x.getName()),&#xD;&#xA;                typeId: x.typeReference.typeId,&#xD;&#xA;                id: x.id,&#xD;&#xA;                mapPath: [x.id],&#xD;&#xA;                isCollection: x.typeReference.isCollection,&#xD;&#xA;                isNullable: x.typeReference.isNullable&#xD;&#xA;            }));&#xD;&#xA;        }&#xD;&#xA;        // Implicit FKs:&#xD;&#xA;        return [{&#xD;&#xA;                name: DomainHelper.getAttributeNameFormat(`${owningAggregate.getName()}Id`),&#xD;&#xA;                typeId: DomainHelper.getPrimaryKeys(owningAggregate)[0].typeId,&#xD;&#xA;                id: null,&#xD;&#xA;                mapPath: null,&#xD;&#xA;                isCollection: false,&#xD;&#xA;                isNullable: false&#xD;&#xA;            }];&#xD;&#xA;    }&#xD;&#xA;    static getChildrenOfType(entity, type) {&#xD;&#xA;        let attrDict = Object.create(null);&#xD;&#xA;        let attributes = entity.getChildren(type);&#xD;&#xA;        attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;            id: attr.id,&#xD;&#xA;            name: attr.getName(),&#xD;&#xA;            typeId: attr.typeReference.typeId,&#xD;&#xA;            mapPath: [attr.id],&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;        return Object.values(attrDict);&#xD;&#xA;    }&#xD;&#xA;    static getAttributesWithMapPath(entity) {&#xD;&#xA;        let attrDict = Object.create(null);&#xD;&#xA;        let attributes = entity&#xD;&#xA;            .getChildren(&quot;Attribute&quot;)&#xD;&#xA;            .filter(x =&gt; {&#xD;&#xA;            var _a;&#xD;&#xA;            return !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp;&#xD;&#xA;                !DomainHelper.legacyPartitionKey(x) &amp;&amp;&#xD;&#xA;                (x[&quot;hasMetadata&quot;] &amp;&amp; (!x.hasMetadata(&quot;set-by-infrastructure&quot;) || ((_a = x.getMetadata(&quot;set-by-infrastructure&quot;)) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) != &quot;true&quot;));&#xD;&#xA;        });&#xD;&#xA;        attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;            id: attr.id,&#xD;&#xA;            name: attr.getName(),&#xD;&#xA;            typeId: attr.typeReference.typeId,&#xD;&#xA;            mapPath: [attr.id],&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForAttributes(attrDict, entity, []);&#xD;&#xA;        return Object.values(attrDict);&#xD;&#xA;        function traverseInheritanceHierarchyForAttributes(attrDict, curEntity, generalizationStack) {&#xD;&#xA;            if (!curEntity) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;            if (generalizations.length == 0) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let generalization = generalizations[0];&#xD;&#xA;            generalizationStack.push(generalization.id);&#xD;&#xA;            let nextEntity = generalization.typeReference.getType();&#xD;&#xA;            let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !DomainHelper.legacyPartitionKey(x));&#xD;&#xA;            baseKeys.forEach(attr =&gt; {&#xD;&#xA;                attrDict[attr.id] = {&#xD;&#xA;                    id: attr.id,&#xD;&#xA;                    name: attr.getName(),&#xD;&#xA;                    typeId: attr.typeReference.typeId,&#xD;&#xA;                    mapPath: generalizationStack.concat([attr.id]),&#xD;&#xA;                    isNullable: attr.typeReference.isNullable,&#xD;&#xA;                    isCollection: attr.typeReference.isCollection&#xD;&#xA;                };&#xD;&#xA;            });&#xD;&#xA;            traverseInheritanceHierarchyForAttributes(attrDict, nextEntity, generalizationStack);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static getAttributeNameFormat(str) {&#xD;&#xA;        let convention = DomainHelper.getDomainAttributeNamingConvention();&#xD;&#xA;        switch (convention) {&#xD;&#xA;            case &quot;pascal-case&quot;:&#xD;&#xA;                return toPascalCase(str);&#xD;&#xA;            case &quot;camel-case&quot;:&#xD;&#xA;                return toCamelCase(str);&#xD;&#xA;        }&#xD;&#xA;        return str;&#xD;&#xA;    }&#xD;&#xA;    static getDomainAttributeNamingConvention() {&#xD;&#xA;        var _a, _b, _c;&#xD;&#xA;        const domainSettingsId = &quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;;&#xD;&#xA;        return (_c = (_b = (_a = application.getSettings(domainSettingsId)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Attribute Naming Convention&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;pascal-case&quot;;&#xD;&#xA;    }&#xD;&#xA;    static getSurrogateKeyType() {&#xD;&#xA;        return getSurrogateKeyType();&#xD;&#xA;    }&#xD;&#xA;    // Just in case someone still uses this convention. Used to filter out those attributes when mapping&#xD;&#xA;    // to domain entities that are within a Cosmos DB paradigm.&#xD;&#xA;    static legacyPartitionKey(attribute) {&#xD;&#xA;        return attribute.hasStereotype(&quot;Partition Key&quot;) &amp;&amp; attribute.getName() === &quot;PartitionKey&quot;;&#xD;&#xA;    }&#xD;&#xA;    static requiresForeignKey(associationEnd) {&#xD;&#xA;        return DomainHelper.isManyToVariantsOfOne(associationEnd) || DomainHelper.isSelfReferencingZeroToOne(associationEnd);&#xD;&#xA;    }&#xD;&#xA;    static isManyToVariantsOfOne(associationEnd) {&#xD;&#xA;        return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.getOtherEnd().typeReference.isCollection;&#xD;&#xA;    }&#xD;&#xA;    static isSelfReferencingZeroToOne(associationEnd) {&#xD;&#xA;        return !associationEnd.typeReference.isCollection &amp;&amp; associationEnd.typeReference.isNullable &amp;&amp;&#xD;&#xA;            associationEnd.typeReference.typeId == associationEnd.getOtherEnd().typeReference.typeId;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;;&#xD;&#xA;class ServicesConstants {&#xD;&#xA;}&#xD;&#xA;ServicesConstants.dtoToEntityMappingId = &quot;942eae46-49f1-450e-9274-a92d40ac35fa&quot;; //&quot;01d74d4f-e478-4fde-a2f0-9ea92255f3c5&quot;;&#xD;&#xA;ServicesConstants.dtoFromEntityMappingId = &quot;1f747d14-681c-4a20-8c68-34223f41b825&quot;;&#xD;&#xA;class ServicesHelper {&#xD;&#xA;    static addDtoFieldsFromDomain(dto, attributes) {&#xD;&#xA;        var _a;&#xD;&#xA;        for (let key of attributes) {&#xD;&#xA;            if (dto &amp;&amp; !dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName() == ServicesHelper.getFieldFormat(key.name))) {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, ServicesHelper.getFieldFormat(key.name), dto.id);&#xD;&#xA;                field.typeReference.setType(key.typeId);&#xD;&#xA;                if (((_a = key.mapPath) !== null &amp;&amp; _a !== void 0 ? _a : []).length &gt; 0) {&#xD;&#xA;                    field.setMapping(key.mapPath);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    static getParameterFormat(str) {&#xD;&#xA;        return toCamelCase(str);&#xD;&#xA;    }&#xD;&#xA;    static getRoutingFormat(str) {&#xD;&#xA;        return pluralize(str);&#xD;&#xA;    }&#xD;&#xA;    static getFieldFormat(str) {&#xD;&#xA;        return toPascalCase(str);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;class ElementManager {&#xD;&#xA;    constructor(command, settings) {&#xD;&#xA;        var _a;&#xD;&#xA;        this.command = command;&#xD;&#xA;        this.settings = settings;&#xD;&#xA;        this.mappedElement = (_a = command.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement();&#xD;&#xA;    }&#xD;&#xA;    get id() { return this.command.id; }&#xD;&#xA;    ;&#xD;&#xA;    setReturnType(typeId, isCollection) {&#xD;&#xA;        this.command.typeReference.setType(typeId);&#xD;&#xA;        if (isCollection != null) {&#xD;&#xA;            this.command.typeReference.setIsCollection(isCollection);&#xD;&#xA;        }&#xD;&#xA;        return this;&#xD;&#xA;    }&#xD;&#xA;    addChild(name, type) {&#xD;&#xA;        let field = createElement(this.settings.childSpecialization, ServicesHelper.getFieldFormat(name), this.command.id);&#xD;&#xA;        const typeReferenceDetails = type == null&#xD;&#xA;            ? null&#xD;&#xA;            : typeof (type) === &quot;string&quot;&#xD;&#xA;                ? { id: type, isNullable: false, isCollection: false }&#xD;&#xA;                : { id: type.typeId, isNullable: type.isNullable, isCollection: type.isCollection };&#xD;&#xA;        if (typeReferenceDetails != null) {&#xD;&#xA;            field.typeReference.setType(typeReferenceDetails.id);&#xD;&#xA;            field.typeReference.setIsCollection(typeReferenceDetails.isCollection);&#xD;&#xA;            field.typeReference.setIsNullable(typeReferenceDetails.isNullable);&#xD;&#xA;        }&#xD;&#xA;        return field;&#xD;&#xA;    }&#xD;&#xA;    addChildrenFrom(elements, options) {&#xD;&#xA;        let order = 0;&#xD;&#xA;        elements.forEach(e =&gt; {&#xD;&#xA;            if (e.mapPath != null) {&#xD;&#xA;                if (this.command.getChildren(this.settings.childSpecialization).some(x =&gt; { var _a, _b; return ((_b = (_a = x.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement()) === null || _b === void 0 ? void 0 : _b.id) == e.id; })) {&#xD;&#xA;                    return;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            else if (this.command.getChildren(this.settings.childSpecialization).some(x =&gt; x.getName().toLowerCase() === e.name.toLowerCase())) {&#xD;&#xA;                return;&#xD;&#xA;            }&#xD;&#xA;            let field = this.addChild(ServicesHelper.getFieldFormat(e.name), e.typeId);&#xD;&#xA;            field.typeReference.setIsCollection(e.isCollection);&#xD;&#xA;            field.typeReference.setIsNullable(e.isNullable);&#xD;&#xA;            if (options === null || options === void 0 ? void 0 : options.addToTop) {&#xD;&#xA;                field.setOrder(order++);&#xD;&#xA;            }&#xD;&#xA;            if (this.mappedElement != null &amp;&amp; e.mapPath) {&#xD;&#xA;                field.setMapping(e.mapPath);&#xD;&#xA;            }&#xD;&#xA;        });&#xD;&#xA;        return this;&#xD;&#xA;    }&#xD;&#xA;    mapToElement(param1, mappingSettingsId) {&#xD;&#xA;        let elementIds;&#xD;&#xA;        let element;&#xD;&#xA;        if (Array.isArray(param1)) {&#xD;&#xA;            elementIds = param1;&#xD;&#xA;            element = lookup(elementIds[elementIds.length - 1]);&#xD;&#xA;        }&#xD;&#xA;        else {&#xD;&#xA;            elementIds = [param1.id];&#xD;&#xA;            element = param1;&#xD;&#xA;        }&#xD;&#xA;        this.mappedElement = element;&#xD;&#xA;        this.command.setMapping(elementIds, mappingSettingsId);&#xD;&#xA;        return this;&#xD;&#xA;    }&#xD;&#xA;    getElement() {&#xD;&#xA;        return this.command;&#xD;&#xA;    }&#xD;&#xA;    collapse() {&#xD;&#xA;        this.command.collapse();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/getSurrogateKeyType.ts&quot; /&gt;&#xD;&#xA;const constants = {&#xD;&#xA;    PKSpecialization: {&#xD;&#xA;        Implicit: &quot;implicit&quot;,&#xD;&#xA;        Explicit: &quot;explicit&quot;,&#xD;&#xA;        ExplicitComposite: &quot;explicit_composite&quot;,&#xD;&#xA;        Unknown: &quot;unknown&quot;&#xD;&#xA;    },&#xD;&#xA;    FKSpecialization: {&#xD;&#xA;        Implicit: &quot;implicit&quot;,&#xD;&#xA;        Explicit: &quot;explicit&quot;,&#xD;&#xA;    }&#xD;&#xA;};&#xD;&#xA;function getFieldFormat(str) {&#xD;&#xA;    return toPascalCase(str);&#xD;&#xA;}&#xD;&#xA;function getDomainAttributeNameFormat(str) {&#xD;&#xA;    let convention = getDomainAttributeNamingConvention();&#xD;&#xA;    switch (convention) {&#xD;&#xA;        case &quot;pascal-case&quot;:&#xD;&#xA;            return toPascalCase(str);&#xD;&#xA;        case &quot;camel-case&quot;:&#xD;&#xA;            return toCamelCase(str);&#xD;&#xA;        default:&#xD;&#xA;            return str;&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getOrCreateDto(elementName, parentElement) {&#xD;&#xA;    const expectedDtoName = `${elementName}Dto`;&#xD;&#xA;    let existingDto = parentElement.getChildren(&quot;DTO&quot;).filter(x =&gt; x.getName() === expectedDtoName)[0];&#xD;&#xA;    if (existingDto) {&#xD;&#xA;        return existingDto;&#xD;&#xA;    }&#xD;&#xA;    let dto = createElement(&quot;DTO&quot;, expectedDtoName, parentElement.id);&#xD;&#xA;    return dto;&#xD;&#xA;}&#xD;&#xA;function ensureDtoFields(autoAddPrimaryKey, mappedElement, dto) {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    let dtoUpdated = false;&#xD;&#xA;    let domainElement = mappedElement&#xD;&#xA;        .typeReference&#xD;&#xA;        .getType();&#xD;&#xA;    let attributesWithMapPaths = getAttributesWithMapPath(domainElement);&#xD;&#xA;    let isCreateMode = ((_b = (_a = dto.getMetadata(&quot;originalVerb&quot;)) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.startsWith(&quot;create&quot;)) == true;&#xD;&#xA;    for (var keyName of Object.keys(attributesWithMapPaths)) {&#xD;&#xA;        let entry = attributesWithMapPaths[keyName];&#xD;&#xA;        if (isCreateMode &amp;&amp; ((_c = entry.name) === null || _c === void 0 ? void 0 : _c.toLowerCase()) === &quot;id&quot;) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        if (isCreateMode &amp;&amp; isOwnerForeignKey(entry.name, domainElement)) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        if (dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName() == entry.name)) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        let field = createElement(&quot;DTO-Field&quot;, entry.name, dto.id);&#xD;&#xA;        field.typeReference.setType(entry.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(entry.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(entry.isCollection);&#xD;&#xA;        field.setMapping(entry.mapPath);&#xD;&#xA;        dtoUpdated = true;&#xD;&#xA;    }&#xD;&#xA;    if (autoAddPrimaryKey &amp;&amp; !isCreateMode) {&#xD;&#xA;        addPrimaryKeys(dto, domainElement, true);&#xD;&#xA;    }&#xD;&#xA;    if (dtoUpdated) {&#xD;&#xA;        dto.collapse();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function isOwnerForeignKey(attributeName, domainElement) {&#xD;&#xA;    for (let association of domainElement.getAssociations().filter(x =&gt; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable)) {&#xD;&#xA;        if (attributeName.toLowerCase().indexOf(association.getName().toLowerCase()) &gt;= 0) {&#xD;&#xA;            return true;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return false;&#xD;&#xA;}&#xD;&#xA;function addPrimaryKeys(dto, entity, map) {&#xD;&#xA;    const primaryKeys = getPrimaryKeysWithMapPath(entity);&#xD;&#xA;    if (primaryKeys.length == 0) {&#xD;&#xA;        // Implicit key:&#xD;&#xA;        primaryKeys.push({&#xD;&#xA;            id: null,&#xD;&#xA;            name: &quot;Id&quot;,&#xD;&#xA;            typeId: getSurrogateKeyType(),&#xD;&#xA;            mapPath: null,&#xD;&#xA;            isNullable: false,&#xD;&#xA;            isCollection: false&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    for (const primaryKey of primaryKeys) {&#xD;&#xA;        const name = getDomainAttributeNameFormat(primaryKey.name);&#xD;&#xA;        if (dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName().toLowerCase() == name.toLowerCase())) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        const dtoField = createElement(&quot;DTO-Field&quot;, getFieldFormat(name), dto.id);&#xD;&#xA;        dtoField.typeReference.setType(primaryKey.typeId);&#xD;&#xA;        if (map &amp;&amp; primaryKey.mapPath != null) {&#xD;&#xA;            console.log(`Doing mapping for ${dtoField.id}`);&#xD;&#xA;            dtoField.setMapping(primaryKey.mapPath);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getPrimaryKeysWithMapPath(entity) {&#xD;&#xA;    let keydict = Object.create(null);&#xD;&#xA;    let keys = entity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;    keys.forEach(key =&gt; keydict[key.id] = {&#xD;&#xA;        id: key.id,&#xD;&#xA;        name: key.getName(),&#xD;&#xA;        typeId: key.typeReference.typeId,&#xD;&#xA;        mapPath: [key.id],&#xD;&#xA;        isNullable: false,&#xD;&#xA;        isCollection: false&#xD;&#xA;    });&#xD;&#xA;    traverseInheritanceHierarchyForPrimaryKeys(keydict, entity, []);&#xD;&#xA;    return Object.values(keydict);&#xD;&#xA;    function traverseInheritanceHierarchyForPrimaryKeys(keydict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;        baseKeys.forEach(key =&gt; {&#xD;&#xA;            keydict[key.id] = {&#xD;&#xA;                id: key.id,&#xD;&#xA;                name: key.getName(),&#xD;&#xA;                typeId: key.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([key.id]),&#xD;&#xA;                isNullable: key.typeReference.isNullable,&#xD;&#xA;                isCollection: key.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForPrimaryKeys(keydict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getAttributesWithMapPath(entity) {&#xD;&#xA;    let attrDict = Object.create(null);&#xD;&#xA;    let attributes = entity.getChildren(&quot;Attribute&quot;)&#xD;&#xA;        .filter(x =&gt; {&#xD;&#xA;        var _a;&#xD;&#xA;        return !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp;&#xD;&#xA;            !legacyPartitionKey(x) &amp;&amp;&#xD;&#xA;            (x[&quot;hasMetadata&quot;] &amp;&amp; (!x.hasMetadata(&quot;set-by-infrastructure&quot;) || ((_a = x.getMetadata(&quot;set-by-infrastructure&quot;)) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) != &quot;true&quot;));&#xD;&#xA;    });&#xD;&#xA;    attributes.forEach(attr =&gt; attrDict[attr.id] = {&#xD;&#xA;        id: attr.id,&#xD;&#xA;        name: attr.getName(),&#xD;&#xA;        typeId: attr.typeReference.typeId,&#xD;&#xA;        mapPath: [attr.id],&#xD;&#xA;        isNullable: false,&#xD;&#xA;        isCollection: false&#xD;&#xA;    });&#xD;&#xA;    traverseInheritanceHierarchyForAttributes(attrDict, entity, []);&#xD;&#xA;    return attrDict;&#xD;&#xA;    function traverseInheritanceHierarchyForAttributes(attrDict, curEntity, generalizationStack) {&#xD;&#xA;        if (!curEntity) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalizations = curEntity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;        if (generalizations.length == 0) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        let generalization = generalizations[0];&#xD;&#xA;        generalizationStack.push(generalization.id);&#xD;&#xA;        let nextEntity = generalization.typeReference.getType();&#xD;&#xA;        let baseKeys = nextEntity.getChildren(&quot;Attribute&quot;).filter(x =&gt; !x.hasStereotype(&quot;Primary Key&quot;) &amp;&amp; !legacyPartitionKey(x));&#xD;&#xA;        baseKeys.forEach(attr =&gt; {&#xD;&#xA;            attrDict[attr.id] = {&#xD;&#xA;                id: attr.id,&#xD;&#xA;                name: attr.getName(),&#xD;&#xA;                typeId: attr.typeReference.typeId,&#xD;&#xA;                mapPath: generalizationStack.concat([attr.id]),&#xD;&#xA;                isNullable: attr.typeReference.isNullable,&#xD;&#xA;                isCollection: attr.typeReference.isCollection&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;        traverseInheritanceHierarchyForAttributes(attrDict, nextEntity, generalizationStack);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;function getDomainAttributeNamingConvention() {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const domainSettingsId = &quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;;&#xD;&#xA;    return (_c = (_b = (_a = application.getSettings(domainSettingsId)) === null || _a === void 0 ? void 0 : _a.getField(&quot;Attribute Naming Convention&quot;)) === null || _b === void 0 ? void 0 : _b.value) !== null &amp;&amp; _c !== void 0 ? _c : &quot;pascal-case&quot;;&#xD;&#xA;}&#xD;&#xA;// Just in case someone still uses this convention. Used to filter out those attributes when mapping&#xD;&#xA;// to domain entities that are within a Cosmos DB paradigm.&#xD;&#xA;function legacyPartitionKey(attribute) {&#xD;&#xA;    return attribute.hasStereotype(&quot;Partition Key&quot;) &amp;&amp; attribute.getName() === &quot;PartitionKey&quot;;&#xD;&#xA;}&#xD;&#xA;/**&#xD;&#xA; * Workaround for element's from referenced packages not having getParent()&#xD;&#xA; * @param element The element whose parent should be searched for&#xD;&#xA; * @param parentSpecializationType The specialization type of the parent&#xD;&#xA; */&#xD;&#xA;function getParent(element, parentSpecializationType) {&#xD;&#xA;    const elements = lookupTypesOf(parentSpecializationType);&#xD;&#xA;    const parent = elements&#xD;&#xA;        .find(x =&gt; x.getChildren(element.specialization)&#xD;&#xA;        .some(child =&gt; child.id === element.id));&#xD;&#xA;    if (parent == null) {&#xD;&#xA;        throw new Error(&quot;Could not find parent&quot;);&#xD;&#xA;    }&#xD;&#xA;    return parent;&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../common/domainHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../common/servicesHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../common/getParent.ts&quot; /&gt;&#xD;&#xA;/**&#xD;&#xA; * Gets select details of a mapped Command/Query. Intended for centralized logic of working out&#xD;&#xA; * things like keys (including implicit ones) for both the entity and owning entity if applicable.&#xD;&#xA; *&#xD;&#xA; * If the Command is for entity creation (either due to being mapped to a constructor or being&#xD;&#xA; * prefixed with &quot;Create&quot;), then primary keys for the entity are not populated.&#xD;&#xA; * @param request The Command or Query that has been mapped&#xD;&#xA; */&#xD;&#xA;function getMappedRequestDetails(request) {&#xD;&#xA;    var _a;&#xD;&#xA;    const mappedElement = (_a = request.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement();&#xD;&#xA;    if (mappedElement == null) {&#xD;&#xA;        return null;&#xD;&#xA;    }&#xD;&#xA;    let entity = mappedElement;&#xD;&#xA;    if (entity.specialization !== &quot;Class&quot;) {&#xD;&#xA;        entity = getParent(entity, &quot;Class&quot;);&#xD;&#xA;    }&#xD;&#xA;    const result = {&#xD;&#xA;        entity: entity,&#xD;&#xA;        mappingTargetType: mappedElement.specialization,&#xD;&#xA;        entityKeyFields: [],&#xD;&#xA;        ownerKeyFields: []&#xD;&#xA;    };&#xD;&#xA;    result.owningEntity = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;    // As long as it's not for creation, populate the PKs of the entity:&#xD;&#xA;    if (result.mappingTargetType !== &quot;Class Constructor&quot; &amp;&amp;&#xD;&#xA;        !request.getName().toLowerCase().startsWith(&quot;Create&quot;)) {&#xD;&#xA;        result.entityKeyFields = result.mappingTargetType === &quot;Class&quot;&#xD;&#xA;            ? getKeysForClassMapping(request, entity)&#xD;&#xA;            : getKeysForOperationMapping(request, entity);&#xD;&#xA;    }&#xD;&#xA;    // If the entity is owned, populate its fields:&#xD;&#xA;    if (result.owningEntity != null) {&#xD;&#xA;        result.ownerKeyFields = result.mappingTargetType === &quot;Class&quot;&#xD;&#xA;            ? getKeysForClassMapping(request, entity, result.owningEntity)&#xD;&#xA;            : getKeysForOperationMapping(request, entity, result.owningEntity);&#xD;&#xA;    }&#xD;&#xA;    return result;&#xD;&#xA;    /**&#xD;&#xA;     * Return field details for primary keys. As requests mapped to operations and constructors can&#xD;&#xA;     * never possibly map the attributes, these fields can only ever be matched by name.&#xD;&#xA;     * @param request The CQRS Command or Query entity&#xD;&#xA;     * @param owningEntity The Owning Aggregate Class&#xD;&#xA;     */&#xD;&#xA;    function getKeysForOperationMapping(request, entity, owningEntity) {&#xD;&#xA;        const pks = DomainHelper.getPrimaryKeys(owningEntity !== null &amp;&amp; owningEntity !== void 0 ? owningEntity : entity);&#xD;&#xA;        return pks.map(pk =&gt; {&#xD;&#xA;            let fieldName = toPascalCase(pk.name);&#xD;&#xA;            if (owningEntity != null) {&#xD;&#xA;                fieldName = removePrefix(fieldName, toPascalCase(owningEntity.getName()));&#xD;&#xA;                fieldName = `${owningEntity.getName()}${toCamelCase(fieldName)}`;&#xD;&#xA;            }&#xD;&#xA;            fieldName = ServicesHelper.getFieldFormat(fieldName);&#xD;&#xA;            const existingField = request.getChildren(&quot;DTO-Field&quot;).find(field =&gt; field.getName().toLowerCase() == fieldName.toLowerCase());&#xD;&#xA;            return {&#xD;&#xA;                existingId: existingField === null || existingField === void 0 ? void 0 : existingField.id,&#xD;&#xA;                mappingPath: [],&#xD;&#xA;                name: fieldName,&#xD;&#xA;                typeId: pk.typeId,&#xD;&#xA;                isCollection: pk.isCollection,&#xD;&#xA;                isNullable: pk.isNullable&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;    function getKeysForClassMapping(request, entity, owningEntity) {&#xD;&#xA;        const keys = owningEntity != null&#xD;&#xA;            ? DomainHelper.getForeignKeys(entity, owningEntity)&#xD;&#xA;            : DomainHelper.getPrimaryKeys(entity);&#xD;&#xA;        return keys.map(pk =&gt; {&#xD;&#xA;            const existingField = request.getChildren(&quot;DTO-Field&quot;).find(field =&gt; {&#xD;&#xA;                if (field.getMapping() != null) {&#xD;&#xA;                    return field.getMapping().getPath().some(x =&gt; x.id == pk.id);&#xD;&#xA;                }&#xD;&#xA;                return (pk.name.toLowerCase() === field.getName().toLowerCase());&#xD;&#xA;            });&#xD;&#xA;            return {&#xD;&#xA;                existingId: existingField === null || existingField === void 0 ? void 0 : existingField.id,&#xD;&#xA;                mappingPath: pk.mapPath,&#xD;&#xA;                name: pk.name,&#xD;&#xA;                typeId: pk.typeId,&#xD;&#xA;                isCollection: pk.isCollection,&#xD;&#xA;                isNullable: pk.isNullable&#xD;&#xA;            };&#xD;&#xA;        });&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/getMappedRequestDetails.ts&quot; /&gt;&#xD;&#xA;/**&#xD;&#xA; * Ensures that for the provided contract, it has the provided field creating it if necessary and&#xD;&#xA; * then ensure the field has the correct typeReference details and order.&#xD;&#xA; * The field's element is returned.&#xD;&#xA; */&#xD;&#xA;function ensureHasField(options) {&#xD;&#xA;    const { contract, fieldDetail, mappingSettingsId, order } = options;&#xD;&#xA;    let field = fieldDetail.existingId != null&#xD;&#xA;        ? contract.getChildren(&quot;DTO-Field&quot;).find(x =&gt; x.id === fieldDetail.existingId)&#xD;&#xA;        : createElement(&quot;DTO-Field&quot;, fieldDetail.name, contract.id);&#xD;&#xA;    field.typeReference.setType(fieldDetail.typeId);&#xD;&#xA;    field.typeReference.setIsCollection(fieldDetail.isCollection);&#xD;&#xA;    field.typeReference.setIsNullable(fieldDetail.isNullable);&#xD;&#xA;    if (order != null) {&#xD;&#xA;        field.setOrder(order);&#xD;&#xA;    }&#xD;&#xA;    if (mappingSettingsId != null) {&#xD;&#xA;        field.setMapping(fieldDetail.mappingPath, mappingSettingsId);&#xD;&#xA;    }&#xD;&#xA;    return field;&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;./onMapFunctions.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/domainHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/servicesHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/getMappedRequestDetails.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;ensureHasField.ts&quot; /&gt;&#xD;&#xA;function onMapCommand(element, isForCrudScript, isForCreate = false) {&#xD;&#xA;    var _a, _b, _c;&#xD;&#xA;    const projectMappingSettingId = &quot;942eae46-49f1-450e-9274-a92d40ac35fa&quot;;&#xD;&#xA;    const mapFromDomainMappingSettingId = &quot;1f747d14-681c-4a20-8c68-34223f41b825&quot;;&#xD;&#xA;    // const mapToDomainDataSettingsId = &quot;735c87d0-06fc-4491-8b5f-5adc6f953c54&quot;;&#xD;&#xA;    const mappingDetails = getMappedRequestDetails(element);&#xD;&#xA;    if (mappingDetails == null) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    if (isForCrudScript ||&#xD;&#xA;        mappingDetails.mappingTargetType !== &quot;Class&quot;) {&#xD;&#xA;        let order = 0;&#xD;&#xA;        let keyFields = mappingDetails.ownerKeyFields;&#xD;&#xA;        if (!isForCreate) {&#xD;&#xA;            keyFields = keyFields.concat(mappingDetails.entityKeyFields);&#xD;&#xA;        }&#xD;&#xA;        for (const keyField of keyFields) {&#xD;&#xA;            ensureHasField({&#xD;&#xA;                contract: element,&#xD;&#xA;                fieldDetail: keyField,&#xD;&#xA;                order: order++&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    if (mappingDetails.mappingTargetType === &quot;Operation&quot; &amp;&amp;&#xD;&#xA;        isComplexType((_c = (_b = (_a = element.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement()) === null || _b === void 0 ? void 0 : _b.typeReference) === null || _c === void 0 ? void 0 : _c.getType())) {&#xD;&#xA;        getOrCreateCommandCrudDto(element, element, false, mapFromDomainMappingSettingId);&#xD;&#xA;    }&#xD;&#xA;    const fields = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; { var _a, _b; return ((_a = x.typeReference.getType()) === null || _a === void 0 ? void 0 : _a.specialization) != &quot;DTO&quot; &amp;&amp; x.isMapped() &amp;&amp; ((_b = x.getMapping()) === null || _b === void 0 ? void 0 : _b.getElement().specialization.startsWith(&quot;Association&quot;)); });&#xD;&#xA;    fields.forEach(field =&gt; {&#xD;&#xA;        getOrCreateCommandCrudDto(element, field, true, projectMappingSettingId);&#xD;&#xA;    });&#xD;&#xA;    const complexFields = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; {&#xD;&#xA;        var _a, _b, _c, _d;&#xD;&#xA;        return ((_a = x.typeReference.getType()) === null || _a === void 0 ? void 0 : _a.specialization) != &quot;DTO&quot; &amp;&amp;&#xD;&#xA;            isComplexType((_d = (_c = (_b = x.getMapping()) === null || _b === void 0 ? void 0 : _b.getElement()) === null || _c === void 0 ? void 0 : _c.typeReference) === null || _d === void 0 ? void 0 : _d.getType());&#xD;&#xA;    });&#xD;&#xA;    complexFields.forEach(cf =&gt; {&#xD;&#xA;        getOrCreateCommandCrudDto(element, cf, false, projectMappingSettingId);&#xD;&#xA;    });&#xD;&#xA;    function isComplexType(element) {&#xD;&#xA;        if (element == null) {&#xD;&#xA;            console.warn(&quot;isComplexType element parameter received null&quot;);&#xD;&#xA;        }&#xD;&#xA;        return (element === null || element === void 0 ? void 0 : element.specialization) === &quot;Data Contract&quot; ||&#xD;&#xA;            (element === null || element === void 0 ? void 0 : element.specialization) === &quot;Value Object&quot;;&#xD;&#xA;    }&#xD;&#xA;    function getOrCreateCommandCrudDto(command, dtoField, autoAddPrimaryKey, mappingTypeSettingId) {&#xD;&#xA;        let mappedElement = dtoField.getMapping().getElement();&#xD;&#xA;        if (mappedElement.typeReference == null)&#xD;&#xA;            throw new Error(&quot;TypeReference is undefined&quot;);&#xD;&#xA;        let originalVerb = (command.getName().split(/(?=[A-Z])/))[0];&#xD;&#xA;        let domainName = mappedElement.typeReference.getType().getName();&#xD;&#xA;        let baseName = command.getMetadata(&quot;baseName&quot;)&#xD;&#xA;            ? `${command.getMetadata(&quot;baseName&quot;)}${domainName}`&#xD;&#xA;            : domainName;&#xD;&#xA;        let dtoName = `${originalVerb}${baseName}`;&#xD;&#xA;        let dto = getOrCreateDto(dtoName, command.getParent());&#xD;&#xA;        dto.setMetadata(&quot;originalVerb&quot;, originalVerb);&#xD;&#xA;        dto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;        dto.setMapping(mappedElement.typeReference.getTypeId(), mappingTypeSettingId);&#xD;&#xA;        ensureDtoFields(autoAddPrimaryKey, mappedElement, dto);&#xD;&#xA;        dtoField.typeReference.setType(dto.id);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;./onMapFunctions.ts&quot; /&gt;&#xD;&#xA;const stringTypeId = &quot;d384db9c-a279-45e1-801e-e4e8099625f2&quot;;&#xD;&#xA;function onMapDto(element) {&#xD;&#xA;    var complexTypes = [&quot;Data Contract&quot;, &quot;Value Object&quot;];&#xD;&#xA;    let fields = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; { var _a, _b, _c; return ((_a = x.typeReference.getType()) === null || _a === void 0 ? void 0 : _a.specialization) != &quot;DTO&quot; &amp;&amp; ((_c = (_b = x.getMapping()) === null || _b === void 0 ? void 0 : _b.getElement()) === null || _c === void 0 ? void 0 : _c.specialization.startsWith(&quot;Association&quot;)); });&#xD;&#xA;    fields.forEach(f =&gt; {&#xD;&#xA;        getOrCreateDtoCrudDto(element, f, true);&#xD;&#xA;    });&#xD;&#xA;    let complexAttributes = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; {&#xD;&#xA;        var _a, _b, _c, _d, _e;&#xD;&#xA;        return ((_a = x.typeReference.getType()) === null || _a === void 0 ? void 0 : _a.specialization) != &quot;DTO&quot;&#xD;&#xA;            &amp;&amp; (complexTypes.includes((_e = (_d = (_c = (_b = x.getMapping()) === null || _b === void 0 ? void 0 : _b.getElement()) === null || _c === void 0 ? void 0 : _c.typeReference) === null || _d === void 0 ? void 0 : _d.getType()) === null || _e === void 0 ? void 0 : _e.specialization));&#xD;&#xA;    });&#xD;&#xA;    complexAttributes.forEach(f =&gt; {&#xD;&#xA;        getOrCreateDtoCrudDto(element, f, false);&#xD;&#xA;    });&#xD;&#xA;}&#xD;&#xA;function getOrCreateDtoCrudDto(element, dtoField, autoAddPrimaryKey) {&#xD;&#xA;    const projectMappingSettingId = &quot;942eae46-49f1-450e-9274-a92d40ac35fa&quot;;&#xD;&#xA;    const originalDtoMappingSettingId = &quot;1f747d14-681c-4a20-8c68-34223f41b825&quot;;&#xD;&#xA;    let mappedElement = dtoField.getMapping().getElement();&#xD;&#xA;    let originalVerb = &quot;&quot;;&#xD;&#xA;    if (element.hasMetadata(&quot;originalVerb&quot;)) {&#xD;&#xA;        originalVerb = element.getMetadata(&quot;originalVerb&quot;);&#xD;&#xA;        // In the event that the prefix is no longer the same as the&#xD;&#xA;        // originally called verb, then don't propagate this any further&#xD;&#xA;        // as end users might get confused.&#xD;&#xA;        if (element.getName().indexOf(originalVerb) &lt; 0) {&#xD;&#xA;            originalVerb = &quot;&quot;;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    let targetMappingSettingId = dtoField.getParent().getMapping().mappingSettingsId;&#xD;&#xA;    let domainName = mappedElement.typeReference.getType().getName();&#xD;&#xA;    let baseName = element.getMetadata(&quot;baseName&quot;)&#xD;&#xA;        ? `${element.getMetadata(&quot;baseName&quot;)}${domainName}`&#xD;&#xA;        : domainName;&#xD;&#xA;    let dtoName = `${originalVerb}${baseName}`;&#xD;&#xA;    let dto = getOrCreateDto(dtoName, element.getParent());&#xD;&#xA;    dto.setMapping(mappedElement.typeReference.getTypeId(), targetMappingSettingId);&#xD;&#xA;    if (originalVerb !== &quot;&quot;) {&#xD;&#xA;        dto.setMetadata(&quot;originalVerb&quot;, originalVerb);&#xD;&#xA;    }&#xD;&#xA;    dto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;    ensureDtoFields(autoAddPrimaryKey, mappedElement, dto);&#xD;&#xA;    dtoField.typeReference.setType(dto.id);&#xD;&#xA;}&#xD;&#xA;/// &lt;reference path=&quot;./onMapFunctions.ts&quot; /&gt;&#xD;&#xA;function onMapQuery(element) {&#xD;&#xA;    var complexTypes = [&quot;Data Contract&quot;, &quot;Value Object&quot;];&#xD;&#xA;    let fields = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; { var _a; return ((_a = x.typeReference.getType()) === null || _a === void 0 ? void 0 : _a.specialization) != &quot;DTO&quot; &amp;&amp; x.isMapped() &amp;&amp; x.getMapping().getElement().specialization.startsWith(&quot;Association&quot;); });&#xD;&#xA;    fields.forEach(f =&gt; {&#xD;&#xA;        getOrCreateQueryCrudDto(element, f);&#xD;&#xA;    });&#xD;&#xA;    let complexAttributes = element.getChildren(&quot;DTO-Field&quot;)&#xD;&#xA;        .filter(x =&gt; {&#xD;&#xA;        var _a, _b, _c, _d, _e;&#xD;&#xA;        return ((_a = x.typeReference.getType()) === null || _a === void 0 ? void 0 : _a.specialization) != &quot;DTO&quot;&#xD;&#xA;            &amp;&amp; (complexTypes.includes((_e = (_d = (_c = (_b = x.getMapping()) === null || _b === void 0 ? void 0 : _b.getElement()) === null || _c === void 0 ? void 0 : _c.typeReference) === null || _d === void 0 ? void 0 : _d.getType()) === null || _e === void 0 ? void 0 : _e.specialization));&#xD;&#xA;    });&#xD;&#xA;    complexAttributes.forEach(f =&gt; {&#xD;&#xA;        getOrCreateQueryCrudDto(element, f);&#xD;&#xA;    });&#xD;&#xA;}&#xD;&#xA;function getOrCreateQueryCrudDto(element, dtoField) {&#xD;&#xA;    const projectMappingSettingId = &quot;942eae46-49f1-450e-9274-a92d40ac35fa&quot;;&#xD;&#xA;    let mappedElement = dtoField.getMapping().getElement();&#xD;&#xA;    let domainName = mappedElement.typeReference.getType().getName();&#xD;&#xA;    let baseName = element.getMetadata(&quot;baseName&quot;)&#xD;&#xA;        ? `${element.getMetadata(&quot;baseName&quot;)}${domainName}`&#xD;&#xA;        : `${domainName}`;&#xD;&#xA;    let dtoName = baseName;&#xD;&#xA;    let dto = getOrCreateDto(dtoName, element.getParent());&#xD;&#xA;    dto.setMapping(mappedElement.typeReference.getTypeId(), projectMappingSettingId);&#xD;&#xA;    dto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;    ensureDtoFieldsQuery(mappedElement, dto);&#xD;&#xA;    dtoField.typeReference.setType(dto.id);&#xD;&#xA;}&#xD;&#xA;function ensureDtoFieldsQuery(mappedElement, dto) {&#xD;&#xA;    let dtoUpdated = false;&#xD;&#xA;    let mappedElementAttributes = mappedElement&#xD;&#xA;        .typeReference&#xD;&#xA;        .getType()&#xD;&#xA;        .getChildren(&quot;Attribute&quot;);&#xD;&#xA;    let dtoFields = dto.getChildren(&quot;DTO-Field&quot;);&#xD;&#xA;    for (let attribute of mappedElementAttributes.filter(x =&gt; !dtoFields.some(y =&gt; x.getName() === y.getName()))) {&#xD;&#xA;        if (dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; x.getName() == attribute.getName())) {&#xD;&#xA;            continue;&#xD;&#xA;        }&#xD;&#xA;        let field = createElement(&quot;DTO-Field&quot;, attribute.getName(), dto.id);&#xD;&#xA;        field.typeReference.setType(attribute.typeReference.typeId);&#xD;&#xA;        field.typeReference.setIsNullable(attribute.typeReference.isNullable);&#xD;&#xA;        field.typeReference.setIsCollection(attribute.typeReference.isCollection);&#xD;&#xA;        field.setMapping(attribute.id);&#xD;&#xA;        dtoUpdated = true;&#xD;&#xA;    }&#xD;&#xA;    if (dtoUpdated) {&#xD;&#xA;        dto.collapse();&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;var _a, _b;&#xD;&#xA;/// &lt;reference path=&quot;../../common/domainHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../../common/servicesHelper.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../_common/onMapCommand.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../_common/onMapDto.ts&quot; /&gt;&#xD;&#xA;/// &lt;reference path=&quot;../_common/onMapQuery.ts&quot; /&gt;&#xD;&#xA;const privateSettersOnly = ((_b = (_a = application.getSettings(&quot;c4d1e35c-7c0d-4926-afe0-18f17563ce17&quot;)) === null || _a === void 0 ? void 0 : _a.getField(&quot;0cf704e1-9a61-499a-bb91-b20717e334f5&quot;)) === null || _b === void 0 ? void 0 : _b.value) == &quot;true&quot;;&#xD;&#xA;const mapToDomainOperationSettingId = &quot;7c31c459-6229-4f10-bf13-507348cd8828&quot;;&#xD;&#xA;var cqrsCrud;&#xD;&#xA;(function (cqrsCrud) {&#xD;&#xA;    async function execute(element) {&#xD;&#xA;        var _a;&#xD;&#xA;        let entity = await DomainHelper.openSelectEntityDialog();&#xD;&#xA;        if (entity == null) {&#xD;&#xA;            return;&#xD;&#xA;        }&#xD;&#xA;        const owningEntity = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        const folderName = pluralize(DomainHelper.ownerIsAggregateRoot(entity) ? owningEntity.getName() : entity.getName());&#xD;&#xA;        const folder = (_a = element.getChildren().find(x =&gt; x.getName() == pluralize(folderName))) !== null &amp;&amp; _a !== void 0 ? _a : createElement(&quot;Folder&quot;, pluralize(folderName), element.id);&#xD;&#xA;        const resultDto = createCqrsResultTypeDto(entity, folder);&#xD;&#xA;        if (owningEntity == null || !privateSettersOnly) {&#xD;&#xA;            createCqrsCreateCommand(entity, folder);&#xD;&#xA;        }&#xD;&#xA;        createCqrsFindByIdQuery(entity, folder, resultDto);&#xD;&#xA;        createCqrsFindAllQuery(entity, folder, resultDto);&#xD;&#xA;        if (!privateSettersOnly) {&#xD;&#xA;            createCqrsUpdateCommand(entity, folder);&#xD;&#xA;        }&#xD;&#xA;        const operations = entity.getChildren(&quot;Operation&quot;).filter(x =&gt; x.typeReference.getType() == null);&#xD;&#xA;        for (const operation of operations) {&#xD;&#xA;            createCqrsCallOperationCommand(entity, operation, folder);&#xD;&#xA;        }&#xD;&#xA;        if (owningEntity == null || !privateSettersOnly) {&#xD;&#xA;            createCqrsDeleteCommand(entity, folder);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    cqrsCrud.execute = execute;&#xD;&#xA;    function createCqrsCreateCommand(entity, folder) {&#xD;&#xA;        let owningAggregate = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        let baseName = getBaseNameForElement(owningAggregate, entity, false);&#xD;&#xA;        let expectedCommandName = `Create${baseName}Command`;&#xD;&#xA;        let primaryKeys = DomainHelper.getPrimaryKeys(entity);&#xD;&#xA;        if (folder.getChildren().some(x =&gt; x.getName() == expectedCommandName)) {&#xD;&#xA;            let command = folder.getChildren().filter(x =&gt; x.getName() == expectedCommandName)[0];&#xD;&#xA;            command.typeReference.setType(primaryKeys[0].typeId);&#xD;&#xA;            return command;&#xD;&#xA;        }&#xD;&#xA;        let command = new ElementManager(createElement(&quot;Command&quot;, expectedCommandName, folder.id), {&#xD;&#xA;            childSpecialization: &quot;DTO-Field&quot;&#xD;&#xA;        });&#xD;&#xA;        let entityCtor = entity&#xD;&#xA;            .getChildren(&quot;Class Constructor&quot;)&#xD;&#xA;            .filter(x =&gt; x.getChildren(&quot;Parameter&quot;).length &gt; 0)&#xD;&#xA;            .sort((a, b) =&gt; {&#xD;&#xA;            // In descending order:&#xD;&#xA;            return b.getChildren(&quot;Parameter&quot;).length - a.getChildren(&quot;Parameter&quot;).length;&#xD;&#xA;        })[0];&#xD;&#xA;        if (entityCtor != null) {&#xD;&#xA;            command.mapToElement(entityCtor, mapToDomainOperationSettingId);&#xD;&#xA;            command.getElement().setMapping([entity.id, entityCtor.id], mapToDomainOperationSettingId);&#xD;&#xA;        }&#xD;&#xA;        else if (!privateSettersOnly) {&#xD;&#xA;            command.mapToElement(entity);&#xD;&#xA;        }&#xD;&#xA;        command.getElement().setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;        if (primaryKeys[0].typeId) {&#xD;&#xA;            command.setReturnType(primaryKeys[0].typeId);&#xD;&#xA;        }&#xD;&#xA;        if (entityCtor) {&#xD;&#xA;            command.addChildrenFrom(DomainHelper.getChildrenOfType(entityCtor, &quot;Parameter&quot;));&#xD;&#xA;        }&#xD;&#xA;        else {&#xD;&#xA;            command.addChildrenFrom(DomainHelper.getAttributesWithMapPath(entity));&#xD;&#xA;            command.addChildrenFrom(getMandatoryAssociationsWithMapPath(entity));&#xD;&#xA;        }&#xD;&#xA;        onMapCommand(command.getElement(), true, true);&#xD;&#xA;        command.collapse();&#xD;&#xA;        return command.getElement();&#xD;&#xA;    }&#xD;&#xA;    cqrsCrud.createCqrsCreateCommand = createCqrsCreateCommand;&#xD;&#xA;    function createCqrsFindByIdQuery(entity, folder, resultDto) {&#xD;&#xA;        let owningAggregate = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        let baseName = getBaseNameForElement(owningAggregate, entity, false);&#xD;&#xA;        let expectedQueryName = `Get${baseName}ByIdQuery`;&#xD;&#xA;        if (folder.getChildren().some(x =&gt; x.getName() == expectedQueryName)) {&#xD;&#xA;            return folder.getChildren().find(x =&gt; x.getName() == expectedQueryName);&#xD;&#xA;        }&#xD;&#xA;        let query = createElement(&quot;Query&quot;, expectedQueryName, folder.id);&#xD;&#xA;        query.typeReference.setType(resultDto.id);&#xD;&#xA;        query.setMapping(entity.id);&#xD;&#xA;        query.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;        if (owningAggregate) {&#xD;&#xA;            let foreignKeys = DomainHelper.getForeignKeys(entity, owningAggregate);&#xD;&#xA;            foreignKeys.forEach(fk =&gt; {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, ServicesHelper.getFieldFormat(fk.name), query.id);&#xD;&#xA;                field.typeReference.setType(fk.typeId);&#xD;&#xA;                if (fk.mapPath) {&#xD;&#xA;                    field.setMapping(fk.mapPath);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;        let primaryKeys = DomainHelper.getPrimaryKeys(entity);&#xD;&#xA;        ServicesHelper.addDtoFieldsFromDomain(query, primaryKeys);&#xD;&#xA;        onMapQuery(query);&#xD;&#xA;        query.collapse();&#xD;&#xA;        return query;&#xD;&#xA;    }&#xD;&#xA;    cqrsCrud.createCqrsFindByIdQuery = createCqrsFindByIdQuery;&#xD;&#xA;    function createCqrsFindAllQuery(entity, folder, resultDto) {&#xD;&#xA;        let owningAggregate = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        let baseName = getBaseNameForElement(owningAggregate, entity, true);&#xD;&#xA;        let expectedQueryName = `Get${baseName}Query`;&#xD;&#xA;        if (folder.getChildren().some(x =&gt; x.getName() == expectedQueryName)) {&#xD;&#xA;            return folder.getChildren().find(x =&gt; x.getName() == expectedQueryName);&#xD;&#xA;        }&#xD;&#xA;        let query = createElement(&quot;Query&quot;, expectedQueryName, folder.id);&#xD;&#xA;        query.typeReference.setType(resultDto.id);&#xD;&#xA;        query.typeReference.setIsCollection(true);&#xD;&#xA;        query.setMapping(entity.id);&#xD;&#xA;        query.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;        if (owningAggregate) {&#xD;&#xA;            let foreignKeys = DomainHelper.getForeignKeys(entity, owningAggregate);&#xD;&#xA;            foreignKeys.forEach(fk =&gt; {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, ServicesHelper.getFieldFormat(fk.name), query.id);&#xD;&#xA;                field.typeReference.setType(fk.typeId);&#xD;&#xA;                if (fk.mapPath) {&#xD;&#xA;                    field.setMapping(fk.mapPath);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;        query.collapse();&#xD;&#xA;        return query;&#xD;&#xA;    }&#xD;&#xA;    cqrsCrud.createCqrsFindAllQuery = createCqrsFindAllQuery;&#xD;&#xA;    function createCqrsUpdateCommand(entity, folder) {&#xD;&#xA;        let owningAggregate = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        let baseName = getBaseNameForElement(owningAggregate, entity, false);&#xD;&#xA;        let expectedCommandName = `Update${baseName}Command`;&#xD;&#xA;        if (folder.getChildren().some(x =&gt; x.getName() == expectedCommandName)) {&#xD;&#xA;            return folder.getChildren().find(x =&gt; x.getName() == expectedCommandName);&#xD;&#xA;        }&#xD;&#xA;        let command = new ElementManager(createElement(&quot;Command&quot;, expectedCommandName, folder.id), {&#xD;&#xA;            childSpecialization: &quot;DTO-Field&quot;&#xD;&#xA;        });&#xD;&#xA;        command.mapToElement(entity);&#xD;&#xA;        command.getElement().setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;        command.addChildrenFrom(DomainHelper.getAttributesWithMapPath(entity));&#xD;&#xA;        command.addChildrenFrom(getMandatoryAssociationsWithMapPath(entity));&#xD;&#xA;        onMapCommand(command.getElement(), true);&#xD;&#xA;        command.collapse();&#xD;&#xA;        return command.getElement();&#xD;&#xA;    }&#xD;&#xA;    cqrsCrud.createCqrsUpdateCommand = createCqrsUpdateCommand;&#xD;&#xA;    function createCqrsCallOperationCommand(entity, operation, folder) {&#xD;&#xA;        var _a;&#xD;&#xA;        const owningAggregate = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        const baseName = (_a = owningAggregate === null || owningAggregate === void 0 ? void 0 : owningAggregate.getName()) !== null &amp;&amp; _a !== void 0 ? _a : &quot;&quot;;&#xD;&#xA;        let operationName = operation.getName();&#xD;&#xA;        operationName = removeSuffix(operationName, &quot;Async&quot;);&#xD;&#xA;        operationName = toPascalCase(operationName);&#xD;&#xA;        const commandName = `${operationName}${entity.getName()}Command`;&#xD;&#xA;        const existing = folder.getChildren().find(x =&gt; {&#xD;&#xA;            var _a, _b;&#xD;&#xA;            return x.getName() == commandName ||&#xD;&#xA;                ((_b = (_a = x.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement()) === null || _b === void 0 ? void 0 : _b.id) === operation.id;&#xD;&#xA;        });&#xD;&#xA;        if (existing) {&#xD;&#xA;            return existing;&#xD;&#xA;        }&#xD;&#xA;        const commandElement = createElement(&quot;Command&quot;, commandName, folder.id);&#xD;&#xA;        commandElement.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;        const commandManager = new ElementManager(commandElement, { childSpecialization: &quot;DTO-Field&quot; });&#xD;&#xA;        commandManager.mapToElement([entity.id, operation.id], mapToDomainOperationSettingId);&#xD;&#xA;        const primaryKeys = DomainHelper.getPrimaryKeys(entity);&#xD;&#xA;        for (const key of primaryKeys) {&#xD;&#xA;            commandManager.addChild(key.name, lookup(key.id).typeReference);&#xD;&#xA;        }&#xD;&#xA;        commandManager.addChildrenFrom(DomainHelper.getChildrenOfType(operation, &quot;Parameter&quot;)&#xD;&#xA;            .filter(x =&gt; x.typeId != null &amp;&amp; lookup(x.typeId).specialization !== &quot;Domain Service&quot;));&#xD;&#xA;        onMapCommand(commandElement, true);&#xD;&#xA;        commandManager.collapse();&#xD;&#xA;        return commandManager.getElement();&#xD;&#xA;    }&#xD;&#xA;    cqrsCrud.createCqrsCallOperationCommand = createCqrsCallOperationCommand;&#xD;&#xA;    function createCqrsDeleteCommand(entity, folder) {&#xD;&#xA;        let owningAggregate = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        let baseName = getBaseNameForElement(owningAggregate, entity, false);&#xD;&#xA;        let expectedCommandName = `Delete${baseName}Command`;&#xD;&#xA;        if (folder.getChildren().some(x =&gt; x.getName() == expectedCommandName)) {&#xD;&#xA;            return folder.getChildren().find(x =&gt; x.getName() == expectedCommandName);&#xD;&#xA;        }&#xD;&#xA;        let command = createElement(&quot;Command&quot;, expectedCommandName, folder.id);&#xD;&#xA;        command.setMapping(entity.id);&#xD;&#xA;        command.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;        if (owningAggregate) {&#xD;&#xA;            let foreignKeys = DomainHelper.getForeignKeys(entity, owningAggregate);&#xD;&#xA;            foreignKeys.forEach(fk =&gt; {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, ServicesHelper.getFieldFormat(fk.name), command.id);&#xD;&#xA;                field.typeReference.setType(fk.typeId);&#xD;&#xA;                if (fk.mapPath) {&#xD;&#xA;                    field.setMapping(fk.mapPath);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;        let primaryKeys = DomainHelper.getPrimaryKeys(entity);&#xD;&#xA;        ServicesHelper.addDtoFieldsFromDomain(command, primaryKeys);&#xD;&#xA;        onMapCommand(command, true);&#xD;&#xA;        command.collapse();&#xD;&#xA;        return command;&#xD;&#xA;    }&#xD;&#xA;    cqrsCrud.createCqrsDeleteCommand = createCqrsDeleteCommand;&#xD;&#xA;    function createCqrsResultTypeDto(entity, folder) {&#xD;&#xA;        let owningAggregate = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;        let baseName = getBaseNameForElement(owningAggregate, entity, false);&#xD;&#xA;        let expectedDtoName = `${baseName}Dto`;&#xD;&#xA;        let existing = folder.getChildren().find(x =&gt; x.getName() == expectedDtoName);&#xD;&#xA;        if (existing) {&#xD;&#xA;            return existing;&#xD;&#xA;        }&#xD;&#xA;        let dto = createElement(&quot;DTO&quot;, expectedDtoName, folder.id);&#xD;&#xA;        dto.setMetadata(&quot;baseName&quot;, baseName);&#xD;&#xA;        dto.setMapping(entity.id);&#xD;&#xA;        let primaryKeys = DomainHelper.getPrimaryKeys(entity);&#xD;&#xA;        if (owningAggregate) {&#xD;&#xA;            let foreignKeys = DomainHelper.getForeignKeys(entity, owningAggregate);&#xD;&#xA;            foreignKeys.forEach(fk =&gt; {&#xD;&#xA;                let field = createElement(&quot;DTO-Field&quot;, ServicesHelper.getFieldFormat(fk.name), dto.id);&#xD;&#xA;                field.typeReference.setType(fk.typeId);&#xD;&#xA;                if (fk.mapPath) {&#xD;&#xA;                    field.setMapping(fk.mapPath);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;        ServicesHelper.addDtoFieldsFromDomain(dto, primaryKeys);&#xD;&#xA;        let attributesWithMapPaths = DomainHelper.getAttributesWithMapPath(entity);&#xD;&#xA;        for (var attr of attributesWithMapPaths) {&#xD;&#xA;            if (dto.getChildren(&quot;DTO-Field&quot;).some(x =&gt; { var _a, _b; return ((_b = (_a = x.getMapping()) === null || _a === void 0 ? void 0 : _a.getElement()) === null || _b === void 0 ? void 0 : _b.id) == attr.id; })) {&#xD;&#xA;                continue;&#xD;&#xA;            }&#xD;&#xA;            let field = createElement(&quot;DTO-Field&quot;, attr.name, dto.id);&#xD;&#xA;            field.typeReference.setType(attr.typeId);&#xD;&#xA;            field.setMapping(attr.mapPath);&#xD;&#xA;        }&#xD;&#xA;        onMapDto(dto);&#xD;&#xA;        dto.collapse();&#xD;&#xA;        return dto;&#xD;&#xA;    }&#xD;&#xA;    cqrsCrud.createCqrsResultTypeDto = createCqrsResultTypeDto;&#xD;&#xA;    function getMandatoryAssociationsWithMapPath(entity) {&#xD;&#xA;        return traverseInheritanceHierarchy(entity, [], []);&#xD;&#xA;        function traverseInheritanceHierarchy(entity, results, generalizationStack) {&#xD;&#xA;            entity&#xD;&#xA;                .getAssociations(&quot;Association&quot;)&#xD;&#xA;                .filter(x =&gt; !x.typeReference.isCollection &amp;&amp; !x.typeReference.isNullable &amp;&amp; x.typeReference.isNavigable &amp;&amp;&#xD;&#xA;                !x.getOtherEnd().typeReference.isCollection &amp;&amp; !x.getOtherEnd().typeReference.isNullable)&#xD;&#xA;                .forEach(association =&gt; {&#xD;&#xA;                return results.push({&#xD;&#xA;                    id: association.id,&#xD;&#xA;                    name: association.getName(),&#xD;&#xA;                    typeId: null,&#xD;&#xA;                    mapPath: generalizationStack.concat([association.id]),&#xD;&#xA;                    isNullable: false,&#xD;&#xA;                    isCollection: false&#xD;&#xA;                });&#xD;&#xA;            });&#xD;&#xA;            let generalizations = entity.getAssociations(&quot;Generalization&quot;).filter(x =&gt; x.isTargetEnd());&#xD;&#xA;            if (generalizations.length == 0) {&#xD;&#xA;                return results;&#xD;&#xA;            }&#xD;&#xA;            let generalization = generalizations[0];&#xD;&#xA;            generalizationStack.push(generalization.id);&#xD;&#xA;            return traverseInheritanceHierarchy(generalization.typeReference.getType(), results, generalizationStack);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    function getBaseNameForElement(owningAggregate, entity, entityIsMany) {&#xD;&#xA;        let entityName = entityIsMany ? toPascalCase(pluralize(entity.getName())) : toPascalCase(entity.getName());&#xD;&#xA;        return owningAggregate ? `${toPascalCase(owningAggregate.getName())}${entityName}` : entityName;&#xD;&#xA;    }&#xD;&#xA;})(cqrsCrud || (cqrsCrud = {}));&#xD;&#xA;/**&#xD;&#xA; * Used by Intent.Modules\Modules\Intent.Modules.Application.MediatR.CRUD&#xD;&#xA; *&#xD;&#xA; * Source code here:&#xD;&#xA; * https://github.com/IntentArchitect/Intent.Modules/blob/development/DesignerMacros/src/services-cqrs-crud/create-crud-macro/create-crud-macro.ts&#xD;&#xA; */&#xD;&#xA;//await cqrsCrud.execute(element);&#xD;&#xA;/// &lt;reference path=&quot;../../../typings/elementmacro.context.api.d.ts&quot; /&gt;&#xD;&#xA;var convertToE2EMapping;&#xD;&#xA;(function (convertToE2EMapping) {&#xD;&#xA;    function execute() {&#xD;&#xA;        if (element.isMapped() &amp;&amp; element.specialization == &quot;Command&quot;) {&#xD;&#xA;            convertCommand(element);&#xD;&#xA;        }&#xD;&#xA;        else if (element.isMapped() &amp;&amp; element.specialization == &quot;Query&quot;) {&#xD;&#xA;            convertQuery(element);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    convertToE2EMapping.execute = execute;&#xD;&#xA;    function convertCommand(command) {&#xD;&#xA;        var _a;&#xD;&#xA;        let target = command.getMapping().getElement();&#xD;&#xA;        let entity = (_a = target.getParent(&quot;Class&quot;)) !== null &amp;&amp; _a !== void 0 ? _a : target;&#xD;&#xA;        if (command.getName().startsWith(&quot;Create&quot;)) {&#xD;&#xA;            let action = createAssociation(&quot;Create Entity Action&quot;, command.id, target.id);&#xD;&#xA;            let mapping = action.createMapping(command.id, entity.id);&#xD;&#xA;            mapping.addMappedEnd(&quot;Invocation Mapping&quot;, [command.id], [target.id]);&#xD;&#xA;            mapContract(&quot;Data Mapping&quot;, command, [command.id], [target.id], mapping);&#xD;&#xA;        }&#xD;&#xA;        else if (command.getName().startsWith(&quot;Delete&quot;)) {&#xD;&#xA;            let action = createAssociation(&quot;Delete Entity Action&quot;, command.id, entity.id);&#xD;&#xA;            let mapping = action.createMapping(command.id, entity.id);&#xD;&#xA;            let idField = command.getChildren(&quot;DTO-Field&quot;).find(x =&gt; (x.isMapped() &amp;&amp; x.getMapping().getElement().hasStereotype(&quot;PrimaryKey&quot;)) || (x.getName() == &quot;Id&quot; || x.getName() == `${entity.getName()}Id`));&#xD;&#xA;            let entityPk = entity.getChildren(&quot;Attribute&quot;).find(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;            if (idField &amp;&amp; entityPk) {&#xD;&#xA;                mapping.addMappedEnd(&quot;Filter Mapping&quot;, [idField.id], [entityPk.id]);&#xD;&#xA;            }&#xD;&#xA;            mapContract(&quot;Filter Mapping&quot;, command, [command.id], [target.id], mapping);&#xD;&#xA;        }&#xD;&#xA;        else if (command.isMapped()) {&#xD;&#xA;            let action = createAssociation(&quot;Update Entity Action&quot;, command.id, target.id);&#xD;&#xA;            // Query Entity Mapping&#xD;&#xA;            let queryMapping = action.createMapping(command.id, entity.id, &quot;25f25af9-c38b-4053-9474-b0fabe9d7ea7&quot;);&#xD;&#xA;            let idField = command.getChildren(&quot;DTO-Field&quot;).find(x =&gt; (x.isMapped() &amp;&amp; x.getMapping().getElement().hasStereotype(&quot;PrimaryKey&quot;)) || (x.getName() == &quot;Id&quot; || x.getName() == `${entity.getName()}Id`));&#xD;&#xA;            let entityPk = entity.getChildren(&quot;Attribute&quot;).find(x =&gt; x.hasStereotype(&quot;Primary Key&quot;));&#xD;&#xA;            if (idField &amp;&amp; entityPk) {&#xD;&#xA;                queryMapping.addMappedEnd(&quot;Filter Mapping&quot;, [idField.id], [entityPk.id]);&#xD;&#xA;            }&#xD;&#xA;            // Update Entity Mapping&#xD;&#xA;            let updateMapping = action.createMapping(command.id, entity.id, &quot;01721b1a-a85d-4320-a5cd-8bd39247196a&quot;);&#xD;&#xA;            if (target.id != entity.id) {&#xD;&#xA;                updateMapping.addMappedEnd(&quot;Invocation Mapping&quot;, [command.id], [target.id]);&#xD;&#xA;            }&#xD;&#xA;            mapContract(&quot;Data Mapping&quot;, command, [command.id], [target.id], updateMapping);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    convertToE2EMapping.convertCommand = convertCommand;&#xD;&#xA;    function convertQuery(query) {&#xD;&#xA;        let entity = query.getMapping().getElement();&#xD;&#xA;        let action = createAssociation(&quot;Query Entity Action&quot;, query.id, entity.id);&#xD;&#xA;        if (query.typeReference.getIsCollection()) {&#xD;&#xA;            action.typeReference.setIsCollection(true);&#xD;&#xA;        }&#xD;&#xA;        let mapping = action.createMapping(query.id, entity.id);&#xD;&#xA;        mapContract(&quot;Filter Mapping&quot;, query, [query.id], [entity.id], mapping);&#xD;&#xA;    }&#xD;&#xA;    convertToE2EMapping.convertQuery = convertQuery;&#xD;&#xA;    function mapContract(mappingType, dto, sourcePath, targetPathIds, mapping) {&#xD;&#xA;        console.log(&quot;mapContract: &quot; + dto.getName());&#xD;&#xA;        dto.getChildren(&quot;DTO-Field&quot;).filter(x =&gt; x.isMapped() &amp;&amp; !(dto.specialization == &quot;Command&quot; &amp;&amp; x.getMapping().getElement().hasStereotype(&quot;Primary Key&quot;))).forEach(field =&gt; {&#xD;&#xA;            if (field.typeReference.getType().specialization != &quot;DTO&quot; || field.typeReference.getIsCollection()) {&#xD;&#xA;                mapping.addMappedEnd(mappingType, sourcePath.concat([field.id]), targetPathIds.concat(field.getMapping().getPath().map(x =&gt; x.id)));&#xD;&#xA;            }&#xD;&#xA;            if (field.typeReference.getType().specialization == &quot;DTO&quot;) {&#xD;&#xA;                mapContract(mappingType, field.typeReference.getType(), sourcePath.concat([field.id]), targetPathIds.concat(field.getMapping().getPath().map(x =&gt; x.id)), mapping);&#xD;&#xA;            }&#xD;&#xA;            field.clearMapping();&#xD;&#xA;        });&#xD;&#xA;        dto.clearMapping();&#xD;&#xA;    }&#xD;&#xA;})(convertToE2EMapping || (convertToE2EMapping = {}));&#xD;&#xA;//convertToE2EMapping.execute();&#xD;&#xA;/// &lt;reference path=&quot;../create-crud-macro/create-crud-macro.ts&quot;/&gt;&#xD;&#xA;/// &lt;reference path=&quot;../convert-to-e2e-mapping/convert-to-e2e-mapping.ts&quot;/&gt;&#xD;&#xA;async function execute(element) {&#xD;&#xA;    var _a;&#xD;&#xA;    let entity = await DomainHelper.openSelectEntityDialog();&#xD;&#xA;    if (entity == null) {&#xD;&#xA;        return;&#xD;&#xA;    }&#xD;&#xA;    const owningEntity = DomainHelper.getOwningAggregate(entity);&#xD;&#xA;    const folderName = pluralize(DomainHelper.ownerIsAggregateRoot(entity) ? owningEntity.getName() : entity.getName());&#xD;&#xA;    const folder = (_a = element.getChildren().find(x =&gt; x.getName() == pluralize(folderName))) !== null &amp;&amp; _a !== void 0 ? _a : createElement(&quot;Folder&quot;, pluralize(folderName), element.id);&#xD;&#xA;    const resultDto = cqrsCrud.createCqrsResultTypeDto(entity, folder);&#xD;&#xA;    if (owningEntity == null || !privateSettersOnly) {&#xD;&#xA;        convertToE2EMapping.convertCommand(cqrsCrud.createCqrsCreateCommand(entity, folder));&#xD;&#xA;    }&#xD;&#xA;    convertToE2EMapping.convertQuery(cqrsCrud.createCqrsFindByIdQuery(entity, folder, resultDto));&#xD;&#xA;    convertToE2EMapping.convertQuery(cqrsCrud.createCqrsFindAllQuery(entity, folder, resultDto));&#xD;&#xA;    if (!privateSettersOnly) {&#xD;&#xA;        convertToE2EMapping.convertCommand(cqrsCrud.createCqrsUpdateCommand(entity, folder));&#xD;&#xA;    }&#xD;&#xA;    const operations = entity.getChildren(&quot;Operation&quot;).filter(x =&gt; x.typeReference.getType() == null);&#xD;&#xA;    for (const operation of operations) {&#xD;&#xA;        convertToE2EMapping.convertCommand(cqrsCrud.createCqrsCallOperationCommand(entity, operation, folder));&#xD;&#xA;    }&#xD;&#xA;    if (owningEntity == null || !privateSettersOnly) {&#xD;&#xA;        convertToE2EMapping.convertCommand(cqrsCrud.createCqrsDeleteCommand(entity, folder));&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;/**&#xD;&#xA; * Used by Intent.Modules\Modules\Intent.Modules.Application.MediatR.CRUD&#xD;&#xA; *&#xD;&#xA; * Source code here:&#xD;&#xA; * https://github.com/IntentArchitect/Intent.Modules/blob/development/DesignerMacros/src/services-cqrs-crud/create-crud-macro-e2e-mapping/create-crud-macro-e2e-mapping.ts&#xD;&#xA; */&#xD;&#xA;await execute(element);&#xD;&#xA;" isActive="true" />
              </properties>
            </stereotype>
            <stereotype stereotypeDefinitionId="cbe77364-d1d0-400b-a8c4-646a4c869612" name="Option Settings">
              <comment />
              <addedByDefault>true</addedByDefault>
              <definitionPackageName>Intent.ModuleBuilder</definitionPackageName>
              <definitionPackageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</definitionPackageId>
              <properties>
                <property name="b2c3a117-23d3-47e5-8b83-5b902c55a226" display="Icon" isActive="true" />
                <property name="0abff08a-3986-40b1-a28f-4cc03c4fc1ec" display="Shortcut" isActive="true" />
                <property name="79f6973f-5e3a-4618-9d4c-d7cc604bffe0" display="Shortcut (macOS)" isActive="true" />
                <property name="e034a0ca-0101-4594-8384-43048b714578" display="Type Order" isActive="true" />
                <property name="c03841e5-a1e9-4e95-b699-5a466dde7d7d" display="Is Option Visible Function" isActive="true" />
              </properties>
            </stereotype>
          </stereotypes>
          <metadata />
          <childElements />
        </childElement>
      </childElements>
    </childElement>
  </childElements>
</class>