<?xml version="1.0" encoding="utf-8"?>
<stereotypeDefinition id="5112db0d-9496-4a00-aff2-50c438050da6" version="3.1.0">
  <name>Mapping Type Settings</name>
  <targetMode>of-type</targetMode>
  <targetTypes>
    <type id="dd8e8a63-140c-41c8-b812-0dc923012fac">Mapping Type Settings</type>
  </targetTypes>
  <targetReferenceTypes />
  <applyMode>always</applyMode>
  <icon type="FontAwesome" source="cogs" />
  <displayIcon>false</displayIcon>
  <displayIconFunction>return false;</displayIconFunction>
  <displayFunction />
  <displayAsAnnotation>false</displayAsAnnotation>
  <displayAsText>true</displayAsText>
  <autoAdd>false</autoAdd>
  <allowMultipleApplies>false</allowMultipleApplies>
  <parentFolderId>1a876b1f-5811-45e9-9568-b0f8c6c938d6</parentFolderId>
  <order>0</order>
  <packageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</packageId>
  <packageName>Intent.ModuleBuilder</packageName>
  <properties>
    <property id="ce2db9f3-0c9d-4f01-832f-6f7f3801834c">
      <name>Sources</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>options</optionsSource>
      <placeholder />
      <defaultValue>[]</defaultValue>
      <valueOptions>
        <option>Data Types</option>
        <option>Invokable Types</option>
        <option>Event Types</option>
        <option>Specific Types</option>
        <option>All Types</option>
      </valueOptions>
      <lookupTypes />
    </property>
    <property id="3c1c64cb-01ce-4bc4-af99-f76ae8350ebf">
      <name>Source Types</name>
      <type>string</type>
      <controlType>multi-select</controlType>
      <optionsSource>lookup-children</optionsSource>
      <placeholder />
      <valueOptions />
      <lookupTypes>
        <type>62e5b1a9-0d36-4969-9d22-ce748155afbf</type>
      </lookupTypes>
      <lookupInternalTargetPropertyId>let mappingTypeSettingsId = "a901c634-6482-4993-ae3c-bd1b637f78d4";
let sourceMappingSettingsId = "1536425c-35f4-48e1-abe4-1f8f56533545";
let sourceMappables = element.getParent(mappingTypeSettingsId).getChildren(sourceMappingSettingsId)[0];

const getAllPackageIds = (mappablePackage) =&gt; {
    let result = [mappablePackage.id];
    let mappablePackageImportId = "90892fa1-b0b9-4af9-9f3b-4fdf37db9b05";

    // Add imported packages:
    mappablePackage.getChildren(mappablePackageImportId)
        .filter(x =&gt; x.typeReference.getType() != null)
        .map(x =&gt; {
            let packageIds = getAllPackageIds(x.typeReference.getType())
            return packageIds;
        })
        .forEach(x =&gt; result.push(...x));

    // Add package extensions:
    let mappablePackageExtensionId = "bddb69f0-e2c8-4373-b5cb-d701f311f935";
    lookupTypesOf(mappablePackageExtensionId)
        .filter(x =&gt; x.typeReference.getTypeId() == mappablePackage.id)
        .forEach(x =&gt; result.push(x.id));

    return result;
}

return getAllPackageIds(sourceMappables);</lookupInternalTargetPropertyId>
      <isActiveFunction>return getProperty("Sources").getValue() == "Specific Types"</isActiveFunction>
      <isRequiredFunction>return true;</isRequiredFunction>
    </property>
    <property id="7149c438-f5de-432e-8cd7-356d691aee9e">
      <name>Source Types Filter</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder>(Ignored)</placeholder>
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-macro-api</apiTypeDefinition>
      <isActiveFunction>return getProperty("Sources").getValue() == "Specific Types" || getProperty("Sources").getValue() == "All Types"</isActiveFunction>
      <isRequiredFunction>return false</isRequiredFunction>
    </property>
    <property id="8c6140d1-311a-4233-b4c9-6ee41f15a606">
      <name>Source Arrow Type</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>options</optionsSource>
      <placeholder>(Default)</placeholder>
      <defaultValue>None</defaultValue>
      <valueOptions>
        <option>None</option>
        <option>Solid Arrow</option>
      </valueOptions>
      <lookupTypes />
      <isRequiredFunction />
    </property>
    <property id="68504875-ebf6-47d6-ac36-c506431cf57c">
      <name>Targets</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>options</optionsSource>
      <placeholder />
      <defaultValue>[]</defaultValue>
      <valueOptions>
        <option>Data Types</option>
        <option>Invokable Types</option>
        <option>Event Types</option>
        <option>Specific Types</option>
        <option>All Types</option>
      </valueOptions>
      <lookupTypes />
    </property>
    <property id="8050a21c-c6ff-46fd-8677-eeda40f10719">
      <name>Target Types</name>
      <type>string</type>
      <controlType>multi-select</controlType>
      <optionsSource>lookup-children</optionsSource>
      <placeholder />
      <valueOptions />
      <lookupTypes>
        <type>62e5b1a9-0d36-4969-9d22-ce748155afbf</type>
      </lookupTypes>
      <lookupInternalTargetPropertyId>let mappingTypeSettingsId = "a901c634-6482-4993-ae3c-bd1b637f78d4";
let targetMappingSettingsId = "a812bff7-017a-4692-8ec7-1caad0a1dd88";
let mappableReferenceId = "072515e1-3a1e-4472-a27e-e322a683d299";
let targetMappables = element.getParent(mappingTypeSettingsId).getChildren(targetMappingSettingsId)[0];

const getAllPackageIds = (mappablePackage) =&gt; {
    let result = [mappablePackage.id];
    let mappablePackageImportId = "90892fa1-b0b9-4af9-9f3b-4fdf37db9b05";

    // Add imported packages:
    mappablePackage.getChildren(mappablePackageImportId)
        .filter(x =&gt; x.typeReference.getType() != null)
        .map(x =&gt; {
            let packageIds = getAllPackageIds(x.typeReference.getType())
            return packageIds;
        })
        .forEach(x =&gt; result.push(...x));

    // Add package extensions:
    let mappablePackageExtensionId = "bddb69f0-e2c8-4373-b5cb-d701f311f935";
    lookupTypesOf(mappablePackageExtensionId)
        .filter(x =&gt; x.typeReference.getTypeId() == mappablePackage.id)
        .forEach(x =&gt; result.push(x.id));

    return result;
}

return getAllPackageIds(targetMappables);</lookupInternalTargetPropertyId>
      <isActiveFunction>return getProperty("Targets").getValue() == "Specific Types"</isActiveFunction>
      <isRequiredFunction>return true;</isRequiredFunction>
    </property>
    <property id="ff744541-57a1-4975-a312-b47035a158a3">
      <name>Target Types Filter</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder>(Ignored)</placeholder>
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-macro-api</apiTypeDefinition>
      <isActiveFunction>return getProperty("Sources").getValue() == "Specific Types" || getProperty("Sources").getValue() == "All Types"</isActiveFunction>
      <isRequiredFunction>return false</isRequiredFunction>
    </property>
    <property id="ba0f1099-248b-4bf1-ac12-adb78d44ff03">
      <name>Target Arrow Type</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>options</optionsSource>
      <placeholder>(Default)</placeholder>
      <defaultValue>Solid Arrow</defaultValue>
      <valueOptions>
        <option>None</option>
        <option>Solid Arrow</option>
      </valueOptions>
      <lookupTypes />
    </property>
    <property id="6ee5b3e3-628e-4996-87b5-08649e101887">
      <name>Represents</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>options</optionsSource>
      <placeholder />
      <defaultValue>[]</defaultValue>
      <valueOptions>
        <option>Data</option>
        <option>Invokable</option>
      </valueOptions>
      <lookupTypes />
      <isRequiredFunction>return true;</isRequiredFunction>
    </property>
    <property id="ba7b9885-1d77-4dc2-ba45-16fd368076b6">
      <name>Sync Source Child Types</name>
      <type>string</type>
      <controlType>multi-select</controlType>
      <optionsSource>lookup-element</optionsSource>
      <placeholder>(Sync Disabled)</placeholder>
      <valueOptions />
      <lookupTypes>
        <type>727577aa-3e07-4b41-be7d-7359bb1e48c8</type>
      </lookupTypes>
      <lookupInternalTargetPropertyId>let mappingTypeSettingsId = "a901c634-6482-4993-ae3c-bd1b637f78d4";
let sourceMappingSettingsId = "1536425c-35f4-48e1-abe4-1f8f56533545";
let sourceMappables = element.getParent(mappingTypeSettingsId).getChildren(sourceMappingSettingsId)[0];

const getAllPackageIds = (mappablePackage) =&gt; {
    let result = [mappablePackage.id];
    let mappablePackageImportId = "90892fa1-b0b9-4af9-9f3b-4fdf37db9b05";

    // Add imported packages:
    mappablePackage.getChildren(mappablePackageImportId)
        .filter(x =&gt; x.typeReference.getType() != null)
        .map(x =&gt; {
            let packageIds = getAllPackageIds(x.typeReference.getType())
            return packageIds;
        })
        .forEach(x =&gt; result.push(...x));

    // Add package extensions:
    let mappablePackageExtensionId = "bddb69f0-e2c8-4373-b5cb-d701f311f935";
    lookupTypesOf(mappablePackageExtensionId)
        .filter(x =&gt; x.typeReference.getTypeId() == mappablePackage.id)
        .forEach(x =&gt; result.push(x.id));

    return result;
}

return getAllPackageIds(sourceMappables);</lookupInternalTargetPropertyId>
      <isActiveFunction />
      <isRequiredFunction />
    </property>
    <property id="ace10cc2-ece7-458a-bafb-2fc185f99335">
      <name>Line Color</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder />
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-api</apiTypeDefinition>
    </property>
    <property id="715395d8-db84-459f-bf9e-f910e2aff883">
      <name>Line Dash Array</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder />
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-api</apiTypeDefinition>
    </property>
    <property id="78717792-0cfa-4792-9ec2-57ab39d5e1e0">
      <name>Validation Function</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder />
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-api</apiTypeDefinition>
    </property>
  </properties>
</stereotypeDefinition>