<?xml version="1.0" encoding="utf-8"?>
<stereotypeDefinition id="df24679d-09ec-4efc-af37-a1a926b7a108" version="3.1.0">
  <name>Mappable Settings</name>
  <targetMode>of-type</targetMode>
  <targetTypes>
    <type id="62e5b1a9-0d36-4969-9d22-ce748155afbf">Mappable Element Settings</type>
    <type id="c776bc38-c0e8-4535-87dd-79cfd33be2ad">Static Mappable Settings</type>
  </targetTypes>
  <targetReferenceTypes />
  <applyMode>always</applyMode>
  <icon type="FontAwesome" source="cogs" />
  <displayIcon>false</displayIcon>
  <displayIconFunction>return false;</displayIconFunction>
  <displayFunction>return ``;</displayFunction>
  <displayAsAnnotation>false</displayAsAnnotation>
  <displayAsText>true</displayAsText>
  <autoAdd>false</autoAdd>
  <allowMultipleApplies>false</allowMultipleApplies>
  <parentFolderId>1a876b1f-5811-45e9-9568-b0f8c6c938d6</parentFolderId>
  <order>0</order>
  <packageId>9972b2a9-b749-4bba-b5c8-824bf694c6ef</packageId>
  <packageName>Intent.ModuleBuilder</packageName>
  <properties>
    <property id="91a221f2-eb37-40cf-8cbf-9648853c3686">
      <name>Represents</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>options</optionsSource>
      <placeholder />
      <defaultValue>Data</defaultValue>
      <valueOptions>
        <option>Data</option>
        <option>Invokable</option>
      </valueOptions>
      <lookupTypes />
      <isRequiredFunction>return true;</isRequiredFunction>
    </property>
    <property id="a93d5ab2-96fd-411b-8423-3c9ec7db4ddb">
      <name>Icon Override</name>
      <type>string</type>
      <controlType>icon</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder />
      <valueOptions />
      <lookupTypes />
    </property>
    <property id="36dbf36f-e7f8-4698-9ead-dc0e1de3ed41">
      <hint>Filters whether this setting can be applied to the underlying element.</hint>
      <name>Filter Function</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder>(Default)</placeholder>
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-macro-api</apiTypeDefinition>
      <isActiveFunction />
      <isRequiredFunction>return false</isRequiredFunction>
    </property>
    <property id="9b689fcf-4060-4bff-b23e-6f150ecadd65">
      <name>Is Required Function</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder>(Default)</placeholder>
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-macro-api</apiTypeDefinition>
      <isActiveFunction />
      <isRequiredFunction>return false</isRequiredFunction>
    </property>
    <property id="fe1fd512-566d-427a-a9a8-ed16c6ae8f98">
      <hint>Determines whether this mapping node can be mapped.</hint>
      <name>Is Mappable Function</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder>(Default)</placeholder>
      <defaultValue>return true;</defaultValue>
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-macro-api</apiTypeDefinition>
      <isActiveFunction />
      <isRequiredFunction>return false</isRequiredFunction>
    </property>
    <property id="8729cf25-6468-4ad0-aed2-2f7c854c2438">
      <hint>Whether this type can be mapped multiple times</hint>
      <name>Allow Multiple Mappings</name>
      <type>string</type>
      <controlType>checkbox</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder>(Default)</placeholder>
      <defaultValue>true</defaultValue>
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-api</apiTypeDefinition>
      <isActiveFunction />
      <isRequiredFunction>return true;</isRequiredFunction>
    </property>
    <property id="6da92064-59ef-4361-8ad6-c73b54c18cc2">
      <name>Traversable Mode</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>options</optionsSource>
      <placeholder />
      <defaultValue>Not Traversable</defaultValue>
      <valueOptions>
        <option>Not Traversable</option>
        <option>Traverse Specific Types</option>
        <option>Traverse All Types</option>
      </valueOptions>
      <lookupTypes />
    </property>
    <property id="3f279b0b-8772-4dd5-bf54-1fde024420e7">
      <name>Traversable Types</name>
      <type>string</type>
      <controlType>multi-select</controlType>
      <optionsSource>lookup-children</optionsSource>
      <placeholder />
      <valueOptions />
      <lookupTypes>
        <type>62e5b1a9-0d36-4969-9d22-ce748155afbf</type>
      </lookupTypes>
      <lookupInternalTargetPropertyId>let sourceMappingSettingsId = "1536425c-35f4-48e1-abe4-1f8f56533545";
let targetMappingSettingsId = "a812bff7-017a-4692-8ec7-1caad0a1dd88";
let mappablePackageId = "aa2eab42-5ffc-4028-b4b6-95ff719705d4";
let mappablePackageExtensionId = "bddb69f0-e2c8-4373-b5cb-d701f311f935";

let mappablePackage = element.getParent(sourceMappingSettingsId) 
    ?? element.getParent(targetMappingSettingsId)
    ?? element.getParent(mappablePackageId)
    ?? element.getParent(mappablePackageExtensionId);
    
const getAllPackageIds = (mappablePackage) =&gt; {
    let result = [mappablePackage.id];
    let mappablePackageImportId = "90892fa1-b0b9-4af9-9f3b-4fdf37db9b05";

    // Add imported packages:
    mappablePackage.getChildren(mappablePackageImportId)
        .filter(x =&gt; x.typeReference.getType() != null)
        .map(x =&gt; {
            let packageIds = getAllPackageIds(x.typeReference.getType())
            return packageIds;
        })
        .forEach(x =&gt; result.push(...x));

    // Add package extensions:
    let mappablePackageExtensionId = "bddb69f0-e2c8-4373-b5cb-d701f311f935";
    lookupTypesOf(mappablePackageExtensionId)
        .filter(x =&gt; x.typeReference.getTypeId() == mappablePackage.id)
        .forEach(x =&gt; result.push(x.id));

    // If is package extension, add extended package:
    if (mappablePackage.specializationId == mappablePackageExtensionId) {
        result.push(...getAllPackageIds(mappablePackage.typeReference.getType()))
    }

    return result;
}

return getAllPackageIds(mappablePackage);</lookupInternalTargetPropertyId>
      <isActiveFunction>// Traversal Mode == Traverse Specific Types
return getProperty("6da92064-59ef-4361-8ad6-c73b54c18cc2").getValue() == "Traverse Specific Types";</isActiveFunction>
      <isRequiredFunction>// Traversal Mode == Traverse Specific Types
return getProperty("6da92064-59ef-4361-8ad6-c73b54c18cc2").getValue() == "Traverse Specific Types";</isRequiredFunction>
    </property>
    <property id="a6ec44d7-f928-4221-bed6-8589176a94c7">
      <name>Get Traversable Type Function</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder>(Default)</placeholder>
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-macro-api</apiTypeDefinition>
      <isActiveFunction>// Traversal Mode == Traverse Specific Types
return getProperty("6da92064-59ef-4361-8ad6-c73b54c18cc2").getValue() != "Not Traversable";</isActiveFunction>
      <isRequiredFunction>return false</isRequiredFunction>
    </property>
    <property id="69bfe770-9fcd-40dc-8505-2de5a699887e">
      <name>Sync Mapping To</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>options</optionsSource>
      <placeholder />
      <defaultValue>Disabled</defaultValue>
      <valueOptions>
        <option>Disabled</option>
        <option>Element Value</option>
        <option>Stereotype Property Value</option>
      </valueOptions>
      <lookupTypes />
    </property>
    <property id="73a079b1-5720-4b70-ada3-7af8a98b7510">
      <name>Sync Stereotype</name>
      <type>string</type>
      <controlType>text</controlType>
      <optionsSource>lookup-children</optionsSource>
      <placeholder>(Stereotype Id)</placeholder>
      <valueOptions />
      <lookupTypes />
      <isActiveFunction>return getProperty("69bfe770-9fcd-40dc-8505-2de5a699887e").getValue() == "Stereotype Property Value"</isActiveFunction>
      <isRequiredFunction>return getProperty("69bfe770-9fcd-40dc-8505-2de5a699887e").getValue() == "Stereotype Property Value"</isRequiredFunction>
    </property>
    <property id="c6d38f6b-83f0-466d-9b89-3aa3b8c58d6f">
      <name>Sync Stereotype Property</name>
      <type>string</type>
      <controlType>text</controlType>
      <optionsSource>lookup-children</optionsSource>
      <placeholder>(Stereotype Property Id)</placeholder>
      <valueOptions />
      <lookupTypes />
      <isActiveFunction>return getProperty("69bfe770-9fcd-40dc-8505-2de5a699887e").getValue() == "Stereotype Property Value"</isActiveFunction>
      <isRequiredFunction>return getProperty("69bfe770-9fcd-40dc-8505-2de5a699887e").getValue() == "Stereotype Property Value"</isRequiredFunction>
    </property>
    <property id="c2f9befb-4ce0-4f0b-afb1-22bbfd58f0a3">
      <name>Can Be Modified</name>
      <type>string</type>
      <controlType>checkbox</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder />
      <defaultValue>false</defaultValue>
      <valueOptions />
      <lookupTypes />
    </property>
    <property id="2782bc72-02b8-4e25-9fd7-b625bf8a11d2">
      <name>Create Name Function</name>
      <type>string</type>
      <controlType>function</controlType>
      <optionsSource>n/a</optionsSource>
      <placeholder>(Default)</placeholder>
      <defaultValue />
      <valueOptions />
      <lookupTypes />
      <apiTypeDefinition>element-macro-api</apiTypeDefinition>
      <isActiveFunction>return CanBeModified == true;</isActiveFunction>
    </property>
    <property id="51aec36f-cc2d-489e-ba6b-816aca340502">
      <name>Use Child Mappings From</name>
      <type>string</type>
      <controlType>select</controlType>
      <optionsSource>lookup-children</optionsSource>
      <placeholder />
      <valueOptions />
      <lookupTypes>
        <type>62e5b1a9-0d36-4969-9d22-ce748155afbf</type>
      </lookupTypes>
      <lookupInternalTargetPropertyId>let sourceMappingSettingsId = "1536425c-35f4-48e1-abe4-1f8f56533545";
let targetMappingSettingsId = "a812bff7-017a-4692-8ec7-1caad0a1dd88";
let mappablePackageId = "aa2eab42-5ffc-4028-b4b6-95ff719705d4";
let mappablePackageExtensionId = "bddb69f0-e2c8-4373-b5cb-d701f311f935";

let mappablePackage = element.getParent(sourceMappingSettingsId) 
    ?? element.getParent(targetMappingSettingsId)
    ?? element.getParent(mappablePackageId)
    ?? element.getParent(mappablePackageExtensionId);
    
const getAllPackageIds = (mappablePackage) =&gt; {
    let result = [mappablePackage.id];
    let mappablePackageImportId = "90892fa1-b0b9-4af9-9f3b-4fdf37db9b05";

    // Add imported packages:
    mappablePackage.getChildren(mappablePackageImportId)
        .filter(x =&gt; x.typeReference.getType() != null)
        .map(x =&gt; {
            let packageIds = getAllPackageIds(x.typeReference.getType())
            return packageIds;
        })
        .forEach(x =&gt; result.push(...x));

    // Add package extensions:
    let mappablePackageExtensionId = "bddb69f0-e2c8-4373-b5cb-d701f311f935";
    lookupTypesOf(mappablePackageExtensionId)
        .filter(x =&gt; x.typeReference.getTypeId() == mappablePackage.id)
        .forEach(x =&gt; result.push(x.id));

    // If is package extension, add extended package:
    if (mappablePackage.specializationId == mappablePackageExtensionId) {
        result.push(...getAllPackageIds(mappablePackage.typeReference.getType()))
    }

    return result;
}

return getAllPackageIds(mappablePackage);</lookupInternalTargetPropertyId>
    </property>
  </properties>
</stereotypeDefinition>