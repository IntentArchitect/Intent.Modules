<#@ template language="C#" inherits="CSharpTemplateBase<FileTemplateModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.ModuleBuilder.Api" #>
<#@ import namespace="Intent.ModuleBuilder.Helpers" #>
<#@ import namespace="System.Linq" #>
using Intent.Metadata.Models;
using Intent.RoslynWeaver.Attributes;
using Intent.Engine;
using Intent.Templates;
using Intent.Modules.Common;
using Intent.Modules.Common.Templates;
using System;
using System.Collections.Generic;
using System.Linq;
<#= Model.GetModelType() != null ? string.Format("using {0};", Model.GetModelType().ParentModule.ApiNamespace) : "" #>

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
	[IntentManaged(Mode.Merge)]
    partial class <#= ClassName #> : <#= GetBaseType() #>
    {
        [IntentManaged(Mode.Fully)]
        public const string TemplateId = "<#= GetTemplateId() #>";

        [IntentInitialGen]
        public <#= ClassName #>(IOutputTarget outputTarget, <#= GetModelType() #> model) : base(TemplateId, outputTarget, model)
        {
        }

        [IntentManaged(Mode.Merge, Body = Mode.Ignore, Signature = Mode.Fully)]
        public override ITemplateFileConfig GetTemplateFileConfig()
        {
            return new TemplateFileConfig(
                fileName: $"<#= Model.IsFilePerModelTemplateRegistration()  ? "{Model.Name}" : Model.Name.Replace("Template", "") #>",
                fileExtension: "<#= Model.GetFileSettings().FileExtension() #>"
            );
        }
<#  if (Model.GetFileSettings().TemplatingMethod().IsCustom()) { #>

        public override string TransformText()
        {
            throw new NotImplementedException("Implement custom template here");
        }
<#  } #>
    }
}