// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.ModuleBuilder.Templates.metadata.StereotypeDefinitionFileTemplate
{
    using System.Collections.Generic;
    using System.Linq;
    using Intent.Modules.Common;
    using Intent.Modules.Common.Templates;
    using Intent.Metadata.Models;
    using Intent.Modules.ModuleBuilder.Api;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent.Modules\Modules\Intent.Modules.ModuleBuilder\Templates\metadata\StereotypeDefinitionFileTemplate\StereotypeDefinitionFileTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class StereotypeDefinitionFileTemplate : IntentProjectItemTemplateBase<IModuleStereotype>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<stereotypeDefinition id=\"");
            
            #line 10 "C:\Dev\Intent.Modules\Modules\Intent.Modules.ModuleBuilder\Templates\metadata\StereotypeDefinitionFileTemplate\StereotypeDefinitionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.Id));
            
            #line default
            #line hidden
            this.Write("\">\r\n  <name>Decorator Settings</name>\r\n  <icon type=\"UrlImagePath\" source=\"data:i" +
                    "mage/png;base64,iVBORw0KGgoAAAANSUhEUgAAAD4AAAA+CAMAAAEzGGjgAAAAAXNSR0IArs4c6QAA" +
                    "AARnQU1BAACxjwv8YQUAAAKpUExURQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                    "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
                    "AAICAgICAgICAgAAAAAAAAAAAAICAgAAAAICAgAAAAAAAAICAgAAAAAAAAAAAAAAAAAAAAICAgAAAAAA" +
                    "AAAAAAAAAAAAAAAAAAICAgICAgICAgAAAAAAAAICAgAAAAAAAAAAAAAAAAICAgICAgAAAAICAgAAAAIC" +
                    "AgAAAAAAAAAAAAAAAAAAAAAAAAICAgAAAAAAAAAAAAAAAAICAgAAAAAAAAAAAAICAgAAAAICAgAAAAEB" +
                    "AQAAAAEBAQAAAAAAAAAAAAAAAAEBAQAAAAEBAQAAAAAAAAEBAQEBAQAAAAAAAAEBAQAAAAEBAQAAAAEB" +
                    "AQAAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB" +
                    "AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEB" +
                    "AQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAdjMGGkAAADidFJOUwABAgME" +
                    "BQYHCAoLDA0ODxAREhMUFRYXGBkaGxwdHh8gISIjJCUmJygpKywtLi8wMTIzNDc4OTo7PD0+P0BBQkNE" +
                    "RUZHSElKS0xNTk9QU1RVVldZWltcXV5hY2RmZ2lqa21ub3BxcXJzc3R1dnd4eHl6e3x9gISFhoeIiIyO" +
                    "j5CQk5WVlpaXmZqcnZ6en6ChoqKmp6ipqqqrq6ysra6vsLCxsbKztba5urq8vL29wMHCw8bHycrLzM7P" +
                    "0NPU1dfY2drb3uDh4uPk5ebn6Onq6+zt7u/w8fLz9PX29/j5+vv8/f7eFprpAAAACXBIWXMAAAsSAAAL" +
                    "EgHS3X78AAAFJUlEQVRIS82W+VuVVRDH57LI4pKUyRKJSGq5QZJgIBqRFzQDDJGypGi1QJGiVHJrd69s" +
                    "Na2MSm3XwsrSsiKhAOHCBRKFYP6SZubMC+8Ll4R6fJ4+P9wz8/2ec9/tLAMOUBtGAjibwAHib6H0w5Eb" +
                    "8FGxEFdY3U3TB95qGiaVgvLaU9JpOcL7vf88wrQHVej3NyVlGjCHMHEzYrW5AyYa8WcX3I1YKWke/8cJ" +
                    "LEe5JCszj+N6SqICEedJF3MzwpVGgEQW82G0pkMipCxHI0ND7y0RiBO6EZcdwLmSntHrEZLzLSRAaG9K" +
                    "OYS0PEfNWJNRjtdhJD9NkJX74ZKFJg90U/4WtpNRPEnG98g/0QuUDDbwCIPksYhPU9yCeFhyGAfQyF6y" +
                    "SZkiPK/Rf6KWLzpFEweVXXyvHvbvoWAT2i4OsJf1/piHEy5XCbHWqwHuUU8IZ2WbPflQE4BQT3MrfQ+c" +
                    "A4H0phCrAL6hpsPb9LL4y1lE7OSveBO/71WQaiR+3QDxmkRBobTnAGgWCn7yB8TNnM2kIGcO/eyn5ILo" +
                    "FvvYR6x7JCt7jwlxmlpMm2oO0tVkYhB3USP9KugLdlrf0kkd+7zSBiMgIECjS4K7rKz0H9YRz3ms18QH" +
                    "Cew3a+JgBu6g30Xst1EQ0f6FyBbTSf8Ysn9iv+f5uGupOeZSj4hkvT+fqklcr5KDLjWZTaphe99ijlBP" +
                    "eEmkB8ZQOP1biacaQ5GPHqvJU5zEaSLQ9iTf7cl672nalk5Q9qxaABVN3nMkVAMc4W44Th63p7XZw5eD" +
                    "ABERi8APces1PXja7BlEqd3PhKWILpiMXoAaI621+7kwG3G0ayt/oD+NJD78ZZJXAGgLIdbBZdIiLhQf" +
                    "Jqbcy9koGMkdjgA8RM2PmfEhxmb+IOUotbOX0vyjDQnxNmMod7L0ZajE8zi29kbDBJEQ9+Zm3verCe3z" +
                    "f4yRnGxXk0hSyYmazJuc3yGrh9gtX3OGesLrtKcDyGOeo4lF88Fh0yV475Ztg14vzahI/u2PPHijJr7g" +
                    "975OY59c4vU7LPyDhH95Q+vO88ugZWY24WESZ30rbEpT6aJEp8+3jvy0Jh2N3gKVwlIyJvlr7IMZh7l3" +
                    "pWzaIcXtMpbo2DKKlRiZMcdu5NgHZjDzefEburYsOj4qqdQQv3IcihZzO9S+OBk6xE7oaj78hsJGqT8G" +
                    "MH6b+obvNxfckpqSsWx9lQqG/THafSArtAt1SrbNFv/47Sojlqjmg8xm7XPQbJlhi+9flXOVhOHWnfXk" +
                    "Se7A/+q0xfkrK05ql8eCSYv6hHdSovNrXr+uu0yG1VsKC5bMn2y7uTnqKLvGk7bGdkxfeIaEkbZSi8m2" +
                    "JlCA1hQW2aQl8dGxk7a44HIKGnJJymgV12KtlBtEv+FdWaTlUomJbi44plHQ8iAFqVJu9dI3nCtHGw/z" +
                    "UXico/fc6Tu5PRVGSgFHfZRYwyG46Pe6hkZPW5cx6qSgeFuPAXrZn/HGnvCDybrbPE1n6+ufMHu3Db9S" +
                    "0wG95phYWXWmoaHmuzUjOEn+Rc2Nsn58MZaLVuGdmb11FuOK26EGvhat2kCmfqB9CM+G1CgpB1zhSY/b" +
                    "yvGjVPr7JGK39rDR1amBjXdtNWofiVRdD5H5OsTOuBfVJLqlYh2MA74ffyKdVsy+KXDFgtKq3g/XfbLc" +
                    "HQHRuuoOTdfuA4l9ob1xfbiJs6RmZ9oKjRK2uqbj1cEHO5nF01bwLFJpOARqpUKzkM7f4RM06/Z8Iu8G" +
                    "Wy3yfwLgb/eqG6zzFeEWAAAAAElFTkSuQmCC\" />\r\n  <displayIcon>");
            
            #line 13 "C:\Dev\Intent.Modules\Modules\Intent.Modules.ModuleBuilder\Templates\metadata\StereotypeDefinitionFileTemplate\StereotypeDefinitionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.DisplayIcon));
            
            #line default
            #line hidden
            this.Write("</displayIcon>\r\n  <displayFunction />\r\n  <targetElements>\r\n    <element>decorator" +
                    "</element>\r\n  </targetElements>\r\n  <autoAdd>");
            
            #line 18 "C:\Dev\Intent.Modules\Modules\Intent.Modules.ModuleBuilder\Templates\metadata\StereotypeDefinitionFileTemplate\StereotypeDefinitionFileTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Model.AutoAdd));
            
            #line default
            #line hidden
            this.Write(@"</autoAdd>
  <parentFolderId>0140df12-410f-43a8-8c75-7a68c922474b</parentFolderId>
  <properties>
    <property id=""8acbb25a-9b8a-4da2-ba42-7c349851f049"">
      <comment>The decorator will specify namespaces that will be included when the template generation runs. In other words, if your decorator is aimed at C# code, you specify the namespaces that will form part of the ""using My.Namespace;"" code when any templates (that the decorator depends on) gets executed.</comment>
      <name>Declare Usings</name>
      <type>boolean</type>
      <options />
    </property>
  </properties>
</stereotypeDefinition>");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
