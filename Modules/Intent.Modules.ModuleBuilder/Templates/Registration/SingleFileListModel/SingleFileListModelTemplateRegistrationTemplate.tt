<#@ template language="C#" inherits="IntentRoslynProjectItemTemplateBase<IModuleBuilderElement>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Api" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Helpers" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Intent.Metadata.Models;
using Intent.Modules.Common;
using Intent.Modules.Common.Registrations;
using Intent.RoslynWeaver.Attributes;
using Intent.Engine;
using Intent.Templates;
<#=DependencyUsings#>
[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge, Body = Mode.Merge, Signature = Mode.Fully)]
    public class <#= ClassName #> : ListModelTemplateRegistrationBase<<#= Model.GetTargetModel() #>>
    {
        private readonly IMetadataManager _metadataManager;

        public <#= ClassName #>(IMetadataManager metadataManager)
        {
            _metadataManager = metadataManager;
        }

        public override string TemplateId =>  <#= GetTemplateNameForTemplateId() #>.TemplateId;

        public override ITemplate CreateTemplateInstance(IProject project, IList<<#= Model.GetTargetModel() #>> model)
        {
            return new <#= GetTemplateNameForTemplateId() #>(project, model);
        }

        [IntentManaged(Mode.Merge, Body = Mode.Ignore, Signature = Mode.Fully)]
        public override IList<<#= Model.GetTargetModel() #>> GetModels(Engine.IApplication application)
        {
            // Filter classes by SpecializationType if necessary (e.g. .Where(x => x.SpecializationType == "Service") for services only)
            return _metadataManager.GetClassModels(application, "<#= Model.GetModelerName() #>")
                .OrderBy(x => x.Name)
                .ToList();
        }
    }
}