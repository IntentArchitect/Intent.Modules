<#@ template language="C#" inherits="CSharpTemplateBase<ExtensionModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.ModuleBuilder.Api" #>
<#@ import namespace="Intent.ModuleBuilder.Helpers" #>
using System;
using System.Collections.Generic;
using System.Linq;
using Intent.Metadata.Models;
using Intent.Modules.Common;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public static class <#= ClassName #>
    {
<#  foreach(var stereotypeDefinition in Model.StereotypeDefinitions) { #>
        public static <#= stereotypeDefinition.Name.ToCSharpIdentifier() #> Get<#= stereotypeDefinition.Name.ToCSharpIdentifier() #>(this <#= ModelClassName #> model)
        {
            var stereotype = model.GetStereotype(<#= stereotypeDefinition.Name.ToCSharpIdentifier() #>.DefinitionId);
            return stereotype != null ? new <#= stereotypeDefinition.Name.ToCSharpIdentifier() #>(stereotype) : null;
        }
<#      if (stereotypeDefinition.AllowMultipleApplies) { #>

        public static IReadOnlyCollection<<#= stereotypeDefinition.Name.ToCSharpIdentifier() #>> Get<#= ForcePluralize(stereotypeDefinition.Name.ToCSharpIdentifier()) #>(this <#= ModelClassName #> model)
        {
            var stereotypes = model
                .GetStereotypes(<#= stereotypeDefinition.Name.ToCSharpIdentifier() #>.DefinitionId)
                .Select(stereotype => new <#= stereotypeDefinition.Name.ToCSharpIdentifier() #>(stereotype))
                .ToArray();

            return stereotypes;
        }
<#      } #> 

        public static bool Has<#= stereotypeDefinition.Name.ToCSharpIdentifier() #>(this <#= ModelClassName #> model)
        {
            return model.HasStereotype(<#= stereotypeDefinition.Name.ToCSharpIdentifier() #>.DefinitionId);
        }

        public static bool TryGet<#= stereotypeDefinition.Name.ToCSharpIdentifier() #>(this <#= ModelClassName #> model, out <#= stereotypeDefinition.Name.ToCSharpIdentifier() #> stereotype)
        {
            if (!Has<#= stereotypeDefinition.Name.ToCSharpIdentifier() #>(model))
            {
                stereotype = null;
                return false;
            }

            stereotype = new <#= stereotypeDefinition.Name.ToCSharpIdentifier() #>(model.GetStereotype(<#= stereotypeDefinition.Name.ToCSharpIdentifier() #>.DefinitionId));
            return true;
        }

<#  } #>
<#  foreach(var stereotypeDefinition in Model.StereotypeDefinitions) { #>
        public class <#= stereotypeDefinition.Name.ToCSharpIdentifier() #>
        {
            private IStereotype _stereotype;
            public const string DefinitionId = "<#= stereotypeDefinition.Id #>";

            public <#= stereotypeDefinition.Name.ToCSharpIdentifier() #>(IStereotype stereotype)
            {
                _stereotype = stereotype;
            }

            public string <#= stereotypeDefinition.Properties.Any(x => x.Name.Equals("Name", StringComparison.InvariantCultureIgnoreCase)) ? "StereotypeName" : "Name" #> => _stereotype.Name;

<#      foreach(var property in stereotypeDefinition.Properties) { 
        switch (property.ControlType) {
            case StereotypePropertyControlType.TextBox:
            case StereotypePropertyControlType.TextArea:
            case StereotypePropertyControlType.Function:
            #>
            public string <#= property.Name.ToCSharpIdentifier() #>() {
                return _stereotype.GetProperty<string>("<#= property.Name #>");
            }

<#              break;
            case StereotypePropertyControlType.Number:#>
            public int? <#= property.Name.ToCSharpIdentifier() #>() {
                return _stereotype.GetProperty<int?>("<#= property.Name #>");
            }

<#              break;
            case StereotypePropertyControlType.Decimal:#>
            public decimal? <#= property.Name.ToCSharpIdentifier() #>() {
                return _stereotype.GetProperty<decimal?>("<#= property.Name #>");
            }

<#              break;
            case StereotypePropertyControlType.Checkbox:#>
            public bool <#= property.Name.ToCSharpIdentifier() #>() {
                return _stereotype.GetProperty<bool>("<#= property.Name #>");
            }

<#              break;
            case StereotypePropertyControlType.Select:#>
<#              switch (property.OptionsSource) {
                    case StereotypePropertyOptionsSource.LookupElement:
                    case StereotypePropertyOptionsSource.LookupChildren:
                    case StereotypePropertyOptionsSource.NestedLookup:#>
            public IElement <#= property.Name.ToCSharpIdentifier() #>() {
<#                      if (property.LookupTypes.Count == 1 && false) { /* TODO */ #>
                return new <#= property.LookupTypes.Single().ToCSharpIdentifier() #>(_stereotype.GetProperty<IElement>("<#= property.Name #>"));
<#                      } else { #>
                return _stereotype.GetProperty<IElement>("<#= property.Name #>");
<#                      } #>
            }

<#                      break;
                    case StereotypePropertyOptionsSource.LookupStereotype:#>
            public IStereotypeDefinition <#= property.Name.ToCSharpIdentifier() #>() {
<#                      if (property.LookupTypes.Count == 1 && false) { /* TODO */ #>
                return new <#= property.LookupTypes.Single().ToCSharpIdentifier() #>(_stereotype.GetProperty<IStereotypeDefinition>("<#= property.Name #>"));
<#                      } else { #>
                return _stereotype.GetProperty<IStereotypeDefinition>("<#= property.Name #>");
<#                      } #>
            }

<#                      break;
                case StereotypePropertyOptionsSource.Options:#>
            public <#= property.Name.ToCSharpIdentifier() #>Options <#= property.Name.ToCSharpIdentifier() #>() {
                return new <#= property.Name.ToCSharpIdentifier() #>Options(_stereotype.GetProperty<string>("<#= property.Name #>"));
            }

<#                      break;
                    default:
                        throw new ArgumentOutOfRangeException(property.OptionsSource.ToString());
                } #>
<#              break;
            case StereotypePropertyControlType.MultiSelect:#>
<#              switch (property.OptionsSource) {
                    case StereotypePropertyOptionsSource.LookupElement:
                    case StereotypePropertyOptionsSource.LookupChildren:
                    case StereotypePropertyOptionsSource.NestedLookup:#>
            public IElement[] <#= property.Name.ToCSharpIdentifier() #>() {
                return _stereotype.GetProperty<IElement[]>("<#= property.Name #>") ?? new IElement[0];
            }

<#                      break;
                    case StereotypePropertyOptionsSource.LookupStereotype:#>
            public IStereotypeDefinition[] <#= property.Name.ToCSharpIdentifier() #>() {
<#                      if (property.LookupTypes.Count == 1 && false) { /* TODO */ #>
                return new <#= property.LookupTypes.Single().ToCSharpIdentifier() #>(_stereotype.GetProperty<IStereotypeDefinition[]>("<#= property.Name #>"));
<#                      } else { #>
                return _stereotype.GetProperty<IStereotypeDefinition[]>("<#= property.Name #>");
<#                      } #>
            }
<#                      break;
                case StereotypePropertyOptionsSource.Options:#>
            public <#= property.Name.ToCSharpIdentifier() #>Options[] <#= property.Name.ToCSharpIdentifier() #>() {
                return _stereotype.GetProperty<string[]>("<#= property.Name #>")?.Select(x => new <#= property.Name.ToCSharpIdentifier() #>Options(x)).ToArray() ?? new <#= property.Name.ToCSharpIdentifier() #>Options[0];
            }

<#                      break;
                    default:
                        throw new ArgumentOutOfRangeException(property.OptionsSource.ToString());
                } #>
<#              break;
            case StereotypePropertyControlType.Icon:#>
            public IIconModel <#= property.Name.ToCSharpIdentifier() #>() {
                return _stereotype.GetProperty<IIconModel>("<#= property.Name #>");
            }

<#              break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        }#>
<#  foreach (var property in stereotypeDefinition.Properties.Where(x => x.ValueOptions.Any())) { #>
            public class <#= property.Name.ToCSharpIdentifier() #>Options
            {
                public readonly string Value;

                public <#= property.Name.ToCSharpIdentifier() #>Options(string value)
                {
                    Value = value;
                }

                public <#= property.Name.ToCSharpIdentifier() #>OptionsEnum AsEnum()
                {
                    switch (Value)
                    {
<#      foreach(var option in property.ValueOptions) { #>
                        case "<#= option #>":
                            return <#= property.Name.ToCSharpIdentifier() #>OptionsEnum.<#= option.ToCSharpIdentifier() #>;
<#      } #>
                        default:
                            throw new ArgumentOutOfRangeException();
                    }
                }

<#      foreach(var option in property.ValueOptions) { #>
                public bool <#= ("Is" + option.ToPascalCase()).ToCSharpIdentifier() #>()
                {
                    return Value == "<#= option #>";
                }
<#      } #>
            }

            public enum <#= property.Name.ToCSharpIdentifier() #>OptionsEnum
            {
                <#= string.Join(@",
                ", property.ValueOptions.Select(option => option.ToCSharpIdentifier())) #>
            }
<#  } #>
        }

<#  }#>
    }
}