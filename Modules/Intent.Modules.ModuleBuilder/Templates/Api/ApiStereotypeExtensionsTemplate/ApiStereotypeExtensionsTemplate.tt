<#@ template language="C#" inherits="IntentRoslynProjectItemTemplateBase<IStereotypeDefinition>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Helpers" #>
using Intent.Metadata.Models;
using Intent.Modules.Common;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public static class <#= ClassName #>
    {
<#  foreach(var property in Model.Properties) { 
        foreach(var @interface in GetTargetInterfaces()) {
        switch (property.ControlType) {
            case StereotypePropertyControlType.TextBox:
            case StereotypePropertyControlType.TextArea:#>
        public static string Get<#= property.Name.ToCSharpIdentifier() #>(this <#= @interface #> model) {
            return model.GetStereotypeProperty<string>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#              break;
            case StereotypePropertyControlType.Number:#>
        public static int? Get<#= property.Name.ToCSharpIdentifier() #>(this <#= @interface #> model) {
            return model.GetStereotypeProperty<int?>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#              break;
            case StereotypePropertyControlType.Boolean:#>
        public static bool Get<#= property.Name.ToCSharpIdentifier() #>(this <#= @interface #> model) {
            return model.GetStereotypeProperty<bool>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#              break;
            case StereotypePropertyControlType.Select:#>
<#              switch (property.OptionsSource) {
                    case StereotypePropertyOptionsSource.LookupElement:
                    case StereotypePropertyOptionsSource.NestedLookup:#>
        public static IElement Get<#= property.Name.ToCSharpIdentifier() #>(this <#= @interface #> model) {
            return model.GetStereotypeProperty<IElement>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#                      break;
                case StereotypePropertyOptionsSource.Options:#>
        public static <#= property.Name.ToCSharpIdentifier() #>Options Get<#= property.Name.ToCSharpIdentifier() #>(this <#= @interface #> model) {
            result = model.GetStereotypeProperty<string>("<#= Model.Name #>", "<#= property.Name #>");
            switch (result) 
            {
<#      foreach(var option in property.ValueOptions) { #>
                case "<#= option #>":
                    return <#= option.ToCSharpIdentifier() #>;
<#      } #>
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

<#                      break;
                    default:
                        throw new ArgumentOutOfRangeException(property.OptionsSource.ToString());
                } #>
<#              break;
            case StereotypePropertyControlType.MultiSelect:#>
        public static IElement[] Get<#= property.Name.ToCSharpIdentifier() #>(this <#= @interface #> model) {
            return model.GetStereotypeProperty<IElement[]>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#              break;
            default:
                throw new ArgumentOutOfRangeException();
        }
        } #>
<#  } #>
    }

<#  foreach (var property in Model.Properties.Where(x => x.ValueOptions.Any())) { #>
    public enum <#= property.Name.ToCSharpIdentifier() #>Options 
    {
<#      foreach(var option in property.ValueOptions) { #>
        <#= option.ToCSharpIdentifier() #>,
<#      } #>
    }
<#  } #>
}