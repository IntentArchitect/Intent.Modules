<#@ template language="C#" inherits="IntentRoslynProjectItemTemplateBase<IStereotypeDefinition>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Helpers" #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public static class <#= ClassName #>
    {
<#  foreach(var property in Model.Properties) { 
        switch (property.ControlType) {
            case StereotypePropertyControlType.TextBox:
            case StereotypePropertyControlType.TextArea:#>
        public static string Get<#= property.Name.ToCSharpIdentifier() #>(this <#= InterfaceName #> model) {
            return model.GetStereotypeProperty<string>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#              break;
            case StereotypePropertyControlType.Number:#>
        public static int? Get<#= property.Name.ToCSharpIdentifier() #>(this <#= InterfaceName #> model) {
            return model.GetStereotypeProperty<int?>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#              break;
            case StereotypePropertyControlType.Boolean:#>
        public static bool Get<#= property.Name.ToCSharpIdentifier() #>(this <#= InterfaceName #> model) {
            return model.GetStereotypeProperty<bool>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#              break;
            case StereotypePropertyControlType.Select:#>
        public static IElement Get<#= property.Name.ToCSharpIdentifier() #>(this <#= InterfaceName #> model) {
            return model.GetStereotypeProperty<IElement>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#              break;
            case StereotypePropertyControlType.MultiSelect:#>
        public static IElement[] Get<#= property.Name.ToCSharpIdentifier() #>(this <#= InterfaceName #> model) {
            return model.GetStereotypeProperty<IElement>("<#= Model.Name #>", "<#= property.Name #>");
        }

<#              break;
            default:
                throw new ArgumentOutOfRangeException();
        } #>
<#  } #>
    }
}