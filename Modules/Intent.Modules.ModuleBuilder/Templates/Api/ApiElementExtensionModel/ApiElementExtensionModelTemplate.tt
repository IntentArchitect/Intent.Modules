<#@ template language="C#" inherits="CSharpTemplateBase<Intent.ModuleBuilder.Api.ElementExtensionModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.ModuleBuilder.Api" #>
using System;
using System.Collections.Generic;
using System.Linq;
using Intent.Metadata.Models;
using Intent.Modules.Common;

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Fully, Signature = Mode.Fully)]
    public class <#= ClassName #> : <#= GetBaseElementModel().ApiModelName #>
    {
        [IntentManaged(Mode.Fully, Body = Mode.Ignore)]
        public <#= ClassName #>(IElement element) : base(element)
        {
        }

<#  if (Model.MenuOptions != null) {
        foreach(var creationOption in Model.MenuOptions.ElementCreations) { #>
        public <#= FormatForCollection(creationOption.ApiModelName, creationOption.AllowMultiple()) #> <#= GetCreationOptionName(creationOption) #> => _element.ChildElements
            .GetElementsOfType(<#= creationOption.ApiModelName #>.SpecializationTypeId)
            .Select(x => new <#= creationOption.ApiModelName #>(x))
<#          if (creationOption.GetOptionSettings().AllowMultiple()) { #>
            .ToList();
<#          } else { #>
            .SingleOrDefault();
<#          } #>

<#      } #>
<#  } #>
    }
<#  if (Model.MappingSettings.Any()) { #>

    [IntentManaged(Mode.Fully)]
    public static class <#= ClassName #>Extensions
    {
<#      foreach(var mapping in Model.MappingSettings) { #>

        public static bool Has<#= mapping.Name.ToCSharpIdentifier() #>Mapping(this <#= GetBaseElementModel().ApiModelName #> type)
        {
            return type.InternalElement.MappedElement?.MappingSettingsId == "<#= mapping.Id #>";
        }

        public static IElementMapping Get<#= mapping.Name.ToCSharpIdentifier() #>Mapping(this <#= GetBaseElementModel().ApiModelName #> type)
        {
            return type.Has<#= mapping.Name.ToCSharpIdentifier() #>Mapping() ? type.InternalElement.MappedElement : null;
        }
<#      } #>
    }
<#  } #>
}