<#@ template language="C#" inherits="IntentRoslynProjectItemTemplateBase<IElementSettings>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Api" #>
using System;
using System.Collections.Generic;
using System.Linq;
using Intent.Metadata.Models;

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
    internal class <#= ClassName #> : <#= InterfaceName #>
    {
        public const string SpecializationType = "<#= Model.Name #>";
        private readonly IElement _element;

        public <#= ClassName #>(IElement element)
        {
            if (element.SpecializationType != SpecializationType)
            {
                throw new ArgumentException($"Invalid element type {element.SpecializationType}", nameof(element));
            }
            _element = element;
        }

        public string Id => _element.Id;
        
        public string Name => _element.Name;
        
        public IEnumerable<IStereotype> Stereotypes => _element.Stereotypes;
        
<#  if (Model.MenuOptions != null) {
        foreach(var creationOption in Model.MenuOptions.CreationOptions.Where(x => GetCreationOptionTypeInterface(x) != null)) { #>
        [IntentManaged(Mode.Fully)]
        public <#= GetCreationOptionTypeInterface(creationOption) #> <#= GetCreationOptionName(creationOption) #> => _element.ChildElements
            .Where(x => x.SpecializationType == Api.<#= GetCreationOptionTypeClass(creationOption) #>.SpecializationType)
            .Select(x => new <#= GetCreationOptionTypeClass(creationOption) #>(x))
<#      if (creationOption.AllowMultiple) { #>
            .ToList<<#= GetCreationOptionTypeClass(creationOption) #>>();
<#      } else { #>
            .SingleOrDefault();
<#      } #>
<#      }
    }#>

        protected bool Equals(<#= ClassName #> other)
        {
            return Equals(_element, other._element);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((<#= ClassName #>)obj);
        }

        public override int GetHashCode()
        {
            return (_element != null ? _element.GetHashCode() : 0);
        }
    }
}