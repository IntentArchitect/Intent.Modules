<#@ template language="C#" inherits="IntentRoslynProjectItemTemplateBase<AssociationSettingsModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Api" #>

using System;
using System.Collections.Generic;
using System.Linq;
using Intent.Metadata.Models;

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    public class <#= ClassName #> : IMetadataModel
    {
        [IntentManaged(Mode.Fully)]
        public const string SpecializationType = "<#= Model.Name #>";
        [IntentManaged(Mode.Fully)]
        protected readonly IAssociation _association;

        [IntentInitialGen]
        public <#= ClassName #>(IAssociation association, string requiredType = SpecializationType)
        {
            if (!requiredType.Equals(association.SpecializationType, StringComparison.InvariantCultureIgnoreCase))
            {
                throw new Exception($"Cannot create a '{GetType().Name}' from association with specialization type '{association.SpecializationType}'. Must be of type '{SpecializationType}'");
            }
            _association = association;
            SourceEnd = new <#=AssociationSourceEndClassName #>(association.SourceEnd, this);
            TargetEnd = new <#=AssociationTargetEndClassName #>(association.TargetEnd, this);
        }

        [IntentManaged(Mode.Fully)]
        public static <#= ClassName #> CreateFromEnd(IAssociationEnd associationEnd)
        {
            var association = new <#= ClassName #>(associationEnd.Association);
            return association;
        }


        [IntentManaged(Mode.Fully)]
        public string Id => _association.Id;
        
        [IntentManaged(Mode.Fully)]
        public <#=AssociationSourceEndClassName #> SourceEnd { get; }

        [IntentManaged(Mode.Fully)]
        public <#=AssociationTargetEndClassName #> TargetEnd { get; }

        [IntentManaged(Mode.Fully)]
        public IAssociation InternalAssociation => _association;
        
        [IntentManaged(Mode.Fully)]
        public override string ToString()
        {
            return _association.ToString();
        }

        [IntentManaged(Mode.Fully)]
        public bool Equals(<#= ClassName #> other)
        {
            return Equals(_association, other?._association);
        }

        [IntentManaged(Mode.Fully)]
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((<#= ClassName #>)obj);
        }

        [IntentManaged(Mode.Fully)]
        public override int GetHashCode()
        {
            return (_association != null ? _association.GetHashCode() : 0);
        }
    }

    [IntentManaged(Mode.Fully)]
    public class <#=AssociationSourceEndClassName #> : <#=AssociationEndClassName #>
    {
        public <#=AssociationSourceEndClassName #>(IAssociationEnd associationEnd, <#= ClassName #> association) : base(associationEnd, association)
        {
        }
    }

    [IntentManaged(Mode.Fully)]
    public class <#=AssociationTargetEndClassName #> : <#=AssociationEndClassName #>
    {
        public <#=AssociationTargetEndClassName #>(IAssociationEnd associationEnd, <#= ClassName #> association) : base(associationEnd, association)
        {
        }
    }

    [IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    public class <#=AssociationEndClassName #> : IAssociationEnd
    {
        [IntentManaged(Mode.Fully)]
        protected readonly IAssociationEnd _associationEnd;
        [IntentManaged(Mode.Fully)]
        private readonly <#= ClassName #> _association;

        [IntentManaged(Mode.Fully)]
        public <#=AssociationEndClassName #>(IAssociationEnd associationEnd, <#= ClassName #> association)
        {
            _associationEnd = associationEnd;
            _association = association;
        }

        [IntentManaged(Mode.Fully)]
        public string Id => _associationEnd.Id;
        [IntentManaged(Mode.Fully)]
        public string Name => _associationEnd.Name;
        [IntentManaged(Mode.Fully)]
        public <#= ClassName #> Association => _association;
        [IntentManaged(Mode.Fully)]
        IAssociation IAssociationEnd.Association => _association.InternalAssociation;
        [IntentManaged(Mode.Fully)]
        public bool IsNavigable => _associationEnd.IsNavigable;
        [IntentManaged(Mode.Fully)]
        public bool IsNullable => _associationEnd.IsNullable;
        [IntentManaged(Mode.Fully)]
        public bool IsCollection => _associationEnd.IsCollection;
        [IntentManaged(Mode.Fully)]
        public IElement Element => _associationEnd.Element;
        [IntentManaged(Mode.Fully)]
        public IEnumerable<ITypeReference> GenericTypeParameters => _associationEnd.GenericTypeParameters;
        [IntentManaged(Mode.Fully)]
        public string Comment => _associationEnd.Comment;
        [IntentManaged(Mode.Fully)]
        public IEnumerable<IStereotype> Stereotypes => _associationEnd.Stereotypes;

        [IntentManaged(Mode.Fully)]
        IAssociationEnd IAssociationEnd.OtherEnd()
        {
            return this.Equals(_association.SourceEnd) ? (IAssociationEnd)_association.TargetEnd : (IAssociationEnd)_association.SourceEnd;
        }

        [IntentManaged(Mode.Fully)]
        public bool IsTargetEnd()
        {
            return _associationEnd.IsTargetEnd();
        }

        [IntentManaged(Mode.Fully)]
        public bool IsSourceEnd()
        {
            return _associationEnd.IsSourceEnd();
        }
        
        [IntentManaged(Mode.Fully)]
        public override string ToString()
        {
            return _associationEnd.ToString();
        }

        [IntentManaged(Mode.Fully)]
        public bool Equals(<#=AssociationEndClassName #> other)
        {
            return Equals(_associationEnd, other._associationEnd);
        }

        [IntentManaged(Mode.Fully)]
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((<#=AssociationEndClassName #>)obj);
        }

        [IntentManaged(Mode.Fully)]
        public override int GetHashCode()
        {
            return (_associationEnd != null ? _associationEnd.GetHashCode() : 0);
        }
    }
}