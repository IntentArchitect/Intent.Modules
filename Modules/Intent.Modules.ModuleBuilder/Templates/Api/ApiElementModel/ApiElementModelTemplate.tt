<#@ template language="C#" inherits="CSharpTemplateBase<Intent.ModuleBuilder.Api.ElementSettingsModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.ModuleBuilder.Api" #>
using System;
using System.Collections.Generic;
using System.Linq;
using Intent.Metadata.Models;
using Intent.Modules.Common;
<#  if (HasParentFolder) { #>
using Intent.Modules.Common.Types.Api;
<#  } #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge)]
    public class <#= ClassName #> : <#= BaseType != null ? (BaseType + ", ") : "" #><#= GetInterfaces() #>
    {
        public <#= BaseType != null ? "new " : "" #>const string SpecializationType = "<#= Model.Name #>";
        public <#= BaseType != null ? "new " : "" #>const string SpecializationTypeId = "<#= Model.Id #>";
<#  if (BaseType == null) { #>
        protected readonly IElement _element;

        [IntentManaged(Mode.Ignore)]
        public <#= ClassName #>(IElement element, string requiredType = SpecializationType)
        {
            if (!requiredType.Equals(element.SpecializationType, StringComparison.InvariantCultureIgnoreCase))
            {
                throw new Exception($"Cannot create a '{GetType().Name}' from element with specialization type '{element.SpecializationType}'. Must be of type '{SpecializationType}'");
            }
            _element = element;
<#      if (HasParentFolder) { #>
            Folder = _element.ParentElement?.SpecializationTypeId == FolderModel.SpecializationTypeId ? new FolderModel(_element.ParentElement) : null;
<#      } #>
        }

        public string Id => _element.Id;
        
        public string Name => _element.Name;

        public string Comment => _element.Comment;
        
        public IEnumerable<IStereotype> Stereotypes => _element.Stereotypes;

<#      if (HasParentFolder) { #>
        public FolderModel Folder { get; }

<#      } #>
<#      if (Model.GetSettings().AllowSetValue()) { #>
        public string Value => _element.Value;

<#      } #>
<#      if (Model.GetSettings().AllowGenericTypes()) { #>
        public IEnumerable<string> GenericTypes => _element.GenericTypes.Select(x => x.Name);

<#      } #>
<#      if (!Model.GetTypeReferenceSettings().Mode().IsDisabled()) { #>
        public ITypeReference TypeReference => _element.TypeReference;

<#      } #>
<#      if (Model.MappingSettings != null) { #>
        public bool IsMapped => _element.IsMapped;

        public IElementMapping Mapping => _element.MappedElement;

<#      } #>
        public IElement InternalElement => _element;

<#  } else { #>

        public <#= ClassName #>(IElement element) : base(element, SpecializationType)
        {
        }

<#  } #>
<#  if (Model.MenuOptions != null) {
        foreach(var creationOption in Model.MenuOptions.ElementCreations) { 
            if (ExistsInBase(creationOption))
                continue;#>
        public <#= FormatForCollection(creationOption.ApiModelName, creationOption.AllowMultiple()) #> <#= GetCreationOptionName(creationOption) #> => _element.ChildElements
            .GetElementsOfType(<#= creationOption.ApiModelName #>.SpecializationTypeId)
            .Select(x => new <#= creationOption.ApiModelName #>(x))
<#          if (creationOption.GetOptionSettings().AllowMultiple()) { #>
            .ToList();
<#          } else { #>
            .SingleOrDefault();
<#          } #>

<#      } #>
<#  } #>
        public override string ToString()
        {
            return _element.ToString();
        }

        public bool Equals(<#= ClassName #> other)
        {
            return Equals(_element, other?._element);
        }

        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((<#= ClassName #>)obj);
        }

        public override int GetHashCode()
        {
            return (_element != null ? _element.GetHashCode() : 0);
        }
    }
}