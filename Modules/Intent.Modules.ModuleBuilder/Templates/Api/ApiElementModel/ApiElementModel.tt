<#@ template language="C#" inherits="IntentRoslynProjectItemTemplateBase<ElementSettingsModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Api" #>
using System;
using System.Collections.Generic;
using System.Linq;
using Intent.Metadata.Models;

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    public class <#= ClassName #> : <#= BaseType != null ? (BaseType + ", ") : "" #>IHasStereotypes, IMetadataModel
    {
<#  if (BaseType == null) { #>
        public const string SpecializationType = "<#= Model.Name #>";
        protected readonly IElement _element;

        [IntentInitialGen]
        public <#= ClassName #>(IElement element, string requiredType = SpecializationType)
        {
            if (!requiredType.Equals(element.SpecializationType, StringComparison.InvariantCultureIgnoreCase))
            {
                throw new Exception($"Cannot create a '{GetType().Name}' from element with specialization type '{element.SpecializationType}'. Must be of type '{SpecializationType}'");
            }
            _element = element;
        }

        public string Id => _element.Id;
        
        public string Name => _element.Name;
        
        public IEnumerable<IStereotype> Stereotypes => _element.Stereotypes;

<#      if (!Model.GetTypeReferenceSettings().Mode().IsDisabled()) { #>
        [IntentManaged(Mode.Fully)]
        public ITypeReference TypeReference => _element.TypeReference;

<#      } #>
<#  } else { #>
        public new const string SpecializationType = "<#= Model.Name #>";

        public <#= ClassName #>(IElement element) : base(element, SpecializationType)
        {
        }

<#  } #>
<#  if (Model.MenuOptions != null) {
        foreach(var creationOption in Model.MenuOptions.CreationOptions.Where(x => x.Type.SpecializationType != "Core Type")) { 
            if (ExistsInBase(creationOption))
                continue;#>
        [IntentManaged(Mode.Fully)]
        public <#= GetCreationOptionTypeClass(creationOption, creationOption.GetOptionSettings().AllowMultiple()) #> <#= GetCreationOptionName(creationOption) #> => _element.ChildElements
            .Where(x => x.SpecializationType == <#= GetCreationOptionTypeClass(creationOption) #>.SpecializationType)
            .Select(x => new <#= GetCreationOptionTypeClass(creationOption) #>(x))
<#      if (creationOption.GetOptionSettings().AllowMultiple()) { #>
            .ToList();
<#      } else { #>
            .SingleOrDefault();
<#      } #>
<#      }
    }#>

        [IntentManaged(Mode.Fully)]
        public bool Equals(<#= ClassName #> other)
        {
            return Equals(_element, other._element);
        }

        [IntentManaged(Mode.Fully)]
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != this.GetType()) return false;
            return Equals((<#= ClassName #>)obj);
        }

        [IntentManaged(Mode.Fully)]
        public override int GetHashCode()
        {
            return (_element != null ? _element.GetHashCode() : 0);
        }
    }
}