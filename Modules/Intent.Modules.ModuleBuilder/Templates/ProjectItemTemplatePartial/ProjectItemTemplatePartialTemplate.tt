<#@ template language="C#" inherits="IntentRoslynProjectItemTemplateBase<ITemplateDefinition>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Api" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Helpers" #>
<#@ import namespace="System.Linq" #>
using Intent.Metadata.Models;
using Intent.RoslynWeaver.Attributes;
using Intent.Engine;
using Intent.Templates;
using Intent.Modules.Common;
using Intent.Modules.Common.Templates;
using System;
using System.Collections.Generic;
using System.Linq;
<#=DependencyUsings#>
[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
	[IntentManaged(Mode.Merge)]
    partial class <#= ClassName #> : <#= GetTemplateBaseClass() #><<#= GetModelType() #>><#= GetConfiguredInterfaces() #>
    {
        [IntentManaged(Mode.Fully)]
        public const string TemplateId = "<#= GetTemplateId() #>";

<#  if (HasDecorators()) { #>
        private ICollection<<#= Model.GetExposedDecoratorContractType() #>> _decorators = new List<<#= Model.GetExposedDecoratorContractType() #>>();

<#  } #>
        [IntentInitialGen]
        public <#= ClassName #>(IProject project, <#= GetModelType() #> model) : base(TemplateId, project, model)
        {
        }

        [IntentManaged(Mode.Merge, Body = Mode.Ignore, Signature = Mode.Fully)]
        public override ITemplateFileConfig DefineDefaultFileMetadata()
        {
            return new DefaultFileMetadata(
                overwriteBehaviour: OverwriteBehaviour.Always,
                codeGenType: CodeGenType.Basic,
                fileName: "<#= Model.GetCreationMode() == CreationMode.FilePerModel ? "${Model.Name}" : Model.Name.Replace("Template", "") #>",
                fileExtension: "txt", // Change to desired file extension.
                defaultLocationInProject: "<#= Model.GetCreationMode() == CreationMode.FilePerModel ? Model.Name.Replace("Template", "") : "" #>"
            );
        }

<#  if (HasDecorators()) { #>
        [IntentManaged(Mode.Fully)]
        public void AddDecorator(<#= Model.GetExposedDecoratorContractType() #> decorator)
        {
            _decorators.Add(decorator);
        }

        [IntentManaged(Mode.Fully)]
        public IEnumerable<ICompositeContract> GetDecorators()
        {
            return _decorators;
        }
<#  } #>

<# /* if (HasTemplateDependencies()) { #>
        [IntentManaged(Mode.Fully, Body = Mode.Fully, Signature = Mode.Fully)]
        IEnumerable<ITemplateDependency> IHasTemplateDependencies.GetTemplateDependencies()
        {
            var templateDependencies = new List<ITemplateDependency>();
<#      foreach (var templateDependency in GetTemplateDependencyInfos().Where(p => !p.IsCustom)) { #>
                templateDependencies.Add(TemplateDependency.OnTemplate(<#= templateDependency.TemplateId #>));
<#      } #>
<#      if (GetTemplateDependencyInfos().Any(p => p.IsCustom)) { #>
                templateDependencies.AddRange(GetCustomTemplateDependencies());
<#      } #>
            return templateDependencies;
        }

<#      foreach (var templateDependency in GetTemplateDependencyInfos().Where(p => !p.IsCustom)) { #>
        [IntentManaged(Mode.Fully, Body = Mode.Fully, Signature = Mode.Fully)]
        private string Get<#= templateDependency.TemplateName.ToPascalCase() #>TemplateFullName(<#= templateDependency.TemplateModel #> model)
        {
            var templateDependency = TemplateDependency.OnTemplate(<#= templateDependency.TemplateId #>);
            var template = Project.FindTemplateInstance<<#= templateDependency.InstanceType #>>(templateDependency, model);
            return NormalizeNamespace($"{template.Namespace}.{template.ClassName}");
        }
<#      } #>

<#      if (GetTemplateDependencyInfos().Any(p => p.IsCustom)) { #>
        [IntentManaged(Mode.Merge, Body = Mode.Ignore, Signature = Mode.Fully)]
        private IEnumerable<ITemplateDependency> GetCustomTemplateDependencies()
        {
            return new ITemplateDependency[] 
            {
            };
        }
<#      } #>
<#  } */#>
    }
}