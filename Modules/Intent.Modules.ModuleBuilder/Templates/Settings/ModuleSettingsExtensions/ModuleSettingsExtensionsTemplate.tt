<#@ template language="C#" inherits="CSharpTemplateBase<IList<Intent.ModuleBuilder.Api.ModuleSettingsConfigurationModel>>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.ModuleBuilder.Api" #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    public static class <#= ClassName #>
    {<#  
    foreach(var settingsGroup in Model) { #>

        public static <#= settingsGroup.Name.ToCSharpIdentifier().ToPascalCase() #> Get<#= settingsGroup.Name.ToCSharpIdentifier().ToPascalCase() #>(this IApplicationSettingsProvider settings)
        {
            return new <#= settingsGroup.Name.ToCSharpIdentifier().ToPascalCase() #>(settings.GetGroup("<#= settingsGroup.Id #>"));
        }
<#  } #>
    }
<#  foreach(var settingsGroup in Model) { #>

    public class <#= settingsGroup.Name.ToCSharpIdentifier().ToPascalCase() #>
    {
        private readonly IGroupSettings _groupSettings;

        public <#= settingsGroup.Name.ToCSharpIdentifier().ToPascalCase() #>(IGroupSettings groupSettings)
        {
            _groupSettings = groupSettings;
        }<#      
        foreach(var settingsField in settingsGroup.Fields) { #>
<#          switch (settingsField.GetFieldConfiguration().ControlType().AsEnum())
            {
                case ModuleSettingsFieldConfigurationModelStereotypeExtensions.FieldConfiguration.ControlTypeOptionsEnum.TextBox:
                case ModuleSettingsFieldConfigurationModelStereotypeExtensions.FieldConfiguration.ControlTypeOptionsEnum.TextArea:
                case ModuleSettingsFieldConfigurationModelStereotypeExtensions.FieldConfiguration.ControlTypeOptionsEnum.Select:
                case ModuleSettingsFieldConfigurationModelStereotypeExtensions.FieldConfiguration.ControlTypeOptionsEnum.Number:#>

        public bool <#= settingsField.Name.ToCSharpIdentifier().ToPascalCase() #> => _groupSettings.GetSetting("<#= settingsField.Id #>")?.Value;
<#                    break;
                case ModuleSettingsFieldConfigurationModelStereotypeExtensions.FieldConfiguration.ControlTypeOptionsEnum.Checkbox:
                case ModuleSettingsFieldConfigurationModelStereotypeExtensions.FieldConfiguration.ControlTypeOptionsEnum.Switch:#>

        public bool <#= settingsField.Name.ToCSharpIdentifier().ToPascalCase() #> => bool.TryParse(_groupSettings.GetSetting("<#= settingsField.Id #>")?.Value.ToPascalCase(), out var result) && result;
<#                    break;
                case ModuleSettingsFieldConfigurationModelStereotypeExtensions.FieldConfiguration.ControlTypeOptionsEnum.MultiSelect:#>
<#                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            } #>
<#      } #>
    }
<#  } #>
}