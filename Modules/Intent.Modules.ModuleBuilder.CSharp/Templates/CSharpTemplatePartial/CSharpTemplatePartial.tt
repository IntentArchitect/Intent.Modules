<#@ template language="C#" inherits="CSharpTemplateBase<CSharpTemplateModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.CSharp.Api" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Api" #>
<#@ import namespace="Intent.Modules.ModuleBuilder.Helpers" #>
<#@ import namespace="System.Linq" #>
using System.Collections.Generic;
using Intent.Engine;
using Intent.Modules.Common.Templates;
using Intent.RoslynWeaver.Attributes;
using Intent.Templates;
<#= Model.GetModelType() != null ? string.Format("using {0};", Model.GetModelType().ParentModule.ApiNamespace) : "" #>

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
	[IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    partial class <#= ClassName #> : CSharpTemplateBase<<#= GetModelType() #>>
    {
        [IntentManaged(Mode.Fully)]
        public const string TemplateId = "<#= GetTemplateId() #>";

        [IntentInitialGen]
        public <#= ClassName #>(IOutputTarget outputTarget, <#= GetModelType() #> model) : base(TemplateId, outputTarget, model)
        {
        }

        protected override CSharpFileConfig DefineFileConfig()
        {
            return new CSharpFileConfig(
                className: $"<#= Model.IsFilePerModelTemplateRegistration() ? "{Model.Name}" : Model.Name.Replace("Template", "") #>",
                @namespace: $"{OutputTarget.GetNamespace()}");
        }

<#  if (/*HasDecorators()*/false) { #>
        [IntentManaged(Mode.Fully)]
        public void AddDecorator(<#= "TODO Decorator Type" #> decorator)
        {
            _decorators.Add(decorator);
        }

        [IntentManaged(Mode.Fully)]
        public IEnumerable<<#= "TODO Decorator Type" #>> GetDecorators()
        {
            return _decorators;
        }
<#  } #>
    }
}