<#@ template language="C#" inherits="CSharpTemplateBase<Intent.ModuleBuilder.CSharp.Api.CSharpTemplateModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.Common.Types.Api" #>
<#@ import namespace="Intent.ModuleBuilder.CSharp.Api" #>
<#@ import namespace="Intent.ModuleBuilder.Api" #>
<#@ import namespace="Intent.ModuleBuilder.Helpers" #>
<#@ import namespace="System.Linq" #>
using System.Collections.Generic;
using Intent.Engine;
using Intent.Modules.Common;
using Intent.Modules.Common.Templates;
using Intent.Modules.Common.CSharp.Templates;
using Intent.Templates;
<#= Model.GetModelType() != null ? string.Format("using {0};", Model.GetModelType().Namespace) : "" #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    [IntentManaged(Mode.Fully, Body = Mode.Merge)]
    partial class <#= ClassName #> : <#= GetBaseType() #>
    {
        public const string TemplateId = "<#= GetTemplateId() #>";

        [IntentManaged(Mode.Fully, Body = Mode.Ignore)]
        public <#= ClassName #>(IOutputTarget outputTarget, <#= GetModelType() #> model<#= Model.GetModelType() == null ? " = null" : ""#>) : base(TemplateId, outputTarget, model)
        {
        }

        [IntentManaged(Mode.Fully, Body = Mode.Ignore)]
        protected override CSharpFileConfig DefineFileConfig()
        {
            return new CSharpFileConfig(
                className: $"<#= GetClassName() #>",
                @namespace: $"{this.GetNamespace()}",
                relativeLocation: $"{this.GetFolderPath()}");
        }
<#  if (Model.GetCSharpTemplateSettings()?.TemplatingMethod().IsCustom() == true) { #>

        [IntentManaged(Mode.Fully, Body = Mode.Ignore)]
        public override string TransformText()
        {
            throw new NotImplementedException("Implement custom template here");
        }
<#  } #>
    }
}