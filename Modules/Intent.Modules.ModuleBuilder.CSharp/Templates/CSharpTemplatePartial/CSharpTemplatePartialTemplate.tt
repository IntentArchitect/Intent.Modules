<#@ template language="C#" inherits="CSharpTemplateBase<Intent.ModuleBuilder.CSharp.Api.CSharpTemplateModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modules.Common.Types.Api" #>
<#@ import namespace="Intent.ModuleBuilder.CSharp.Api" #>
<#@ import namespace="Intent.ModuleBuilder.Api" #>
<#@ import namespace="Intent.ModuleBuilder.Helpers" #>
<#@ import namespace="System.Linq" #>
using System.Collections.Generic;
using Intent.Engine;
using Intent.Modules.Common.Templates;
using Intent.Modules.Common.CSharp.Templates;
using Intent.RoslynWeaver.Attributes;
using Intent.Templates;
<#= Model.GetModelType() != null ? string.Format("using {0};", Model.GetModelType().Namespace) : "" #>

[assembly: DefaultIntentManaged(Mode.Merge)]

namespace <#= Namespace #>
{
	[IntentManaged(Mode.Merge, Signature = Mode.Fully)]
    partial class <#= ClassName #> : <#= GetBaseType() #>
    {
        [IntentManaged(Mode.Fully)]
        public const string TemplateId = "<#= GetTemplateId() #>";

	    [IntentManaged(Mode.Merge, Signature = Mode.Fully)]
        public <#= ClassName #>(IOutputTarget outputTarget, <#= GetModelType() #> model<#= Model.GetModelType() == null ? " = null" : ""#>) : base(TemplateId, outputTarget, model)
        {
        }

        protected override CSharpFileConfig DefineFileConfig()
        {
            return new CSharpFileConfig(
                className: $"<#= Model.IsFilePerModelTemplateRegistration() ? "{Model.Name}" : Model.Name.RemoveSuffix("Template") #>",
                @namespace: $"{this.GetNamespace()}",
                relativeLocation: $"{this.GetFolderPath()}");
        }
    }
}