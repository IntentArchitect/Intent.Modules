<#@ template language="C#" inherits="CSharpTemplateBase<Intent.ModuleBuilder.CSharp.Api.RazorTemplateModel>" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.CSharp.Templates" #>
<#@ import namespace="Intent.ModuleBuilder.CSharp.Api" #>
using System;
using Intent.Engine;
using Intent.Modules.Common;
using Intent.Modules.Common.Templates;
using Intent.Modules.Common.CSharp.Templates;
<#= Model.GetModelType() != null ? $"using {Model.GetModelType().Namespace};" : "" #>

[assembly: DefaultIntentManaged(Mode.Fully)]

namespace <#= Namespace #>
{
    /// <summary>
    /// A Razor template.
    /// </summary>
    [IntentManaged(Mode.Fully, Body = Mode.Merge)]
    <#= GetAccessModifier() #>class <#= ClassName #> : <#= string.Join(", ", GetBaseTypes()) #>
    {
        /// <inheritdoc cref="IntentTemplateBase.Id"/>
        [IntentManaged(Mode.Fully)]
        public const string TemplateId = "<#= GetTemplateId() #>";

        /// <summary>
        /// Creates a new instance of <see cref="<#= ClassName #>"/>.
        /// </summary>
        [IntentManaged(Mode.Fully, Body = Mode.Ignore)]
        public <#= ClassName #>(IOutputTarget outputTarget, <#= GetModelType() #> model<#= Model.GetModelType() == null ? " = null" : "" #>) : base(TemplateId, outputTarget, model)
        {
<#  if (Model.GetRazorTemplateSettings()?.TemplatingMethod().IsRazorFileBuilder() == true) { #>
            RazorFile = IRazorFile.Create.(this, $"<#= GetClassName() #>")
                .Configure(file =>
                {
                    file.AddPageDirective($"<#= this.GetPageDirectiveText() #>");

                    file.AddHtmlElement("PageTitle", element => element.WithText($"<#= this.GetPageTitleText() #>"));
                });
<#  } #>
        }
<#  if (Model.GetRazorTemplateSettings()?.TemplatingMethod().IsRazorFileBuilder() == true) { #>

        /// <inheritdoc />
        [IntentManaged(Mode.Fully)]
        public <#= UseType("Intent.Modules.Blazor.Api.IRazorFile") #> RazorFile { get; }
<#  } #>

        /// <inheritdoc />
        [IntentManaged(Mode.Fully)]
        protected override RazorFileConfig DefineRazorConfig()
        {
            return RazorFile.GetConfig();
        }
<#  if (Model.GetRazorTemplateSettings()?.TemplatingMethod().IsRazorFileBuilder() == true) { #>

        /// <inheritdoc />
        [IntentManaged(Mode.Fully)]
        public override string TransformText() => RazorFile.ToString();
<#  } #>
    }
}