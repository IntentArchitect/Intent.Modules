<#@ template  debug="true"  inherits="IntentProjectItemTemplateBase<object>"#>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#


#>
'use strict';
namespace App.Auth {
    export class LoginCallbackState implements ng.ui.IState {
        url = "/login-callback/{response}";
        data = {
            allowAnonymous: true
        };
        templateUrl = "/App/Auth/LoginCallback/LoginCallback.html";
        resolve = {
            viewModel: () => { return {}; },
            processToken: ["$stateParams", "$rootScope", "$state", "OidcTokenManager", "UserInfoService", "localStorageService", "viewModel", (
                $stateParams: any,
                $rootScope: ng.IRootScopeService,
                $state: ng.ui.IStateService,
                oidcTokenManager: Oidc.OidcTokenManager,
                userInfoService: UserInfoService,
                localStorage: ng.local.storage.ILocalStorageService,
                viewModel: any) => {

                var hash = $stateParams.response;
                if (hash.charAt(0) === "&") {
                    hash = hash.substr(1);
                }

                oidcTokenManager.processTokenCallbackAsync(hash).then(() => {
                    userInfoService.loadFromProfile(oidcTokenManager.profile);
                    $state.go(localStorage.get("login-return-state"), localStorage.get("login-return-state-params"));
                }, error => {
                    $rootScope.$apply(() => {
                        viewModel.errors = (error && error.message) ? error.message : error;
                        if (viewModel.errors === "No request state loaded" && !oidcTokenManager.expired) {
                            $state.go(localStorage.get("login-return-state"), localStorage.get("login-return-state-params"));
                        }
                    });
                });
            }]
        };
        controller = ["$scope", "viewModel", ($scope: ng.IScope, viewModel: IViewModel) => {
            (<any>$scope).vm = viewModel;
        }];
    }
}