// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 14.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Intent.Modules.AngularJs.Auth.ImplicitAuth.Templates.HttpInterceptor
{
    using Intent.SoftwareFactory.Templates;
    using System;
    using System.IO;
    using System.Diagnostics;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Dev\Intent\IntentArchitect\Modules\Intent.Modules.AngularJs.Auth.ImplicitAuth\Templates\HttpInterceptor\AngularAuthHttpInterceptorServiceTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "14.0.0.0")]
    public partial class AngularAuthHttpInterceptorServiceTemplate : IntentProjectItemTemplateBase<object>
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write(" \r\n");
            
            #line 13 "C:\Dev\Intent\IntentArchitect\Modules\Intent.Modules.AngularJs.Auth.ImplicitAuth\Templates\HttpInterceptor\AngularAuthHttpInterceptorServiceTemplate.tt"




            
            #line default
            #line hidden
            this.Write(@"namespace App.Auth {

    export class AuthHttpInterceptorService implements ng.IHttpInterceptor {

        static $inject = ['$q', ""OidcTokenManager""];

        constructor(
            private $q: ng.IQService,
            private tokenManager: Oidc.OidcTokenManager) {}

        public request = (config: any) => {
            var token = this.tokenManager.access_token;
            if (token) {
                config.headers['Authorization'] = 'Bearer ' + token;
            }
            return config;
        }

        public responseError = (rejection: any) => {
            if (rejection.status === 401) {
                if (this.tokenManager.expired) {
                    this.tokenManager.removeToken();
                    this.tokenManager.redirectForToken();
                } else {
					// Handle 401 error
                }
            }
            if (rejection.status === 403) {
				// Handle 403 error
            }
            return this.$q.reject(rejection);
        }
    }

    angular.module(""Auth"").service(""AuthHttpInterceptorService"", AuthHttpInterceptorService);
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
