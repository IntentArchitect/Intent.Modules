<#@ template  debug="true" hostSpecific="true" inherits="IntentProjectItemTemplateBase<object>"#>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ Assembly Name="Intent.SoftwareFactory" #>
<#@ import namespace="Intent.SoftwareFactory.Templates" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#


#>
namespace App.Auth {
    angular.module("Auth", ["LocalStorageModule"])
        .service("OidcTokenManager", ["Config", (config: any) =>
            new OidcTokenManager({
                authority: config["identity_authority_url"],
                client_id: "<#= ApplicationName #>",
                redirect_uri: config["<#= BasePathConfigKey #>"] + "/#/login-callback/",
                response_type: "id_token token",
                scope: "openid profile email roles api",
                persist: true,
                load_user_profile: true,
                silent_renew: true,
                silent_redirect_uri: config["<#= BasePathConfigKey #>"] + "/App/Auth/RenewToken/SilentRenew.html"
            })])
        .config([
            "$stateProvider", ($stateProvider: ng.ui.IStateProvider) => {
                $stateProvider
                    .state("login-callback", new LoginCallbackState())
                    .state("login-redirect", new LoginRedirectState());
            }
        ])
        .config([
            "$httpProvider", ($httpProvider: ng.IHttpProvider) => {
                $httpProvider.interceptors.push("AuthHttpInterceptorService");
            }
        ])
        .run([
            "$rootScope", "$state", "OidcTokenManager", "localStorageService", ($rootScope: any, $state: ng.ui.IStateService, tokenManager: Oidc.OidcTokenManager, localStorage: ng.local.storage.ILocalStorageService) => {
                $rootScope.$on("$stateChangeStart", (event: any, toState: ng.ui.IState, toParams: any, fromState: ng.ui.IState, fromParams: any) => {
                    var stateAllowsAnonymous = toState.data !== undefined ? toState.data.allowAnonymous : false;
                    if (!stateAllowsAnonymous && tokenManager.expired) {
                        localStorage.set("login-return-state", toState.name);
                        localStorage.set("login-return-state-params", toParams);
                        event.preventDefault();
                        $state.go("login-redirect", {}, { reload: true });
                    } else if (toState.name == "login-redirect") {
                        if (!tokenManager.expired) {
                            event.preventDefault();
                            location.href = location.origin;
                        }
                    }<#= AdditionalIfElses() #>
                });
            }
        ]);
}